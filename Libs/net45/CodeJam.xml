<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CodeJam</name>
    </assembly>
    <members>
        <member name="T:JetBrains.Annotations.CanBeNullAttribute">
            <summary>
            Indicates that the value of the marked element could be <c>null</c> sometimes,
            so the check for <c>null</c> is necessary before its usage.
            </summary>
            <example><code>
            [CanBeNull] object Test() => null;
            
            void UseTest() {
              var p = Test();
              var s = p.ToString(); // Warning: Possible 'System.NullReferenceException'
            }
            </code></example>
        </member>
        <member name="T:JetBrains.Annotations.NotNullAttribute">
            <summary>
            Indicates that the value of the marked element could never be <c>null</c>.
            </summary>
            <example><code>
            [NotNull] object Foo() {
              return null; // Warning: Possible 'null' assignment
            }
            </code></example>
        </member>
        <member name="T:JetBrains.Annotations.ItemNotNullAttribute">
            <summary>
            Can be appplied to symbols of types derived from IEnumerable as well as to symbols of Task
            and Lazy classes to indicate that the value of a collection item, of the Task.Result property
            or of the Lazy.Value property can never be null.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.ItemCanBeNullAttribute">
            <summary>
            Can be appplied to symbols of types derived from IEnumerable as well as to symbols of Task
            and Lazy classes to indicate that the value of a collection item, of the Task.Result property
            or of the Lazy.Value property can be null.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.ImplicitNotNullAttribute">
            <summary>
            Implicitly apply [NotNull]/[ItemNotNull] annotation to all the of type members and parameters
            in particular scope where this annotation is used (type declaration or whole assembly).
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.StringFormatMethodAttribute">
            <summary>
            Indicates that the marked method builds string by format pattern and (optional) arguments.
            Parameter, which contains format string, should be given in constructor. The format string
            should be in <see cref="M:System.String.Format(System.IFormatProvider,System.String,System.Object[])"/>-like form.
            </summary>
            <example><code>
            [StringFormatMethod("message")]
            void ShowError(string message, params object[] args) { /* do something */ }
            
            void Foo() {
              ShowError("Failed: {0}"); // Warning: Non-existing argument in format string
            }
            </code></example>
        </member>
        <member name="M:JetBrains.Annotations.StringFormatMethodAttribute.#ctor(System.String)">
            <param name="formatParameterName">
            Specifies which parameter of an annotated method should be treated as format-string
            </param>
        </member>
        <member name="T:JetBrains.Annotations.ValueProviderAttribute">
            <summary>
            For a parameter that is expected to be one of the limited set of values.
            Specify fields of which type should be used as values for this parameter.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.InvokerParameterNameAttribute">
            <summary>
            Indicates that the function argument should be string literal and match one
            of the parameters of the caller function. For example, ReSharper annotates
            the parameter of <see cref="T:System.ArgumentNullException"/>.
            </summary>
            <example><code>
            void Foo(string param) {
              if (param == null)
                throw new ArgumentNullException("par"); // Warning: Cannot resolve symbol
            }
            </code></example>
        </member>
        <member name="T:JetBrains.Annotations.NotifyPropertyChangedInvocatorAttribute">
             <summary>
             Indicates that the method is contained in a type that implements
             <c>System.ComponentModel.INotifyPropertyChanged</c> interface and this method
             is used to notify that some property value changed.
             </summary>
             <remarks>
             The method should be non-static and conform to one of the supported signatures:
             <list>
             <item><c>NotifyChanged(string)</c></item>
             <item><c>NotifyChanged(params string[])</c></item>
             <item><c>NotifyChanged{T}(Expression{Func{T}})</c></item>
             <item><c>NotifyChanged{T,U}(Expression{Func{T,U}})</c></item>
             <item><c>SetProperty{T}(ref T, T, string)</c></item>
             </list>
             </remarks>
             <example><code>
             public class Foo : INotifyPropertyChanged {
               public event PropertyChangedEventHandler PropertyChanged;
             
               [NotifyPropertyChangedInvocator]
               protected virtual void NotifyChanged(string propertyName) { ... }
            
               string _name;
             
               public string Name {
                 get { return _name; }
                 set { _name = value; NotifyChanged("LastName"); /* Warning */ }
               }
             }
             </code>
             Examples of generated notifications:
             <list>
             <item><c>NotifyChanged("Property")</c></item>
             <item><c>NotifyChanged(() =&gt; Property)</c></item>
             <item><c>NotifyChanged((VM x) =&gt; x.Property)</c></item>
             <item><c>SetProperty(ref myField, value, "Property")</c></item>
             </list>
             </example>
        </member>
        <member name="T:JetBrains.Annotations.ContractAnnotationAttribute">
            <summary>
            Describes dependency between method input and output.
            </summary>
            <syntax>
            <p>Function Definition Table syntax:</p>
            <list>
            <item>FDT      ::= FDTRow [;FDTRow]*</item>
            <item>FDTRow   ::= Input =&gt; Output | Output &lt;= Input</item>
            <item>Input    ::= ParameterName: Value [, Input]*</item>
            <item>Output   ::= [ParameterName: Value]* {halt|stop|void|nothing|Value}</item>
            <item>Value    ::= true | false | null | notnull | canbenull</item>
            </list>
            If method has single input parameter, it's name could be omitted.<br/>
            Using <c>halt</c> (or <c>void</c>/<c>nothing</c>, which is the same)
            for method output means that the methos doesn't return normally.<br/>
            <c>canbenull</c> annotation is only applicable for output parameters.<br/>
            You can use multiple <c>[ContractAnnotation]</c> for each FDT row,
            or use single attribute with rows separated by semicolon.<br/>
            </syntax>
            <examples><list>
            <item><code>
            [ContractAnnotation("=> halt")]
            public void TerminationMethod()
            </code></item>
            <item><code>
            [ContractAnnotation("halt &lt;= condition: false")]
            public void Assert(bool condition, string text) // regular assertion method
            </code></item>
            <item><code>
            [ContractAnnotation("s:null => true")]
            public bool IsNullOrEmpty(string s) // string.IsNullOrEmpty()
            </code></item>
            <item><code>
            // A method that returns null if the parameter is null,
            // and not null if the parameter is not null
            [ContractAnnotation("null => null; notnull => notnull")]
            public object Transform(object data) 
            </code></item>
            <item><code>
            [ContractAnnotation("s:null=>false; =>true,result:notnull; =>false, result:null")]
            public bool TryParse(string s, out Person result)
            </code></item>
            </list></examples>
        </member>
        <member name="T:JetBrains.Annotations.LocalizationRequiredAttribute">
            <summary>
            Indicates that marked element should be localized or not.
            </summary>
            <example><code>
            [LocalizationRequiredAttribute(true)]
            class Foo {
              string str = "my string"; // Warning: Localizable string
            }
            </code></example>
        </member>
        <member name="T:JetBrains.Annotations.CannotApplyEqualityOperatorAttribute">
            <summary>
            Indicates that the value of the marked type (or its derivatives)
            cannot be compared using '==' or '!=' operators and <c>Equals()</c>
            should be used instead. However, using '==' or '!=' for comparison
            with <c>null</c> is always permitted.
            </summary>
            <example><code>
            [CannotApplyEqualityOperator]
            class NoEquality { }
            
            class UsesNoEquality {
              void Test() {
                var ca1 = new NoEquality();
                var ca2 = new NoEquality();
                if (ca1 != null) { // OK
                  bool condition = ca1 == ca2; // Warning
                }
              }
            }
            </code></example>
        </member>
        <member name="T:JetBrains.Annotations.BaseTypeRequiredAttribute">
            <summary>
            When applied to a target attribute, specifies a requirement for any type marked
            with the target attribute to implement or inherit specific type or types.
            </summary>
            <example><code>
            [BaseTypeRequired(typeof(IComponent)] // Specify requirement
            class ComponentAttribute : Attribute { }
            
            [Component] // ComponentAttribute requires implementing IComponent interface
            class MyComponent : IComponent { }
            </code></example>
        </member>
        <member name="T:JetBrains.Annotations.UsedImplicitlyAttribute">
            <summary>
            Indicates that the marked symbol is used implicitly (e.g. via reflection, in external library),
            so this symbol will not be marked as unused (as well as by other usage inspections).
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.MeansImplicitUseAttribute">
            <summary>
            Should be used on attributes and causes ReSharper to not mark symbols marked with such attributes
            as unused (as well as by other usage inspections)
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseKindFlags.Access">
            <summary>Only entity marked with attribute considered used.</summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseKindFlags.Assign">
            <summary>Indicates implicit assignment to a member.</summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseKindFlags.InstantiatedWithFixedConstructorSignature">
            <summary>
            Indicates implicit instantiation of a type with fixed constructor signature.
            That means any unused constructor parameters won't be reported as such.
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseKindFlags.InstantiatedNoFixedConstructorSignature">
            <summary>Indicates implicit instantiation of a type.</summary>
        </member>
        <member name="T:JetBrains.Annotations.ImplicitUseTargetFlags">
            <summary>
            Specify what is considered used implicitly when marked
            with <see cref="T:JetBrains.Annotations.MeansImplicitUseAttribute"/> or <see cref="T:JetBrains.Annotations.UsedImplicitlyAttribute"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseTargetFlags.Members">
            <summary>Members of entity marked with attribute are considered used.</summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseTargetFlags.WithMembers">
            <summary>Entity marked with attribute and all its members considered used.</summary>
        </member>
        <member name="T:JetBrains.Annotations.PublicAPIAttribute">
            <summary>
            This attribute is intended to mark publicly available API
            which should not be removed and so is treated as used.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.InstantHandleAttribute">
            <summary>
            Tells code analysis engine if the parameter is completely handled when the invoked method is on stack.
            If the parameter is a delegate, indicates that delegate is executed while the method is executed.
            If the parameter is an enumerable, indicates that it is enumerated while the method is executed.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.PureAttribute">
            <summary>
            Indicates that a method does not make any observable state changes.
            The same as <c>System.Diagnostics.Contracts.PureAttribute</c>.
            </summary>
            <example><code>
            [Pure] int Multiply(int x, int y) => x * y;
            
            void M() {
              Multiply(123, 42); // Waring: Return value of pure method is not used
            }
            </code></example>
        </member>
        <member name="T:JetBrains.Annotations.MustUseReturnValueAttribute">
            <summary>
            Indicates that the return value of method invocation must be used.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.ProvidesContextAttribute">
            <summary>
            Indicates the type member or parameter of some type, that should be used instead of all other ways
            to get the value that type. This annotation is useful when you have some "context" value evaluated
            and stored somewhere, meaning that all other ways to get this value must be consolidated with existing one.
            </summary>
            <example><code>
            class Foo {
              [ProvidesContext] IBarService _barService = ...;
            
              void ProcessNode(INode node) {
                DoSomething(node, node.GetGlobalServices().Bar);
                //              ^ Warning: use value of '_barService' field
              }
            }
            </code></example>
        </member>
        <member name="T:JetBrains.Annotations.PathReferenceAttribute">
            <summary>
            Indicates that a parameter is a path to a file or a folder within a web project.
            Path can be relative or absolute, starting from web root (~).
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.SourceTemplateAttribute">
            <summary>
            An extension method marked with this attribute is processed by ReSharper code completion
            as a 'Source Template'. When extension method is completed over some expression, it's source code
            is automatically expanded like a template at call site.
            </summary>
            <remarks>
            Template method body can contain valid source code and/or special comments starting with '$'.
            Text inside these comments is added as source code when the template is applied. Template parameters
            can be used either as additional method parameters or as identifiers wrapped in two '$' signs.
            Use the <see cref="T:JetBrains.Annotations.MacroAttribute"/> attribute to specify macros for parameters.
            </remarks>
            <example>
            In this example, the 'forEach' method is a source template available over all values
            of enumerable types, producing ordinary C# 'foreach' statement and placing caret inside block:
            <code>
            [SourceTemplate]
            public static void forEach&lt;T&gt;(this IEnumerable&lt;T&gt; xs) {
              foreach (var x in xs) {
                 //$ $END$
              }
            }
            </code>
            </example>
        </member>
        <member name="T:JetBrains.Annotations.MacroAttribute">
            <summary>
            Allows specifying a macro for a parameter of a <see cref="T:JetBrains.Annotations.SourceTemplateAttribute">source template</see>.
            </summary>
            <remarks>
            You can apply the attribute on the whole method or on any of its additional parameters. The macro expression
            is defined in the <see cref="P:JetBrains.Annotations.MacroAttribute.Expression"/> property. When applied on a method, the target
            template parameter is defined in the <see cref="P:JetBrains.Annotations.MacroAttribute.Target"/> property. To apply the macro silently
            for the parameter, set the <see cref="P:JetBrains.Annotations.MacroAttribute.Editable"/> property value = -1.
            </remarks>
            <example>
            Applying the attribute on a source template method:
            <code>
            [SourceTemplate, Macro(Target = "item", Expression = "suggestVariableName()")]
            public static void forEach&lt;T&gt;(this IEnumerable&lt;T&gt; collection) {
              foreach (var item in collection) {
                //$ $END$
              }
            }
            </code>
            Applying the attribute on a template method parameter:
            <code>
            [SourceTemplate]
            public static void something(this Entity x, [Macro(Expression = "guid()", Editable = -1)] string newguid) {
              /*$ var $x$Id = "$newguid$" + x.ToString();
              x.DoSomething($x$Id); */
            }
            </code>
            </example>
        </member>
        <member name="P:JetBrains.Annotations.MacroAttribute.Expression">
            <summary>
            Allows specifying a macro that will be executed for a <see cref="T:JetBrains.Annotations.SourceTemplateAttribute">source template</see>
            parameter when the template is expanded.
            </summary>
        </member>
        <member name="P:JetBrains.Annotations.MacroAttribute.Editable">
            <summary>
            Allows specifying which occurrence of the target parameter becomes editable when the template is deployed.
            </summary>
            <remarks>
            If the target parameter is used several times in the template, only one occurrence becomes editable;
            other occurrences are changed synchronously. To specify the zero-based index of the editable occurrence,
            use values >= 0. To make the parameter non-editable when the template is expanded, use -1.
            </remarks>>
        </member>
        <member name="P:JetBrains.Annotations.MacroAttribute.Target">
            <summary>
            Identifies the target parameter of a <see cref="T:JetBrains.Annotations.SourceTemplateAttribute">source template</see> if the
            <see cref="T:JetBrains.Annotations.MacroAttribute"/> is applied on a template method.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcActionAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter
            is an MVC action. If applied to a method, the MVC action name is calculated
            implicitly from the context. Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.ChildActionExtensions.RenderAction(HtmlHelper, String)</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcAreaAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC area.
            Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.ChildActionExtensions.RenderAction(HtmlHelper, String)</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcControllerAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter is
            an MVC controller. If applied to a method, the MVC controller name is calculated
            implicitly from the context. Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.ChildActionExtensions.RenderAction(HtmlHelper, String, String)</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcMasterAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC Master. Use this attribute
            for custom wrappers similar to <c>System.Web.Mvc.Controller.View(String, String)</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcModelTypeAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC model type. Use this attribute
            for custom wrappers similar to <c>System.Web.Mvc.Controller.View(String, Object)</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcPartialViewAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter is an MVC
            partial view. If applied to a method, the MVC partial view name is calculated implicitly
            from the context. Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.RenderPartialExtensions.RenderPartial(HtmlHelper, String)</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcSuppressViewErrorAttribute">
            <summary>
            ASP.NET MVC attribute. Allows disabling inspections for MVC views within a class or a method.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcDisplayTemplateAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC display template.
            Use this attribute for custom wrappers similar to 
            <c>System.Web.Mvc.Html.DisplayExtensions.DisplayForModel(HtmlHelper, String)</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcEditorTemplateAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC editor template.
            Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.EditorExtensions.EditorForModel(HtmlHelper, String)</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcTemplateAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC template.
            Use this attribute for custom wrappers similar to
            <c>System.ComponentModel.DataAnnotations.UIHintAttribute(System.String)</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcViewAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter
            is an MVC view component. If applied to a method, the MVC view name is calculated implicitly
            from the context. Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Controller.View(Object)</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcViewComponentAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter
            is an MVC view component name.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcViewComponentViewAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter
            is an MVC view component view. If applied to a method, the MVC view component view name is default.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcActionSelectorAttribute">
            <summary>
            ASP.NET MVC attribute. When applied to a parameter of an attribute,
            indicates that this parameter is an MVC action name.
            </summary>
            <example><code>
            [ActionName("Foo")]
            public ActionResult Login(string returnUrl) {
              ViewBag.ReturnUrl = Url.Action("Foo"); // OK
              return RedirectToAction("Bar"); // Error: Cannot resolve action
            }
            </code></example>
        </member>
        <member name="T:JetBrains.Annotations.RazorSectionAttribute">
            <summary>
            Razor attribute. Indicates that a parameter or a method is a Razor section.
            Use this attribute for custom wrappers similar to 
            <c>System.Web.WebPages.WebPageBase.RenderSection(String)</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.CollectionAccessAttribute">
            <summary>
            Indicates how method, constructor invocation or property access
            over collection type affects content of the collection.
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.CollectionAccessType.None">
            <summary>Method does not use or modify content of the collection.</summary>
        </member>
        <member name="F:JetBrains.Annotations.CollectionAccessType.Read">
            <summary>Method only reads content of the collection but does not modify it.</summary>
        </member>
        <member name="F:JetBrains.Annotations.CollectionAccessType.ModifyExistingContent">
            <summary>Method can change content of the collection but does not add new elements.</summary>
        </member>
        <member name="F:JetBrains.Annotations.CollectionAccessType.UpdatedContent">
            <summary>Method can add new elements to the collection.</summary>
        </member>
        <member name="T:JetBrains.Annotations.AssertionMethodAttribute">
            <summary>
            Indicates that the marked method is assertion method, i.e. it halts control flow if
            one of the conditions is satisfied. To set the condition, mark one of the parameters with 
            <see cref="T:JetBrains.Annotations.AssertionConditionAttribute"/> attribute.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AssertionConditionAttribute">
            <summary>
            Indicates the condition parameter of the assertion method. The method itself should be
            marked by <see cref="T:JetBrains.Annotations.AssertionMethodAttribute"/> attribute. The mandatory argument of
            the attribute is the assertion type.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AssertionConditionType">
            <summary>
            Specifies assertion type. If the assertion method argument satisfies the condition,
            then the execution continues. Otherwise, execution is assumed to be halted.
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.AssertionConditionType.IS_TRUE">
            <summary>Marked parameter should be evaluated to true.</summary>
        </member>
        <member name="F:JetBrains.Annotations.AssertionConditionType.IS_FALSE">
            <summary>Marked parameter should be evaluated to false.</summary>
        </member>
        <member name="F:JetBrains.Annotations.AssertionConditionType.IS_NULL">
            <summary>Marked parameter should be evaluated to null value.</summary>
        </member>
        <member name="F:JetBrains.Annotations.AssertionConditionType.IS_NOT_NULL">
            <summary>Marked parameter should be evaluated to not null value.</summary>
        </member>
        <member name="T:JetBrains.Annotations.TerminatesProgramAttribute">
            <summary>
            Indicates that the marked method unconditionally terminates control flow execution.
            For example, it could unconditionally throw exception.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.LinqTunnelAttribute">
            <summary>
            Indicates that method is pure LINQ method, with postponed enumeration (like Enumerable.Select,
            .Where). This annotation allows inference of [InstantHandle] annotation for parameters
            of delegate type by analyzing LINQ method chains.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.NoEnumerationAttribute">
            <summary>
            Indicates that IEnumerable, passed as parameter, is not enumerated.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.RegexPatternAttribute">
            <summary>
            Indicates that parameter is regular expression pattern.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.XamlItemsControlAttribute">
            <summary>
            XAML attribute. Indicates the type that has <c>ItemsSource</c> property and should be treated
            as <c>ItemsControl</c>-derived type, to enable inner items <c>DataContext</c> type resolve.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.XamlItemBindingOfItemsControlAttribute">
            <summary>
            XAML attribute. Indicates the property of some <c>BindingBase</c>-derived type, that
            is used to bind some item of <c>ItemsControl</c>-derived type. This annotation will
            enable the <c>DataContext</c> type resolve for XAML bindings for such properties.
            </summary>
            <remarks>
            Property should have the tree ancestor of the <c>ItemsControl</c> type or
            marked with the <see cref="T:JetBrains.Annotations.XamlItemsControlAttribute"/> attribute.
            </remarks>
        </member>
        <member name="T:JetBrains.Annotations.NoReorder">
            <summary>
            Prevents the Member Reordering feature from tossing members of the marked class.
            </summary>
            <remarks>
            The attribute must be mentioned in your member reordering patterns
            </remarks>
        </member>
        <member name="T:CodeJam.Algorithms">
            <summary>Miscellaneous algorithms</summary>
        </member>
        <member name="M:CodeJam.Algorithms.EqualRange``1(System.Collections.Generic.IList{``0},``0)">
            <summary>
            Returns the tuple of [i, j] where
            	i is the smallest index in the range [0, list.Count - 1] such that list[i] >= value or list.Count if no such i exists
            	j is the smallest index in the range [0, list.Count - 1] such that list[i] > value or list.Count if no such j exists
            <remarks>Comparer&lt;T&gt;.Default is being used for comparison</remarks>
            </summary>
            <typeparam name="TElement">The list element type</typeparam>
            <param name="list">The sorted list</param>
            <param name="value">The value to compare</param>
            <returns>The tuple of lower bound and upper bound for the value</returns>
        </member>
        <member name="M:CodeJam.Algorithms.EqualRange``1(System.Collections.Generic.IList{``0},``0,System.Int32)">
            <summary>
            Returns the tuple of [i, j] where
            	i is the smallest index in the range [from, list.Count - 1] such that list[i] >= value or list.Count if no such i exists
            	j is the smallest index in the range [from, list.Count - 1] such that list[i] > value or list.Count if no such j exists
            <remarks>Comparer&lt;T&gt;.Default is being used for comparison</remarks>
            </summary>
            <typeparam name="TElement">The list element type</typeparam>
            <param name="list">The sorted list</param>
            <param name="value">The value to compare</param>
            <param name="from">The minimum index</param>
            <returns>The tuple of lower bound and upper bound for the value</returns>
        </member>
        <member name="M:CodeJam.Algorithms.EqualRange``2(System.Collections.Generic.IList{``0},``1,System.Func{``0,``1,System.Int32})">
            <summary>
            Returns the tuple of [i, j] where
            	i is the smallest index in the range [0, list.Count - 1] such that list[i] >= value or list.Count if no such i exists
            	j is the smallest index in the range [0, list.Count - 1] such that list[i] > value or list.Count if no such j exists
            </summary>
            <typeparam name="TElement">The list element type</typeparam>
            <typeparam name="TValue">The type of the value</typeparam>
            <param name="list">The sorted list</param>
            <param name="value">The value to compare</param>
            <param name="comparer">The function with the Comparer&lt;T&gt;.Compare semantics</param>
            <returns>The tuple of lower bound and upper bound for the value</returns>
        </member>
        <member name="M:CodeJam.Algorithms.EqualRange``2(System.Collections.Generic.IList{``0},``1,System.Int32,System.Int32,System.Func{``0,``1,System.Int32})">
            <summary>
            Returns the tuple of [i, j] where
            	i is the smallest index in the range [from, to - 1] such that list[i] >= value or "to" if no such i exists
            	j is the smallest index in the range [from, to - 1] such that list[i] > value or "to" if no such j exists
            </summary>
            <typeparam name="TElement">The list element type</typeparam>
            <typeparam name="TValue">The type of the value</typeparam>
            <param name="list">The sorted list</param>
            <param name="value">The value to compare</param>
            <param name="from">The minimum index</param>
            <param name="to">The upper bound for the index (not included)</param>
            <param name="comparer">The function with the Comparer&lt;T&gt;.Compare semantics</param>
            <returns>The tuple of lower bound and upper bound for the value</returns>
        </member>
        <member name="M:CodeJam.Algorithms.PartitionPoint``1(System.Collections.Generic.IList{``0},System.Predicate{``0})">
            <summary>
            Returns the index i in the range [0, list.Count - 1] such that
            	predicate(list[j]) = true for j &lt; i
            	and predicate(list[k]) = false for k >= i
            or list.Count if no such i exists
            <remarks>The list should be partitioned according to the predicate</remarks>
            </summary>
            <typeparam name="T">The list element type</typeparam>
            <param name="list">The sorted list</param>
            <param name="predicate">The predicate</param>
            <returns>The partition point</returns>
        </member>
        <member name="M:CodeJam.Algorithms.PartitionPoint``1(System.Collections.Generic.IList{``0},System.Int32,System.Predicate{``0})">
            <summary>
            Returns the index i in the range [from, list.Count - 1] such that
            	predicate(list[j]) = true for j &lt; i
            	and predicate(list[k]) = false for k >= i
            or list.Count if no such i exists
            <remarks>The list should be partitioned according to the predicate</remarks>
            </summary>
            <typeparam name="T">The list element type</typeparam>
            <param name="list">The sorted list</param>
            <param name="from">The minimum index</param>
            <param name="predicate">The predicate</param>
            <returns>The partition point</returns>
        </member>
        <member name="M:CodeJam.Algorithms.PartitionPoint``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32,System.Predicate{``0})">
            <summary>
            Returns the index i in the range [from, to - 1] such that
            	predicate(list[j]) = true for j &lt; i
            	and predicate(list[k]) = false for k >= i
            or "to" if no such i exists
            <remarks>The list should be partitioned according to the predicate</remarks>
            </summary>
            <typeparam name="T">The list element type</typeparam>
            <param name="list">The sorted list</param>
            <param name="from">The minimum index</param>
            <param name="to">The upper bound for the index (not included)</param>
            <param name="predicate">The predicate</param>
            <returns>The partition point</returns>
        </member>
        <member name="M:CodeJam.Algorithms.LowerBound``1(System.Collections.Generic.IList{``0},``0)">
            <summary>
            Returns the minimum index i in the range [0, list.Count - 1] such that list[i] >= value
            or list.Count if no such i exists
            <remarks>Comparer&lt;T&gt;.Default is being used for comparison</remarks>
            </summary>
            <typeparam name="TElement">The list element type</typeparam>
            <param name="list">The sorted list</param>
            <param name="value">The value to compare</param>
            <returns>The lower bound for the value</returns>
        </member>
        <member name="M:CodeJam.Algorithms.LowerBound``1(System.Collections.Generic.IList{``0},``0,System.Int32)">
            <summary>
            Returns the minimum index i in the range [from, list.Count - 1] such that list[i] >= value
            or list.Count if no such i exists
            <remarks>Comparer&lt;T&gt;.Default is being used for comparison</remarks>
            </summary>
            <typeparam name="TElement">The list element type</typeparam>
            <param name="list">The sorted list</param>
            <param name="value">The value to compare</param>
            <param name="from">The minimum index</param>
            <returns>The lower bound for the value</returns>
        </member>
        <member name="M:CodeJam.Algorithms.LowerBound``2(System.Collections.Generic.IList{``0},``1,System.Func{``0,``1,System.Int32})">
            <summary>
            Returns the minimum index i in the range [0, list.Count - 1] such that list[i] >= value
            or list.Count if no such i exists
            </summary>
            <typeparam name="TElement">The list element type</typeparam>
            <typeparam name="TValue">The type of the value</typeparam>
            <param name="list">The sorted list</param>
            <param name="value">The value to compare</param>
            <param name="comparer">The function with the Comparer&lt;T&gt;.Compare semantics</param>
            <returns>The lower bound for the value</returns>
        </member>
        <member name="M:CodeJam.Algorithms.LowerBound``2(System.Collections.Generic.IList{``0},``1,System.Int32,System.Int32,System.Func{``0,``1,System.Int32})">
            <summary>
            Returns the minimum index i in the range [from, to - 1] such that list[i] >= value
            or "to" if no such i exists
            </summary>
            <typeparam name="TElement">The list element type</typeparam>
            <typeparam name="TValue">The type of the value</typeparam>
            <param name="list">The sorted list</param>
            <param name="value">The value to compare</param>
            <param name="from">The minimum index</param>
            <param name="to">The upper bound for the index (not included)</param>
            <param name="comparer">The function with the Comparer&lt;T&gt;.Compare semantics</param>
            <returns>The lower bound for the value</returns>
        </member>
        <member name="M:CodeJam.Algorithms.ValidateIndicesRange(System.Int32,System.Int32,System.Int32)">
            <summary>Validates a range of indices of a list</summary>
            <param name="from">The minimum index</param>
            <param name="to">The upper bound of the index (not included)</param>
            <param name="count">The number of elements in the list</param>
        </member>
        <member name="M:CodeJam.Algorithms.Memoize``2(System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``0},System.Boolean)">
            <summary>
            Caches function value for specific argument.
            </summary>
            <param name="func">Function to memoize.</param>
            <param name="comparer">Argument comparer</param>
            <param name="threadSafe">If true - returns thread safe implementation</param>
            <typeparam name="TArg">Type of argument</typeparam>
            <typeparam name="TResult">Type of result</typeparam>
            <returns>Memoized function</returns>
        </member>
        <member name="M:CodeJam.Algorithms.Memoize``2(System.Func{``0,``1},System.Boolean)">
            <summary>
            Caches function value for specific argument.
            </summary>
            <param name="func">Function to memoize.</param>
            <param name="threadSafe">If true - returns thread safe implementation</param>
            <typeparam name="TArg">Type of argument</typeparam>
            <typeparam name="TResult">Type of result</typeparam>
            <returns>Memoized function</returns>
        </member>
        <member name="M:CodeJam.Algorithms.Memoize``3(System.Func{``0,``1,``2},System.Boolean)">
            <summary>
            Caches function value for specific arguments.
            </summary>
            <param name="func">Function to memoize.</param>
            <param name="threadSafe">If true - returns thread safe implementation</param>
            <typeparam name="TArg1">Type of argument 1</typeparam>
            <typeparam name="TArg2">Type of argument 2</typeparam>
            <typeparam name="TResult">Type of result</typeparam>
            <returns>Memoized function</returns>
        </member>
        <member name="M:CodeJam.Algorithms.Memoize``4(System.Func{``0,``1,``2,``3},System.Boolean)">
            <summary>
            Caches function value for specific arguments.
            </summary>
            <param name="func">Function to memoize.</param>
            <param name="threadSafe">If true - returns thread safe implementation</param>
            <typeparam name="TArg1">Type of argument 1</typeparam>
            <typeparam name="TArg2">Type of argument 2</typeparam>
            <typeparam name="TArg3">Type of argument 3</typeparam>
            <typeparam name="TResult">Type of result</typeparam>
            <returns>Memoized function</returns>
        </member>
        <member name="M:CodeJam.Algorithms.Memoize``5(System.Func{``0,``1,``2,``3,``4},System.Boolean)">
            <summary>
            Caches function value for specific arguments.
            </summary>
            <param name="func">Function to memoize.</param>
            <param name="threadSafe">If true - returns thread safe implementation</param>
            <typeparam name="TArg1">Type of argument 1</typeparam>
            <typeparam name="TArg2">Type of argument 2</typeparam>
            <typeparam name="TArg3">Type of argument 3</typeparam>
            <typeparam name="TArg4">Type of argument 4</typeparam>
            <typeparam name="TResult">Type of result</typeparam>
            <returns>Memoized function</returns>
        </member>
        <member name="M:CodeJam.Algorithms.Memoize``6(System.Func{``0,``1,``2,``3,``4,``5},System.Boolean)">
            <summary>
            Caches function value for specific arguments.
            </summary>
            <param name="func">Function to memoize.</param>
            <param name="threadSafe">If true - returns thread safe implementation</param>
            <typeparam name="TArg1">Type of argument 1</typeparam>
            <typeparam name="TArg2">Type of argument 2</typeparam>
            <typeparam name="TArg3">Type of argument 3</typeparam>
            <typeparam name="TArg4">Type of argument 4</typeparam>
            <typeparam name="TArg5">Type of argument 5</typeparam>
            <typeparam name="TResult">Type of result</typeparam>
            <returns>Memoized function</returns>
        </member>
        <member name="M:CodeJam.Algorithms.Swap``1(``0@,``0@)">
            <summary>Swaps two objects</summary>
        </member>
        <member name="M:CodeJam.Algorithms.UpperBound``1(System.Collections.Generic.IList{``0},``0)">
            <summary>
            Returns the minimum index i in the range [0, list.Count - 1] such that list[i] > value
            or list.Count if no such i exists
            <remarks>Comparer&lt;T&gt;.Default is being used for comparison</remarks>
            </summary>
            <typeparam name="TElement">The list element type</typeparam>
            <param name="list">The sorted list</param>
            <param name="value">The value to compare</param>
            <returns>The upper bound for the value</returns>
        </member>
        <member name="M:CodeJam.Algorithms.UpperBound``1(System.Collections.Generic.IList{``0},``0,System.Int32)">
            <summary>
            Returns the minimum index i in the range [from, list.Count - 1] such that list[i] > value
            or list.Count if no such i exists
            <remarks>Comparer&lt;T&gt;.Default is being used for comparison</remarks>
            </summary>
            <typeparam name="TElement">The list element type</typeparam>
            <param name="list">The sorted list</param>
            <param name="value">The value to compare</param>
            <param name="from">The minimum index</param>
            <returns>The upper bound for the value</returns>
        </member>
        <member name="M:CodeJam.Algorithms.UpperBound``2(System.Collections.Generic.IList{``0},``1,System.Func{``0,``1,System.Int32})">
            <summary>
            Returns the minimum index i in the range [0, list.Count - 1] such that list[i] > value
            or list.Count if no such i exists
            </summary>
            <typeparam name="TElement">The list element type</typeparam>
            <typeparam name="TValue">The type of the value</typeparam>
            <param name="list">The sorted list</param>
            <param name="value">The value to compare</param>
            <param name="comparer">The function with the Comparer&lt;T&gt;.Compare semantics</param>
            <returns>The upper bound for the value</returns>
        </member>
        <member name="M:CodeJam.Algorithms.UpperBound``2(System.Collections.Generic.IList{``0},``1,System.Int32,System.Int32,System.Func{``0,``1,System.Int32})">
            <summary>
            Returns the minimum index i in the range [from, to - 1] such that list[i] > value
            or "to" if no such i exists
            </summary>
            <typeparam name="TElement">The list element type</typeparam>
            <typeparam name="TValue">The type of the value</typeparam>
            <param name="list">The sorted list</param>
            <param name="value">The value to compare</param>
            <param name="from">The minimum index</param>
            <param name="to">The upper bound for the index (not included)</param>
            <param name="comparer">The function with the Comparer&lt;T&gt;.Compare semantics</param>
            <returns>The upper bound for the value</returns>
        </member>
        <member name="M:CodeJam.Algorithms.UpperBoundCore``2(System.Collections.Generic.IList{``0},``1,System.Int32,System.Int32,System.Func{``0,``1,System.Int32})">
            <summary>
            Returns the minimum index i in the range [from, to - 1] such that list[i] > value
            or "to" if no such i exists
            </summary>
            <typeparam name="TElement">The list element type</typeparam>
            <typeparam name="TValue">The type of the value</typeparam>
            <param name="list">The sorted list</param>
            <param name="value">The value to compare</param>
            <param name="from">The minimum index</param>
            <param name="to">The upper bound for the index (not included)</param>
            <param name="comparer">The function with the Comparer&lt;T&gt;.Compare semantics</param>
            <returns>The upper bound for the value</returns>
        </member>
        <member name="T:CodeJam.HashCode">
            <summary>
            Hash code helper methods.
            </summary>
        </member>
        <member name="M:CodeJam.HashCode.Combine(System.Int32,System.Int32)">
            <summary>
            Combines hash codes.
            </summary>
            <param name="h1">Hash code 1</param>
            <param name="h2">Hash code 2</param>
            <returns>Combined hash code</returns>
        </member>
        <member name="M:CodeJam.HashCode.Combine(System.Int32,System.Int32,System.Int32)">
            <summary>
            Combines hash codes.
            </summary>
            <param name="h1">Hash code 1</param>
            <param name="h2">Hash code 2</param>
            <param name="h3">Hash code 3</param>
            <returns>Combined hash code</returns>
        </member>
        <member name="M:CodeJam.HashCode.Combine(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Combines hash codes.
            </summary>
            <param name="h1">Hash code 1</param>
            <param name="h2">Hash code 2</param>
            <param name="h3">Hash code 3</param>
            <param name="h4">Hash code 4</param>
            <returns>Combined hash code</returns>
        </member>
        <member name="M:CodeJam.HashCode.Combine(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Combines hash codes.
            </summary>
            <param name="h1">Hash code 1</param>
            <param name="h2">Hash code 2</param>
            <param name="h3">Hash code 3</param>
            <param name="h4">Hash code 4</param>
            <param name="h5">Hash code 5</param>
            <returns>Combined hash code</returns>
        </member>
        <member name="M:CodeJam.HashCode.Combine(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Combines hash codes.
            </summary>
            <param name="h1">Hash code 1</param>
            <param name="h2">Hash code 2</param>
            <param name="h3">Hash code 3</param>
            <param name="h4">Hash code 4</param>
            <param name="h5">Hash code 5</param>
            <param name="h6">Hash code 6</param>
            <returns>Combined hash code</returns>
        </member>
        <member name="M:CodeJam.HashCode.Combine(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Combines hash codes.
            </summary>
            <param name="h1">Hash code 1</param>
            <param name="h2">Hash code 2</param>
            <param name="h3">Hash code 3</param>
            <param name="h4">Hash code 4</param>
            <param name="h5">Hash code 5</param>
            <param name="h6">Hash code 6</param>
            <param name="h7">Hash code 7</param>
            <returns>Combined hash code</returns>
        </member>
        <member name="M:CodeJam.HashCode.Combine(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Combines hash codes.
            </summary>
            <param name="h1">Hash code 1</param>
            <param name="h2">Hash code 2</param>
            <param name="h3">Hash code 3</param>
            <param name="h4">Hash code 4</param>
            <param name="h5">Hash code 5</param>
            <param name="h6">Hash code 6</param>
            <param name="h7">Hash code 7</param>
            <param name="h8">Hash code 8</param>
            <returns>Combined hash code</returns>
        </member>
        <member name="M:CodeJam.HashCode.CombineValues``1(``0[])">
            <summary>
            Combines hash codes.
            </summary>
            <param name="values">The collection to combine hash codes.</param>
            <returns>
            Combined hash code.
            </returns>
        </member>
        <member name="M:CodeJam.HashCode.CombineValues``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Combines hash codes.
            </summary>
            <param name="values">The sequence to combine hash codes.</param>
            <returns>
            Combined hash code.
            </returns>
        </member>
        <member name="T:CodeJam.Arithmetic.Operators`1">
            <summary>
            Callbacks for common arithmetic actions.
            Look at OperatorsPerformanceTest to see why.
            </summary>
        </member>
        <member name="P:CodeJam.Arithmetic.Operators`1.UnaryMinus">
            <summary>
            UnaryMinus operator.
            </summary>
        </member>
        <member name="P:CodeJam.Arithmetic.Operators`1.OnesComplement">
            <summary>
            OnesComplement operator.
            </summary>
        </member>
        <member name="P:CodeJam.Arithmetic.Operators`1.Plus">
            <summary>
            Plus operator.
            </summary>
        </member>
        <member name="P:CodeJam.Arithmetic.Operators`1.Minus">
            <summary>
            Minus operator.
            </summary>
        </member>
        <member name="P:CodeJam.Arithmetic.Operators`1.Mul">
            <summary>
            Mul operator.
            </summary>
        </member>
        <member name="P:CodeJam.Arithmetic.Operators`1.Div">
            <summary>
            Div operator.
            </summary>
        </member>
        <member name="P:CodeJam.Arithmetic.Operators`1.Modulo">
            <summary>
            Modulo operator.
            </summary>
        </member>
        <member name="P:CodeJam.Arithmetic.Operators`1.Xor">
            <summary>
            Xor operator.
            </summary>
        </member>
        <member name="P:CodeJam.Arithmetic.Operators`1.BitwiseAnd">
            <summary>
            BitwiseAnd operator.
            </summary>
        </member>
        <member name="P:CodeJam.Arithmetic.Operators`1.BitwiseOr">
            <summary>
            BitwiseOr operator.
            </summary>
        </member>
        <member name="P:CodeJam.Arithmetic.Operators`1.LeftShift">
            <summary>
            LeftShift operator.
            </summary>
        </member>
        <member name="P:CodeJam.Arithmetic.Operators`1.RightShift">
            <summary>
            RightShift operator.
            </summary>
        </member>
        <member name="F:CodeJam.Arithmetic.Operators`1.Compare">
            <summary>
            Comparison callback
            </summary>
        </member>
        <member name="F:CodeJam.Arithmetic.Operators`1.AreEqual">
            <summary>
            Equality comparison callback
            </summary>
        </member>
        <member name="F:CodeJam.Arithmetic.Operators`1.AreNotEqual">
            <summary>
            Inequality comparison callback
            </summary>
        </member>
        <member name="F:CodeJam.Arithmetic.Operators`1.GreaterThan">
            <summary>
            Equality comparison callback
            </summary>
        </member>
        <member name="F:CodeJam.Arithmetic.Operators`1.GreaterThanOrEqual">
            <summary>
            Equality comparison callback
            </summary>
        </member>
        <member name="F:CodeJam.Arithmetic.Operators`1.LessThan">
            <summary>
            Equality comparison callback
            </summary>
        </member>
        <member name="F:CodeJam.Arithmetic.Operators`1.LessThanOrEqual">
            <summary>
            Equality comparison callback
            </summary>
        </member>
        <member name="T:CodeJam.Arithmetic.OperatorsFactory">
            <summary>
            Helper class to emit operators logic
            </summary>
        </member>
        <member name="T:CodeJam.Code">
            <summary>
            Assertions class. Part that excluded from debug assertions generation.
            </summary>
            <summary>
            Assertions class.
            </summary>
        </member>
        <member name="M:CodeJam.Code.DisposedIf``1(System.Boolean,``0)">
            <summary>
            Assertion for object disposal
            </summary>
        </member>
        <member name="M:CodeJam.Code.DisposedIf``1(System.Boolean,``0,System.String)">
            <summary>
            Assertion for object disposal
            </summary>
        </member>
        <member name="M:CodeJam.Code.DisposedIf``1(System.Boolean,``0,System.String,System.Object[])">
            <summary>
            Assertion for object disposal
            </summary>
        </member>
        <member name="M:CodeJam.Code.DisposedIfNull``2(``0,``1)">
            <summary>
            Assertion for object disposal
            </summary>
        </member>
        <member name="M:CodeJam.Code.DisposedIfNull``2(``0,``1,System.String)">
            <summary>
            Assertion for object disposal
            </summary>
        </member>
        <member name="M:CodeJam.Code.DisposedIfNull``2(``0,``1,System.String,System.Object[])">
            <summary>
            Assertion for object disposal
            </summary>
        </member>
        <member name="M:CodeJam.Code.NotNull``1(``0,System.String)">
            <summary>
            Ensures that <paramref name="arg" /> != <c>null</c>
            </summary>
        </member>
        <member name="M:CodeJam.Code.NotNull``1(System.Nullable{``0},System.String)">
            <summary>
            Ensures that <paramref name="arg" /> != <c>null</c>
            </summary>
        </member>
        <member name="M:CodeJam.Code.NotNullNorEmpty(System.String,System.String)">
            <summary>
            Ensures that <paramref name="arg" /> is not null nor empty
            </summary>
        </member>
        <member name="M:CodeJam.Code.NotNullNorWhiteSpace(System.String,System.String)">
            <summary>
            Ensures that <paramref name="arg" /> is not null nor white space
            </summary>
        </member>
        <member name="M:CodeJam.Code.AssertArgument(System.Boolean,System.String,System.String)">
            <summary>
            Assertion for the argument value
            </summary>
        </member>
        <member name="M:CodeJam.Code.AssertArgument(System.Boolean,System.String,System.String,System.Object[])">
            <summary>
            Assertion for the argument value
            </summary>
        </member>
        <member name="M:CodeJam.Code.InRange(System.Int32,System.String,System.Int32,System.Int32)">
            <summary>
            Assertion for the argument in range
            </summary>
        </member>
        <member name="M:CodeJam.Code.InRange``1(``0,System.String,``0,``0)">
            <summary>
            Assertion for the argument in range
            </summary>
        </member>
        <member name="M:CodeJam.Code.ValidIndex(System.Int32,System.String)">
            <summary>
            Assertion for index in range
            </summary>
        </member>
        <member name="M:CodeJam.Code.ValidIndex(System.Int32,System.String,System.Int32)">
            <summary>
            Assertion for index in range
            </summary>
        </member>
        <member name="M:CodeJam.Code.ValidIndexPair(System.Int32,System.String,System.Int32,System.String,System.Int32)">
            <summary>
            Assertion for from-to index pair
            </summary>
        </member>
        <member name="M:CodeJam.Code.ValidIndexAndCount(System.Int32,System.String,System.Int32,System.String,System.Int32)">
            <summary>
            Assertion for startIndex-count pair
            </summary>
        </member>
        <member name="M:CodeJam.Code.AssertState(System.Boolean,System.String)">
            <summary>
            State assertion
            </summary>
        </member>
        <member name="M:CodeJam.Code.AssertState(System.Boolean,System.String,System.Object[])">
            <summary>
            State assertion
            </summary>
        </member>
        <member name="T:CodeJam.CodeExceptions">
            <summary>
            Exception factory class
            </summary>
        </member>
        <member name="P:CodeJam.CodeExceptions.BreakOnException">
            <summary>
            If true, breaks execution on assertion failure.
            Enabled by default.
            </summary>
        </member>
        <member name="M:CodeJam.CodeExceptions.BreakIfAttached">
            <summary>
            BreaksExecution if debugger attached
            </summary>
        </member>
        <member name="M:CodeJam.CodeExceptions.FormatMessage(System.String,System.Object[])">
            <summary>
            Formats message or returns <paramref name="messageFormat"/> as it is if <paramref name="args"/> are null or empty
            </summary>
        </member>
        <member name="M:CodeJam.CodeExceptions.ArgumentNull(System.String)">
            <summary>
            Creates <seealso cref="T:System.ArgumentNullException"/>
            </summary>
        </member>
        <member name="M:CodeJam.CodeExceptions.ArgumentNullOrEmpty(System.String)">
            <summary>
            Creates <seealso cref="T:System.ArgumentException"/> for empty string
            </summary>
        </member>
        <member name="M:CodeJam.CodeExceptions.ArgumentNullOrWhiteSpace(System.String)">
            <summary>
            Creates <seealso cref="T:System.ArgumentException"/> for empty (or whitespace) string
            </summary>
        </member>
        <member name="M:CodeJam.CodeExceptions.ArgumentOutOfRange(System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates <seealso cref="T:System.ArgumentOutOfRangeException"/>
            </summary>
        </member>
        <member name="M:CodeJam.CodeExceptions.ArgumentOutOfRange``1(System.String,``0,``0,``0)">
            <summary>
            Creates <seealso cref="T:System.ArgumentOutOfRangeException"/>
            </summary>
        </member>
        <member name="M:CodeJam.CodeExceptions.IndexOutOfRange(System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates <seealso cref="T:System.IndexOutOfRangeException"/>
            </summary>
        </member>
        <member name="M:CodeJam.CodeExceptions.Argument(System.String,System.String,System.Object[])">
            <summary>
            Creates <seealso cref="T:System.ArgumentException"/>
            </summary>
        </member>
        <member name="M:CodeJam.CodeExceptions.InvalidOperation(System.String,System.Object[])">
            <summary>
            Creates <seealso cref="T:System.InvalidOperationException"/>
            </summary>
        </member>
        <member name="M:CodeJam.CodeExceptions.UnexpectedArgumentValue``1(System.String,``0)">
            <summary>
            Creates <seealso cref="T:System.ArgumentOutOfRangeException"/>.
            Used to be thrown from the default: switch clause
            </summary>
        </member>
        <member name="M:CodeJam.CodeExceptions.UnexpectedArgumentValue``1(System.String,``0,System.String,System.Object[])">
            <summary>
            Creates <seealso cref="T:System.ArgumentOutOfRangeException"/>.
            Used to be thrown from default: switch clause
            </summary>
        </member>
        <member name="M:CodeJam.CodeExceptions.UnexpectedValue``1(``0)">
            <summary>
            Creates <seealso cref="T:System.InvalidOperationException"/>.
            Used to be thrown from the default: switch clause
            </summary>
        </member>
        <member name="M:CodeJam.CodeExceptions.UnexpectedValue(System.String,System.Object[])">
            <summary>
            Creates <seealso cref="T:System.InvalidOperationException"/>.
            Used to be thrown from default: switch clause
            </summary>
        </member>
        <member name="M:CodeJam.CodeExceptions.ObjectDisposed(System.Type)">
            <summary>
            Throw this if the object is disposed.
            </summary>
        </member>
        <member name="M:CodeJam.CodeExceptions.ObjectDisposed(System.Type,System.String,System.Object[])">
            <summary>
            Throw this if the object is disposed.
            </summary>
        </member>
        <member name="M:CodeJam.CodeExceptions.Unreachable(System.String,System.Object[])">
            <summary>
            Used to be thrown in places expected to be unreachable.
            </summary>
        </member>
        <member name="T:CodeJam.DebugCode">
            <summary>
            Debug-time assertions class. Common constants
            </summary>
            <summary>
            Assertions class.
            </summary>
        </member>
        <member name="F:CodeJam.DebugCode.DebugCondition">
            <summary>
            Conditional symbol for debug builds.
            </summary>
        </member>
        <member name="M:CodeJam.DebugCode.NotNull``1(``0,System.String)">
            <summary>
            Ensures that <paramref name="arg" /> != <c>null</c>
            </summary>
        </member>
        <member name="M:CodeJam.DebugCode.NotNull``1(System.Nullable{``0},System.String)">
            <summary>
            Ensures that <paramref name="arg" /> != <c>null</c>
            </summary>
        </member>
        <member name="M:CodeJam.DebugCode.NotNullNorEmpty(System.String,System.String)">
            <summary>
            Ensures that <paramref name="arg" /> is not null nor empty
            </summary>
        </member>
        <member name="M:CodeJam.DebugCode.NotNullNorWhiteSpace(System.String,System.String)">
            <summary>
            Ensures that <paramref name="arg" /> is not null nor white space
            </summary>
        </member>
        <member name="M:CodeJam.DebugCode.AssertArgument(System.Boolean,System.String,System.String)">
            <summary>
            Assertion for the argument value
            </summary>
        </member>
        <member name="M:CodeJam.DebugCode.AssertArgument(System.Boolean,System.String,System.String,System.Object[])">
            <summary>
            Assertion for the argument value
            </summary>
        </member>
        <member name="M:CodeJam.DebugCode.InRange(System.Int32,System.String,System.Int32,System.Int32)">
            <summary>
            Assertion for the argument in range
            </summary>
        </member>
        <member name="M:CodeJam.DebugCode.InRange``1(``0,System.String,``0,``0)">
            <summary>
            Assertion for the argument in range
            </summary>
        </member>
        <member name="M:CodeJam.DebugCode.ValidIndex(System.Int32,System.String)">
            <summary>
            Assertion for index in range
            </summary>
        </member>
        <member name="M:CodeJam.DebugCode.ValidIndex(System.Int32,System.String,System.Int32)">
            <summary>
            Assertion for index in range
            </summary>
        </member>
        <member name="M:CodeJam.DebugCode.ValidIndexPair(System.Int32,System.String,System.Int32,System.String,System.Int32)">
            <summary>
            Assertion for from-to index pair
            </summary>
        </member>
        <member name="M:CodeJam.DebugCode.ValidIndexAndCount(System.Int32,System.String,System.Int32,System.String,System.Int32)">
            <summary>
            Assertion for startIndex-count pair
            </summary>
        </member>
        <member name="M:CodeJam.DebugCode.AssertState(System.Boolean,System.String)">
            <summary>
            State assertion
            </summary>
        </member>
        <member name="M:CodeJam.DebugCode.AssertState(System.Boolean,System.String,System.Object[])">
            <summary>
            State assertion
            </summary>
        </member>
        <member name="T:CodeJam.Collections.DisjointSets">
            <summary>Disjoint sets without payload</summary>
            <remarks>
            See http://en.wikipedia.org/wiki/Disjoint-set_data_structure
            </remarks>
        </member>
        <member name="M:CodeJam.Collections.DisjointSets.#ctor">
            <summary>Creates an empty Disjoint sets</summary>
        </member>
        <member name="M:CodeJam.Collections.DisjointSets.#ctor(System.Int32)">
            <summary>Creates a Disjoint sets with the given number of elements</summary>
            <param name="count">The initial number of elements</param>
        </member>
        <member name="M:CodeJam.Collections.DisjointSets.Add(System.Int32)">
            <summary>Appends the given number of new elements</summary>
            <param name="count">The number of elements to add</param>
        </member>
        <member name="T:CodeJam.Collections.DisjointSetsBase`1">
            <summary>Disjoint sets implementation base</summary>
             <remarks>
            See http://en.wikipedia.org/wiki/Disjoint-set_data_structure
            </remarks>
        </member>
        <member name="F:CodeJam.Collections.DisjointSetsBase`1.Nodes">
            <summary>All nodes</summary>
        </member>
        <member name="M:CodeJam.Collections.DisjointSetsBase`1.#ctor">
            <summary>Creates an empty base</summary>
        </member>
        <member name="P:CodeJam.Collections.DisjointSetsBase`1.Count">
            <summary>The number of nodes</summary>
        </member>
        <member name="P:CodeJam.Collections.DisjointSetsBase`1.SetsCount">
            <summary>The number of disjoint sets</summary>
        </member>
        <member name="M:CodeJam.Collections.DisjointSetsBase`1.IndexToSetId(System.Int32)">
            <summary>Finds a set identifier for the element</summary>
            <param name="index">The element index</param>
            <returns>The identifier of the containing set</returns>
            <remarks>
            The set identifier is the index of a single element representing the set.
            The Union operation may lead to a choice of a different representative for a set.
            In this case IndexToSetId(oldSetId) may be called to get the new set id.
            </remarks>
        </member>
        <member name="M:CodeJam.Collections.DisjointSetsBase`1.Union(System.Int32,System.Int32)">
            <summary>Combines to distjoint sets into a single set</summary>
            <param name="elementOfSet1Index">Index of an element of the first set</param>
            <param name="elementOfSet2Index">Index of an element of the second set</param>
        </member>
        <member name="T:CodeJam.Collections.BasicNode">
            <summary>Node base class</summary>
        </member>
        <member name="F:CodeJam.Collections.BasicNode.ParentIndex">
            <summary>Parent node index</summary>
            <remarks>Points to the root after a path compression</remarks>
        </member>
        <member name="F:CodeJam.Collections.BasicNode.Rank">
            <summary>Estimated height of the tree (i.e. maximum length of the path from the root to a node. Path compression is not taken into account)</summary>
        </member>
        <member name="T:CodeJam.Collections.DisjointSets`1">
            <summary>
            Generic implementation of the Disjoint sets
            </summary>
             <remarks>
            See http://en.wikipedia.org/wiki/Disjoint-set_data_structure
            </remarks>
        </member>
        <member name="M:CodeJam.Collections.DisjointSets`1.#ctor">
            <summary>Creates an empty Disjoint sets</summary>
        </member>
        <member name="M:CodeJam.Collections.DisjointSets`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>Creates a Disjoint sets with the passed values</summary>
            <param name="values">The values to store</param>
        </member>
        <member name="P:CodeJam.Collections.DisjointSets`1.Item(System.Int32)">
            <summary>Gets an element by its index</summary>
            <param name="index">Elmement's index</param>
        </member>
        <member name="M:CodeJam.Collections.DisjointSets`1.Add(System.Collections.Generic.IEnumerable{`0})">
            <summary>Appends a list of values</summary>
            <param name="values">The values to append</param>
        </member>
        <member name="M:CodeJam.Collections.DisjointSets`1.Add(`0)">
            <summary>Appends a single element</summary>
            <param name="value">The value to append</param>
        </member>
        <member name="T:CodeJam.Collections.DisjointSets`1.Node">
            <summary>A sets node</summary>
        </member>
        <member name="F:CodeJam.Collections.DisjointSets`1.Node.Value">
            <summary>The node data</summary>
        </member>
        <member name="T:CodeJam.Collections.EnumerableExtensions">
            <summary>
            Extensions for <see cref="T:System.Collections.Generic.IEnumerable`1"/>
            </summary>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.Index``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Associates an index to each element of the source sequence.
            </summary>
            <param name="source">The input sequence.</param>
            <returns>
            A sequence of elements paired with their index in the sequence.
            </returns>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.Page``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Int32)">
            <summary>
            Extracts <paramref name="pageSize"/> elements from a sequence at a particular one-based page number.
            </summary>
            <typeparam name="T">The type of the elements in the source sequence.</typeparam>
            <param name="source">The sequence from which to page.</param>
            <param name="pageIndex">The one-based page number.</param>
            <param name="pageSize">The size of the page.</param>
            <returns>
            A new sequence containing elements are at the specified <paramref name="pageIndex"/> from the source sequence.
            </returns>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.Slice``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Int32)">
            <summary>
            Extracts <paramref name="count"/> elements from a sequence at a particular zero-based starting index.
            </summary>
            <remarks>
            If the starting position or count specified result in slice extending past the end of the sequence,
            it will return all elements up to that point. There is no guarantee that the resulting sequence will
            contain the number of elements requested - it may have anywhere from 0 to <paramref name="count"/>.<br/>
            This method is implemented in an optimized manner for any sequence implementing <c>IList{T}</c>.<br/>
            The result of Slice() is identical to: <c>sequence.Skip(startIndex).Take(count)</c>.
            </remarks>
            <typeparam name="T">The type of the elements in the source sequence.</typeparam>
            <param name="source">The sequence from which to extract elements.</param>
            <param name="startIndex">The zero-based index at which to begin slicing.</param>
            <param name="count">The number of items to slice out of the index.</param>
            <returns>
            A new sequence containing any elements sliced out from the source sequence.
            </returns>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.Flatten``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``0}})">
            <summary>
            Returns a flattened sequence from a graph or hierarchy of elements by using the specified children selector.
            </summary>
            <param name="source">The source hierarchy to flatten.</param>
            <param name="childrenSelector">A function used to retrieve the children of an element.</param>
            <returns>
            A flat sequence of elements produced from the elements in the source hierarchy.
            </returns>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.TakeLast``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Returns a specified number of contiguous elements from the end of a sequence.
            </summary>
            <remarks>
            This operator uses deferred execution and streams its results.
            </remarks>
            <typeparam name="T">The type of the elements of <paramref name="source"/>.</typeparam>
            <param name="source">The sequence to return the last element of.</param>
            <param name="count">The number of elements to return.</param>
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerable`1"/> that contains the specified number of elements from the end of the input sequence.
            </returns>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.Split``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Splits the input sequence into a sequence of chunks of the specified size.
            </summary>
            <param name="source">The sequence to split into chunks.</param>
            <param name="size">The size of the chunks.</param>
            <returns>
            A sequence of chunks of the specified size.
            </returns>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.MinBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Byte})">
            <summary>
            Invokes a <paramref name="selector"/> on each element of a <paramref name="source"/>
            and returns the item with minimum value.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of values to determine the minimum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>The item with minimum value in the sequence.</returns>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.MinByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Byte})">
            <summary>
            Invokes a <paramref name="selector"/> on each element of a <paramref name="source"/>
            and returns the item with minimum value.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of values to determine the minimum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>
            The item with minimum value in the sequence or <typeparamref name="TSource"/> default value if
            <paramref name="source"/> has no not null elements.
            </returns>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.MinBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Byte}})">
            <summary>
            Invokes a <paramref name="selector"/> on each element of a <paramref name="source"/>
            and returns the item with minimum value.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of values to determine the minimum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>The item with minimum value in the sequence.</returns>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.MinByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Byte}})">
            <summary>
            Invokes a <paramref name="selector"/> on each element of a <paramref name="source"/>
            and returns the item with minimum value.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of values to determine the minimum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>
            The item with minimum value in the sequence or <typeparamref name="TSource"/> default value if
            <paramref name="source"/> has no not null elements.
            </returns>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.MinBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.SByte})">
            <summary>
            Invokes a <paramref name="selector"/> on each element of a <paramref name="source"/>
            and returns the item with minimum value.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of values to determine the minimum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>The item with minimum value in the sequence.</returns>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.MinByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.SByte})">
            <summary>
            Invokes a <paramref name="selector"/> on each element of a <paramref name="source"/>
            and returns the item with minimum value.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of values to determine the minimum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>
            The item with minimum value in the sequence or <typeparamref name="TSource"/> default value if
            <paramref name="source"/> has no not null elements.
            </returns>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.MinBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.SByte}})">
            <summary>
            Invokes a <paramref name="selector"/> on each element of a <paramref name="source"/>
            and returns the item with minimum value.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of values to determine the minimum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>The item with minimum value in the sequence.</returns>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.MinByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.SByte}})">
            <summary>
            Invokes a <paramref name="selector"/> on each element of a <paramref name="source"/>
            and returns the item with minimum value.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of values to determine the minimum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>
            The item with minimum value in the sequence or <typeparamref name="TSource"/> default value if
            <paramref name="source"/> has no not null elements.
            </returns>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.MinBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int16})">
            <summary>
            Invokes a <paramref name="selector"/> on each element of a <paramref name="source"/>
            and returns the item with minimum value.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of values to determine the minimum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>The item with minimum value in the sequence.</returns>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.MinByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int16})">
            <summary>
            Invokes a <paramref name="selector"/> on each element of a <paramref name="source"/>
            and returns the item with minimum value.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of values to determine the minimum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>
            The item with minimum value in the sequence or <typeparamref name="TSource"/> default value if
            <paramref name="source"/> has no not null elements.
            </returns>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.MinBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int16}})">
            <summary>
            Invokes a <paramref name="selector"/> on each element of a <paramref name="source"/>
            and returns the item with minimum value.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of values to determine the minimum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>The item with minimum value in the sequence.</returns>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.MinByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int16}})">
            <summary>
            Invokes a <paramref name="selector"/> on each element of a <paramref name="source"/>
            and returns the item with minimum value.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of values to determine the minimum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>
            The item with minimum value in the sequence or <typeparamref name="TSource"/> default value if
            <paramref name="source"/> has no not null elements.
            </returns>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.MinBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.UInt16})">
            <summary>
            Invokes a <paramref name="selector"/> on each element of a <paramref name="source"/>
            and returns the item with minimum value.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of values to determine the minimum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>The item with minimum value in the sequence.</returns>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.MinByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.UInt16})">
            <summary>
            Invokes a <paramref name="selector"/> on each element of a <paramref name="source"/>
            and returns the item with minimum value.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of values to determine the minimum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>
            The item with minimum value in the sequence or <typeparamref name="TSource"/> default value if
            <paramref name="source"/> has no not null elements.
            </returns>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.MinBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.UInt16}})">
            <summary>
            Invokes a <paramref name="selector"/> on each element of a <paramref name="source"/>
            and returns the item with minimum value.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of values to determine the minimum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>The item with minimum value in the sequence.</returns>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.MinByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.UInt16}})">
            <summary>
            Invokes a <paramref name="selector"/> on each element of a <paramref name="source"/>
            and returns the item with minimum value.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of values to determine the minimum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>
            The item with minimum value in the sequence or <typeparamref name="TSource"/> default value if
            <paramref name="source"/> has no not null elements.
            </returns>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.MinBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
            <summary>
            Invokes a <paramref name="selector"/> on each element of a <paramref name="source"/>
            and returns the item with minimum value.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of values to determine the minimum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>The item with minimum value in the sequence.</returns>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.MinByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
            <summary>
            Invokes a <paramref name="selector"/> on each element of a <paramref name="source"/>
            and returns the item with minimum value.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of values to determine the minimum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>
            The item with minimum value in the sequence or <typeparamref name="TSource"/> default value if
            <paramref name="source"/> has no not null elements.
            </returns>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.MinBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
            <summary>
            Invokes a <paramref name="selector"/> on each element of a <paramref name="source"/>
            and returns the item with minimum value.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of values to determine the minimum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>The item with minimum value in the sequence.</returns>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.MinByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
            <summary>
            Invokes a <paramref name="selector"/> on each element of a <paramref name="source"/>
            and returns the item with minimum value.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of values to determine the minimum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>
            The item with minimum value in the sequence or <typeparamref name="TSource"/> default value if
            <paramref name="source"/> has no not null elements.
            </returns>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.MinBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.UInt32})">
            <summary>
            Invokes a <paramref name="selector"/> on each element of a <paramref name="source"/>
            and returns the item with minimum value.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of values to determine the minimum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>The item with minimum value in the sequence.</returns>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.MinByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.UInt32})">
            <summary>
            Invokes a <paramref name="selector"/> on each element of a <paramref name="source"/>
            and returns the item with minimum value.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of values to determine the minimum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>
            The item with minimum value in the sequence or <typeparamref name="TSource"/> default value if
            <paramref name="source"/> has no not null elements.
            </returns>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.MinBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.UInt32}})">
            <summary>
            Invokes a <paramref name="selector"/> on each element of a <paramref name="source"/>
            and returns the item with minimum value.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of values to determine the minimum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>The item with minimum value in the sequence.</returns>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.MinByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.UInt32}})">
            <summary>
            Invokes a <paramref name="selector"/> on each element of a <paramref name="source"/>
            and returns the item with minimum value.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of values to determine the minimum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>
            The item with minimum value in the sequence or <typeparamref name="TSource"/> default value if
            <paramref name="source"/> has no not null elements.
            </returns>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.MinBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
            <summary>
            Invokes a <paramref name="selector"/> on each element of a <paramref name="source"/>
            and returns the item with minimum value.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of values to determine the minimum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>The item with minimum value in the sequence.</returns>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.MinByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
            <summary>
            Invokes a <paramref name="selector"/> on each element of a <paramref name="source"/>
            and returns the item with minimum value.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of values to determine the minimum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>
            The item with minimum value in the sequence or <typeparamref name="TSource"/> default value if
            <paramref name="source"/> has no not null elements.
            </returns>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.MinBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
            <summary>
            Invokes a <paramref name="selector"/> on each element of a <paramref name="source"/>
            and returns the item with minimum value.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of values to determine the minimum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>The item with minimum value in the sequence.</returns>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.MinByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
            <summary>
            Invokes a <paramref name="selector"/> on each element of a <paramref name="source"/>
            and returns the item with minimum value.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of values to determine the minimum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>
            The item with minimum value in the sequence or <typeparamref name="TSource"/> default value if
            <paramref name="source"/> has no not null elements.
            </returns>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.MinBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.UInt64})">
            <summary>
            Invokes a <paramref name="selector"/> on each element of a <paramref name="source"/>
            and returns the item with minimum value.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of values to determine the minimum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>The item with minimum value in the sequence.</returns>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.MinByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.UInt64})">
            <summary>
            Invokes a <paramref name="selector"/> on each element of a <paramref name="source"/>
            and returns the item with minimum value.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of values to determine the minimum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>
            The item with minimum value in the sequence or <typeparamref name="TSource"/> default value if
            <paramref name="source"/> has no not null elements.
            </returns>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.MinBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.UInt64}})">
            <summary>
            Invokes a <paramref name="selector"/> on each element of a <paramref name="source"/>
            and returns the item with minimum value.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of values to determine the minimum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>The item with minimum value in the sequence.</returns>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.MinByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.UInt64}})">
            <summary>
            Invokes a <paramref name="selector"/> on each element of a <paramref name="source"/>
            and returns the item with minimum value.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of values to determine the minimum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>
            The item with minimum value in the sequence or <typeparamref name="TSource"/> default value if
            <paramref name="source"/> has no not null elements.
            </returns>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.MinBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
            <summary>
            Invokes a <paramref name="selector"/> on each element of a <paramref name="source"/>
            and returns the item with minimum value.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of values to determine the minimum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>The item with minimum value in the sequence.</returns>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.MinByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
            <summary>
            Invokes a <paramref name="selector"/> on each element of a <paramref name="source"/>
            and returns the item with minimum value.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of values to determine the minimum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>
            The item with minimum value in the sequence or <typeparamref name="TSource"/> default value if
            <paramref name="source"/> has no not null elements.
            </returns>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.MinBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
            <summary>
            Invokes a <paramref name="selector"/> on each element of a <paramref name="source"/>
            and returns the item with minimum value.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of values to determine the minimum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>The item with minimum value in the sequence.</returns>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.MinByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
            <summary>
            Invokes a <paramref name="selector"/> on each element of a <paramref name="source"/>
            and returns the item with minimum value.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of values to determine the minimum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>
            The item with minimum value in the sequence or <typeparamref name="TSource"/> default value if
            <paramref name="source"/> has no not null elements.
            </returns>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.MinBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
            <summary>
            Invokes a <paramref name="selector"/> on each element of a <paramref name="source"/>
            and returns the item with minimum value.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of values to determine the minimum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>The item with minimum value in the sequence.</returns>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.MinByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
            <summary>
            Invokes a <paramref name="selector"/> on each element of a <paramref name="source"/>
            and returns the item with minimum value.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of values to determine the minimum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>
            The item with minimum value in the sequence or <typeparamref name="TSource"/> default value if
            <paramref name="source"/> has no not null elements.
            </returns>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.MinBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
            <summary>
            Invokes a <paramref name="selector"/> on each element of a <paramref name="source"/>
            and returns the item with minimum value.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of values to determine the minimum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>The item with minimum value in the sequence.</returns>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.MinByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
            <summary>
            Invokes a <paramref name="selector"/> on each element of a <paramref name="source"/>
            and returns the item with minimum value.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of values to determine the minimum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>
            The item with minimum value in the sequence or <typeparamref name="TSource"/> default value if
            <paramref name="source"/> has no not null elements.
            </returns>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.MinBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
            <summary>
            Invokes a <paramref name="selector"/> on each element of a <paramref name="source"/>
            and returns the item with minimum value.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of values to determine the minimum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>The item with minimum value in the sequence.</returns>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.MinByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
            <summary>
            Invokes a <paramref name="selector"/> on each element of a <paramref name="source"/>
            and returns the item with minimum value.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of values to determine the minimum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>
            The item with minimum value in the sequence or <typeparamref name="TSource"/> default value if
            <paramref name="source"/> has no not null elements.
            </returns>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.MinBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
            <summary>
            Invokes a <paramref name="selector"/> on each element of a <paramref name="source"/>
            and returns the item with minimum value.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of values to determine the minimum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>The item with minimum value in the sequence.</returns>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.MinByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
            <summary>
            Invokes a <paramref name="selector"/> on each element of a <paramref name="source"/>
            and returns the item with minimum value.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of values to determine the minimum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>
            The item with minimum value in the sequence or <typeparamref name="TSource"/> default value if
            <paramref name="source"/> has no not null elements.
            </returns>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.MaxBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Byte})">
            <summary>
            Invokes a <paramref name="selector"/> on each element of a <paramref name="source"/>
            and returns the item with minimum value.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of values to determine the minimum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>The item with maximum value in the sequence.</returns>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.MaxByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Byte})">
            <summary>
            Invokes a <paramref name="selector"/> on each element of a <paramref name="source"/>
            and returns the item with minimum value.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of values to determine the minimum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>
            The item with maximum value in the sequence or <typeparamref name="TSource"/> default value if
            <paramref name="source"/> has no not null elements.
            </returns>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.MaxBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Byte}})">
            <summary>
            Invokes a <paramref name="selector"/> on each element of a <paramref name="source"/>
            and returns the item with minimum value.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of values to determine the minimum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>The item with maximum value in the sequence.</returns>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.MaxByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Byte}})">
            <summary>
            Invokes a <paramref name="selector"/> on each element of a <paramref name="source"/>
            and returns the item with minimum value.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of values to determine the minimum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>
            The item with maximum value in the sequence or <typeparamref name="TSource"/> default value if
            <paramref name="source"/> has no not null elements.
            </returns>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.MaxBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.SByte})">
            <summary>
            Invokes a <paramref name="selector"/> on each element of a <paramref name="source"/>
            and returns the item with minimum value.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of values to determine the minimum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>The item with maximum value in the sequence.</returns>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.MaxByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.SByte})">
            <summary>
            Invokes a <paramref name="selector"/> on each element of a <paramref name="source"/>
            and returns the item with minimum value.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of values to determine the minimum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>
            The item with maximum value in the sequence or <typeparamref name="TSource"/> default value if
            <paramref name="source"/> has no not null elements.
            </returns>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.MaxBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.SByte}})">
            <summary>
            Invokes a <paramref name="selector"/> on each element of a <paramref name="source"/>
            and returns the item with minimum value.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of values to determine the minimum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>The item with maximum value in the sequence.</returns>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.MaxByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.SByte}})">
            <summary>
            Invokes a <paramref name="selector"/> on each element of a <paramref name="source"/>
            and returns the item with minimum value.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of values to determine the minimum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>
            The item with maximum value in the sequence or <typeparamref name="TSource"/> default value if
            <paramref name="source"/> has no not null elements.
            </returns>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.MaxBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int16})">
            <summary>
            Invokes a <paramref name="selector"/> on each element of a <paramref name="source"/>
            and returns the item with minimum value.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of values to determine the minimum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>The item with maximum value in the sequence.</returns>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.MaxByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int16})">
            <summary>
            Invokes a <paramref name="selector"/> on each element of a <paramref name="source"/>
            and returns the item with minimum value.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of values to determine the minimum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>
            The item with maximum value in the sequence or <typeparamref name="TSource"/> default value if
            <paramref name="source"/> has no not null elements.
            </returns>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.MaxBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int16}})">
            <summary>
            Invokes a <paramref name="selector"/> on each element of a <paramref name="source"/>
            and returns the item with minimum value.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of values to determine the minimum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>The item with maximum value in the sequence.</returns>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.MaxByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int16}})">
            <summary>
            Invokes a <paramref name="selector"/> on each element of a <paramref name="source"/>
            and returns the item with minimum value.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of values to determine the minimum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>
            The item with maximum value in the sequence or <typeparamref name="TSource"/> default value if
            <paramref name="source"/> has no not null elements.
            </returns>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.MaxBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.UInt16})">
            <summary>
            Invokes a <paramref name="selector"/> on each element of a <paramref name="source"/>
            and returns the item with minimum value.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of values to determine the minimum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>The item with maximum value in the sequence.</returns>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.MaxByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.UInt16})">
            <summary>
            Invokes a <paramref name="selector"/> on each element of a <paramref name="source"/>
            and returns the item with minimum value.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of values to determine the minimum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>
            The item with maximum value in the sequence or <typeparamref name="TSource"/> default value if
            <paramref name="source"/> has no not null elements.
            </returns>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.MaxBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.UInt16}})">
            <summary>
            Invokes a <paramref name="selector"/> on each element of a <paramref name="source"/>
            and returns the item with minimum value.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of values to determine the minimum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>The item with maximum value in the sequence.</returns>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.MaxByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.UInt16}})">
            <summary>
            Invokes a <paramref name="selector"/> on each element of a <paramref name="source"/>
            and returns the item with minimum value.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of values to determine the minimum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>
            The item with maximum value in the sequence or <typeparamref name="TSource"/> default value if
            <paramref name="source"/> has no not null elements.
            </returns>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.MaxBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
            <summary>
            Invokes a <paramref name="selector"/> on each element of a <paramref name="source"/>
            and returns the item with minimum value.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of values to determine the minimum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>The item with maximum value in the sequence.</returns>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.MaxByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
            <summary>
            Invokes a <paramref name="selector"/> on each element of a <paramref name="source"/>
            and returns the item with minimum value.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of values to determine the minimum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>
            The item with maximum value in the sequence or <typeparamref name="TSource"/> default value if
            <paramref name="source"/> has no not null elements.
            </returns>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.MaxBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
            <summary>
            Invokes a <paramref name="selector"/> on each element of a <paramref name="source"/>
            and returns the item with minimum value.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of values to determine the minimum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>The item with maximum value in the sequence.</returns>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.MaxByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
            <summary>
            Invokes a <paramref name="selector"/> on each element of a <paramref name="source"/>
            and returns the item with minimum value.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of values to determine the minimum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>
            The item with maximum value in the sequence or <typeparamref name="TSource"/> default value if
            <paramref name="source"/> has no not null elements.
            </returns>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.MaxBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.UInt32})">
            <summary>
            Invokes a <paramref name="selector"/> on each element of a <paramref name="source"/>
            and returns the item with minimum value.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of values to determine the minimum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>The item with maximum value in the sequence.</returns>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.MaxByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.UInt32})">
            <summary>
            Invokes a <paramref name="selector"/> on each element of a <paramref name="source"/>
            and returns the item with minimum value.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of values to determine the minimum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>
            The item with maximum value in the sequence or <typeparamref name="TSource"/> default value if
            <paramref name="source"/> has no not null elements.
            </returns>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.MaxBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.UInt32}})">
            <summary>
            Invokes a <paramref name="selector"/> on each element of a <paramref name="source"/>
            and returns the item with minimum value.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of values to determine the minimum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>The item with maximum value in the sequence.</returns>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.MaxByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.UInt32}})">
            <summary>
            Invokes a <paramref name="selector"/> on each element of a <paramref name="source"/>
            and returns the item with minimum value.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of values to determine the minimum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>
            The item with maximum value in the sequence or <typeparamref name="TSource"/> default value if
            <paramref name="source"/> has no not null elements.
            </returns>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.MaxBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
            <summary>
            Invokes a <paramref name="selector"/> on each element of a <paramref name="source"/>
            and returns the item with minimum value.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of values to determine the minimum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>The item with maximum value in the sequence.</returns>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.MaxByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
            <summary>
            Invokes a <paramref name="selector"/> on each element of a <paramref name="source"/>
            and returns the item with minimum value.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of values to determine the minimum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>
            The item with maximum value in the sequence or <typeparamref name="TSource"/> default value if
            <paramref name="source"/> has no not null elements.
            </returns>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.MaxBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
            <summary>
            Invokes a <paramref name="selector"/> on each element of a <paramref name="source"/>
            and returns the item with minimum value.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of values to determine the minimum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>The item with maximum value in the sequence.</returns>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.MaxByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
            <summary>
            Invokes a <paramref name="selector"/> on each element of a <paramref name="source"/>
            and returns the item with minimum value.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of values to determine the minimum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>
            The item with maximum value in the sequence or <typeparamref name="TSource"/> default value if
            <paramref name="source"/> has no not null elements.
            </returns>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.MaxBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.UInt64})">
            <summary>
            Invokes a <paramref name="selector"/> on each element of a <paramref name="source"/>
            and returns the item with minimum value.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of values to determine the minimum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>The item with maximum value in the sequence.</returns>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.MaxByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.UInt64})">
            <summary>
            Invokes a <paramref name="selector"/> on each element of a <paramref name="source"/>
            and returns the item with minimum value.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of values to determine the minimum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>
            The item with maximum value in the sequence or <typeparamref name="TSource"/> default value if
            <paramref name="source"/> has no not null elements.
            </returns>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.MaxBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.UInt64}})">
            <summary>
            Invokes a <paramref name="selector"/> on each element of a <paramref name="source"/>
            and returns the item with minimum value.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of values to determine the minimum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>The item with maximum value in the sequence.</returns>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.MaxByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.UInt64}})">
            <summary>
            Invokes a <paramref name="selector"/> on each element of a <paramref name="source"/>
            and returns the item with minimum value.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of values to determine the minimum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>
            The item with maximum value in the sequence or <typeparamref name="TSource"/> default value if
            <paramref name="source"/> has no not null elements.
            </returns>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.MaxBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
            <summary>
            Invokes a <paramref name="selector"/> on each element of a <paramref name="source"/>
            and returns the item with minimum value.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of values to determine the minimum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>The item with maximum value in the sequence.</returns>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.MaxByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
            <summary>
            Invokes a <paramref name="selector"/> on each element of a <paramref name="source"/>
            and returns the item with minimum value.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of values to determine the minimum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>
            The item with maximum value in the sequence or <typeparamref name="TSource"/> default value if
            <paramref name="source"/> has no not null elements.
            </returns>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.MaxBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
            <summary>
            Invokes a <paramref name="selector"/> on each element of a <paramref name="source"/>
            and returns the item with minimum value.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of values to determine the minimum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>The item with maximum value in the sequence.</returns>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.MaxByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
            <summary>
            Invokes a <paramref name="selector"/> on each element of a <paramref name="source"/>
            and returns the item with minimum value.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of values to determine the minimum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>
            The item with maximum value in the sequence or <typeparamref name="TSource"/> default value if
            <paramref name="source"/> has no not null elements.
            </returns>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.MaxBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
            <summary>
            Invokes a <paramref name="selector"/> on each element of a <paramref name="source"/>
            and returns the item with minimum value.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of values to determine the minimum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>The item with maximum value in the sequence.</returns>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.MaxByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
            <summary>
            Invokes a <paramref name="selector"/> on each element of a <paramref name="source"/>
            and returns the item with minimum value.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of values to determine the minimum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>
            The item with maximum value in the sequence or <typeparamref name="TSource"/> default value if
            <paramref name="source"/> has no not null elements.
            </returns>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.MaxBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
            <summary>
            Invokes a <paramref name="selector"/> on each element of a <paramref name="source"/>
            and returns the item with minimum value.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of values to determine the minimum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>The item with maximum value in the sequence.</returns>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.MaxByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
            <summary>
            Invokes a <paramref name="selector"/> on each element of a <paramref name="source"/>
            and returns the item with minimum value.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of values to determine the minimum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>
            The item with maximum value in the sequence or <typeparamref name="TSource"/> default value if
            <paramref name="source"/> has no not null elements.
            </returns>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.MaxBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
            <summary>
            Invokes a <paramref name="selector"/> on each element of a <paramref name="source"/>
            and returns the item with minimum value.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of values to determine the minimum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>The item with maximum value in the sequence.</returns>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.MaxByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
            <summary>
            Invokes a <paramref name="selector"/> on each element of a <paramref name="source"/>
            and returns the item with minimum value.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of values to determine the minimum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>
            The item with maximum value in the sequence or <typeparamref name="TSource"/> default value if
            <paramref name="source"/> has no not null elements.
            </returns>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.MaxBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
            <summary>
            Invokes a <paramref name="selector"/> on each element of a <paramref name="source"/>
            and returns the item with minimum value.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of values to determine the minimum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>The item with maximum value in the sequence.</returns>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.MaxByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
            <summary>
            Invokes a <paramref name="selector"/> on each element of a <paramref name="source"/>
            and returns the item with minimum value.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of values to determine the minimum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>
            The item with maximum value in the sequence or <typeparamref name="TSource"/> default value if
            <paramref name="source"/> has no not null elements.
            </returns>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.TopoSort``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``0}})">
            <summary>
            Performs topological sort on <paramref name="source"/>.
            </summary>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.TopoSort``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``0}},System.Func{``0,``1})">
            <summary>
            Performs topological sort on <paramref name="source"/>.
            </summary>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.TopoSort``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``0}},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
            Performs topological sort on <paramref name="source"/>.
            </summary>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.TopoSort``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``0}},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Performs topological sort on <paramref name="source"/>.
            </summary>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.Union``1(System.Collections.Generic.IEnumerable{``0},``0[])">
            <summary>
            Produces the set union of two sequences by using the default equality comparer.
            </summary>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> whose distinct elements form the first set for the union.</param>
            <param name="elements">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> whose distinct elements form the second set for the union.</param>
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerable`1"/> that contains the elements from both input sequences, excluding duplicates.
            </returns>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.Concat``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
            Appends specified <paramref name="element"/> to end of the collection.
            </summary>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.Concat``1(System.Collections.Generic.IEnumerable{``0},``0[])">
            <summary>
            Appends specified <paramref name="elements"/> to end of the collection.
            </summary>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.Prepend``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
            Prepends specified <paramref name="element"/> to the collection start.
            </summary>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.Prepend``1(System.Collections.Generic.IEnumerable{``0},``0[])">
            <summary>
            Prepends specified <paramref name="elements"/> to the collection start.
            </summary>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.ToHashSet``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Creates a <see cref="T:System.Collections.Generic.HashSet`1"/> from an <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
            <typeparam name="T">The type of the elements of source.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to create a <see cref="T:System.Collections.Generic.HashSet`1"/> from.</param>
            <returns>
            A <see cref="T:System.Collections.Generic.HashSet`1"/> that contains elements from the input sequence.
            </returns>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.ToHashSet``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Creates a <see cref="T:System.Collections.Generic.HashSet`1"/> from an <see cref="T:System.Collections.Generic.IEnumerable`1"/> with the specified equality comparer.
            </summary>
            <typeparam name="T">The type of the elements of source.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to create a <see cref="T:System.Collections.Generic.HashSet`1"/> from.</param>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> implementation to use
            to comparing values in the set, or <c>null</c> to use tghe default implementation for the set type.</param>
            <returns>
            A <see cref="T:System.Collections.Generic.HashSet`1"/> that contains elements from the input sequence.
            </returns>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.OrderBy``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Sorts the elements of a sequence in ascending order.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of values to order.</param>
            <returns>
            An <see cref="T:System.Linq.IOrderedEnumerable`1"/> whose elements are sorted.
            </returns>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.OrderByDescending``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Sorts the elements of a sequence in descending order.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of values to order.</param>
            <returns>
            An <see cref="T:System.Linq.IOrderedEnumerable`1"/> whose elements are sorted.
            </returns>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.DistinctBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Returns a sequence with distinct elements from the input sequence based on the specified key.
            </summary>
            <param name="source">The sequence to return distinct elements from.</param>
            <param name="keySelector">A function to extract the key for each element.</param>
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerable`1"/> that contains distinct elements from the source sequence.
            </returns>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.DistinctBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
            Returns a sequence with distinct elements from the input sequence based on the specified key and key comparer.
            </summary>
            <param name="source">The sequence to return distinct elements from.</param>
            <param name="keySelector">A function to extract the key for each element.</param>
            <param name="comparer">An <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> to compare values.</param>
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerable`1"/> that contains distinct elements from the source sequence.
            </returns>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.ExceptBy``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Produces the set difference of two sequences by using the specified key to compare values.
            </summary>
            <param name="first">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> whose elements that are not also in second will be returned.</param>
            <param name="second">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> whose elements that also occur in the first sequence will cause those elements to be removed from the returned sequence.</param>
            <param name="keySelector">A function to extract the key for each element.</param>
            <returns>
            A sequence that contains the set difference of the elements of two sequences.
            </returns>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.ExceptBy``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
            Produces the set difference of two sequences by using the specified key and <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> to compare values.
            </summary>
            <param name="first">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> whose elements that are not also in second will be returned.</param>
            <param name="second">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> whose elements that also occur in the first sequence will cause those elements to be removed from the returned sequence.</param>
            <param name="keySelector">A function to extract the key for each element.</param>
            <param name="comparer">An <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> to compare values.</param>
            <returns>
            A sequence that contains the set difference of the elements of two sequences.
            </returns>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.IntersectBy``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Produces the set intersection of two sequences by using the specified key to compare values.
            </summary>
            <param name="first">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> whose distinct elements that also appear in second will be returned.</param>
            <param name="second">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> whose distinct elements that also appear in the first sequence will be returned.</param>
            <param name="keySelector">A function to extract the key for each element.</param>
            <returns>
            A sequence that contains the elements that form the set intersection of two sequences.
            </returns>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.IntersectBy``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
            Produces the set intersection of two sequences by using the specified key and <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> to compare values.
            </summary>
            <param name="first">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> whose distinct elements that also appear in second will be returned.</param>
            <param name="second">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> whose distinct elements that also appear in the first sequence will be returned.</param>
            <param name="keySelector">A function to extract the key for each element.</param>
            <param name="comparer">An <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> to compare values.</param>
            <returns>
            A sequence that contains the elements that form the set intersection of two sequences.
            </returns>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.UnionBy``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Produces the set union of two sequences by using the specified key to compare values.
            </summary>
            <param name="first">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> whose distinct elements form the first set for the union.</param>
            <param name="second">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> whose distinct elements form the second set for the union.</param>
            <param name="keySelector">A function to extract the key for each element.</param>
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerable`1"/> that contains the elements from both input sequences, excluding duplicates.
            </returns>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.UnionBy``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
            Produces the set union of two sequences by using the specified key and <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> to compare values.
            </summary>
            <param name="first">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> whose distinct elements form the first set for the union.</param>
            <param name="second">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> whose distinct elements form the second set for the union.</param>
            <param name="keySelector">A function to extract the key for each element.</param>
            <param name="comparer">An <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> to compare values.</param>
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerable`1"/> that contains the elements from both input sequences, excluding duplicates.
            </returns>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
            Returns first element, or specified <paramref name="defaultValue"/>, if sequence is empty.
            </summary>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0},``0,System.Func{``0,System.Boolean})">
            <summary>
            Returns first element, or specified <paramref name="defaultValue"/>, if sequence is empty.
            </summary>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.AsList``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Casts the specified sequence to <see cref="T:System.Collections.Generic.List`1"/> if possible, or creates a <see cref="T:System.Collections.Generic.List`1"/> from.
            </summary>
            <typeparam name="T">The type of the elements of source.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to create a <see cref="T:System.Collections.Generic.List`1"/> from.</param>
            <returns>
            A <see cref="T:System.Collections.Generic.List`1"/> that contains elements from the input sequence.
            </returns>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.AsArray``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Casts the specified sequence to array if possible, or creates an array from.
            </summary>
            <typeparam name="T">The type of the elements of source.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to create an array from.</param>
            <returns>
            An array that contains elements from the input sequence.
            </returns>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.ToStrings``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns string representations of <paramref name="source"/> items.
            </summary>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.MinBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Invokes a <paramref name="selector"/> on each element of a <paramref name="source"/>
            and returns the item with minimum value.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <typeparam name="TValue">Type of the value</typeparam>
            <param name="source">A sequence of values to determine the minimum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>The item with minimum value in the sequence.</returns>
            <exception cref="T:System.InvalidOperationException"><paramref name="source"/> has no not null elements</exception>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.MinByOrDefault``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Invokes a <paramref name="selector"/> on each element of a <paramref name="source"/>
            and returns the item with minimum value.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <typeparam name="TValue">Type of the value</typeparam>
            <param name="source">A sequence of values to determine the minimum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>
            The item with minimum value in the sequence or <typeparamref name="TSource"/> default value if
            <paramref name="source"/> has no not null elements.
            </returns>
            <exception cref="T:System.InvalidOperationException"><paramref name="source"/> has no not null elements</exception>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.MinBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
            <summary>
            Invokes a <paramref name="selector"/> on each element of a <paramref name="source"/>
            and returns the item with minimum value.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <typeparam name="TValue">Type of the value</typeparam>
            <param name="source">A sequence of values to determine the minimum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IComparer`1"/> to compare values.</param>
            <returns>The item with minimum value in the sequence.</returns>
            <exception cref="T:System.InvalidOperationException"><paramref name="source"/> has no not null elements</exception>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.MinByOrDefault``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
            <summary>
            Invokes a <paramref name="selector"/> on each element of a <paramref name="source"/>
            and returns the item with minimum value.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <typeparam name="TValue">Type of the value</typeparam>
            <param name="source">A sequence of values to determine the minimum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IComparer`1"/> to compare values.</param>
            <returns>
            The item with minimum value in the sequence or <typeparamref name="TSource"/> default value if
            <paramref name="source"/> has no not null elements.
            </returns>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.MaxBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Invokes a <paramref name="selector"/> on each element of a <paramref name="source"/>
            and returns the item with maximum value.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <typeparam name="TValue">Type of the value</typeparam>
            <param name="source">A sequence of values to determine the maximum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>The item with maximum value in the sequence.</returns>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.MaxByOrDefault``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Invokes a <paramref name="selector"/> on each element of a <paramref name="source"/>
            and returns the item with maximum value.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <typeparam name="TValue">Type of the value</typeparam>
            <param name="source">A sequence of values to determine the maximum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>
            The item with maximum value in the sequence or <typeparamref name="TSource"/> default value if
            <paramref name="source"/> has no not null elements.
            </returns>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.MaxBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
            <summary>
            Invokes a <paramref name="selector"/> on each element of a <paramref name="source"/>
            and returns the item with maximum value.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <typeparam name="TValue">Type of the value</typeparam>
            <param name="source">A sequence of values to determine the maximum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IComparer`1"/> to compare values.</param>
            <returns>The item with maximum value in the sequence.</returns>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.MaxByOrDefault``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
            <summary>
            Invokes a <paramref name="selector"/> on each element of a <paramref name="source"/>
            and returns the item with maximum value.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <typeparam name="TValue">Type of the value</typeparam>
            <param name="source">A sequence of values to determine the maximum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IComparer`1"/> to compare values.</param>
            <returns>
            The item with maximum value in the sequence or <typeparamref name="TSource"/> default value if
            <paramref name="source"/> has no not null elements.
            </returns>
        </member>
        <member name="T:CodeJam.Collections.IndexedItem`1">
            <summary>
            Represents an element associated with its index in a sequence.
            </summary>
        </member>
        <member name="P:CodeJam.Collections.IndexedItem`1.Item">
            <summary>
            Gets the value of the element.
            </summary>
            <returns>
            The value of the element.
            </returns>
        </member>
        <member name="P:CodeJam.Collections.IndexedItem`1.Index">
            <summary>
            Gets the index of the element in a sequence.
            </summary>
            <returns>
            The index of the element in a sequence.
            </returns>
        </member>
        <member name="P:CodeJam.Collections.IndexedItem`1.IsFirst">
            <summary>
            Determines if the value is first in a sequence.
            </summary>
            <returns>
            <c>true</c> if this instance is first; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:CodeJam.Collections.IndexedItem`1.IsLast">
            <summary>
            Determines if the value is last in a sequence.
            </summary>
            <returns>
            <c>true</c> if this instance is last; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:CodeJam.Collections.IndexedItem`1.#ctor(`0,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:CodeJam.Collections.IndexedItem`1"/>.
            </summary>
            <param name="item">The value of the element.</param>
            <param name="index">The index of the element in a sequence.</param>
            <param name="isFirst">A value indicating whether this instance is first.</param>
            <param name="isLast">A value indicating whether this instance is last.</param>
        </member>
        <member name="T:CodeJam.Collections.QueryableExtensions">
            <summary>
            Extensions for <see cref="T:System.Linq.IQueryable`1"/>
            </summary>
        </member>
        <member name="M:CodeJam.Collections.QueryableExtensions.OrderBy``1(System.Linq.IQueryable{``0},System.String)">
            <summary>
            Sorts the elements of a sequence in ascending order according to a key.
            </summary>
            <param name="source">A sequence of values to order.</param>
            <param name="property">The property name.</param>
            <returns>
            An <see cref="T:System.Linq.IOrderedQueryable`1"/> whose elements are sorted according to a key.
            </returns>
        </member>
        <member name="M:CodeJam.Collections.QueryableExtensions.OrderByDescending``1(System.Linq.IQueryable{``0},System.String)">
            <summary>
            Sorts the elements of a sequence in descending order according to a key.
            </summary>
            <param name="source">A sequence of values to order.</param>
            <param name="property">The property name.</param>
            <returns>
            An <see cref="T:System.Linq.IOrderedQueryable`1"/> whose elements are sorted according to a key.
            </returns>
        </member>
        <member name="M:CodeJam.Collections.QueryableExtensions.ThenBy``1(System.Linq.IOrderedQueryable{``0},System.String)">
            <summary>
            Performs a subsequent ordering of the elements in a sequence in ascending order according to a key.
            </summary>
            <param name="source">An <see cref="T:System.Linq.IOrderedEnumerable`1"/> that contains elements to sort.</param>
            <param name="property">The property name.</param>
            <returns>
            An <see cref="T:System.Linq.IOrderedQueryable`1"/> whose elements are sorted according to a key.
            </returns>
        </member>
        <member name="M:CodeJam.Collections.QueryableExtensions.ThenByDescending``1(System.Linq.IOrderedQueryable{``0},System.String)">
            <summary>
            Performs a subsequent ordering of the elements in a sequence in descending order according to a key.
            </summary>
            <param name="source">An <see cref="T:System.Linq.IOrderedEnumerable`1"/> that contains elements to sort.</param>
            <param name="property">The property name.</param>
            <returns>
            An <see cref="T:System.Linq.IOrderedQueryable`1"/> whose elements are sorted according to a key.
            </returns>
        </member>
        <member name="M:CodeJam.Collections.QueryableExtensions.Slice``1(System.Linq.IQueryable{``0},System.Int32,System.Int32)">
            <summary>
            Extracts <paramref name="count"/> elements from a sequence at a particular zero-based starting index.
            </summary>
            <remarks>
            If the starting position or count specified result in slice extending past the end of the sequence,
            it will return all elements up to that point. There is no guarantee that the resulting sequence will
            contain the number of elements requested - it may have anywhere from 0 to <paramref name="count"/>.
            </remarks>
            <typeparam name="T">The type of the elements in the source sequence.</typeparam>
            <param name="source">The sequence from which to extract elements.</param>
            <param name="startIndex">The zero-based index at which to begin slicing.</param>
            <param name="count">The number of items to slice out of the index.</param>
            <returns>
            A new sequence containing any elements sliced out from the source sequence.
            </returns>
        </member>
        <member name="M:CodeJam.Collections.QueryableExtensions.Page``1(System.Linq.IQueryable{``0},System.Int32,System.Int32)">
            <summary>
            Extracts <paramref name="pageSize"/> elements from a sequence at a particular one-based page number.
            </summary>
            <typeparam name="T">The type of the elements in the source sequence.</typeparam>
            <param name="source">The sequence from which to page.</param>
            <param name="pageIndex">The one-based page number.</param>
            <param name="pageSize">The size of the page.</param>
            <returns>
            A new sequence containing elements are at the specified <paramref name="pageIndex"/> from the source sequence.
            </returns>
        </member>
        <member name="T:CodeJam.Collections.ArrayExtensions">
            <summary>
            <see cref="T:System.Array" /> class extensions.
            </summary>
        </member>
        <member name="M:CodeJam.Collections.ArrayExtensions.EqualsTo``1(``0[],``0[],System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Returns true, if length and content of <paramref name="a"/> equals <paramref name="b"/>.
            </summary>
            <param name="a">The first array to compare.</param>
            <param name="b">The second array to compare.</param>
            <param name="comparer">Instance of <see cref="T:System.Collections.Generic.IComparer`1"/> to compare values.</param>
        </member>
        <member name="M:CodeJam.Collections.ArrayExtensions.EqualsTo``1(``0[],``0[])">
            <summary>
            Returns true, if length and content of <paramref name="a"/> equals <paramref name="b"/>.
            </summary>
            <param name="a">The first array to compare.</param>
            <param name="b">The second array to compare.</param>
        </member>
        <member name="M:CodeJam.Collections.ArrayExtensions.Any``1(``0[])">
            <summary>
            Checks if any element in array exists.
            </summary>
            <remarks>This method performs fast check instead of creating enumerator</remarks>
        </member>
        <member name="M:CodeJam.Collections.ArrayExtensions.EqualsTo(System.String[],System.String[])">
            <summary>
            Returns true, if length and content of <paramref name="a"/> equals <paramref name="b"/>.
            </summary>
            <param name="a">The first array to compare.</param>
            <param name="b">The second array to compare.</param>
        </member>
        <member name="M:CodeJam.Collections.ArrayExtensions.EqualsTo(System.Byte[],System.Byte[])">
            <summary>
            Returns true, if length and content of <paramref name="a"/> equals <paramref name="b"/>.
            </summary>
            <param name="a">The first array to compare.</param>
            <param name="b">The second array to compare.</param>
        </member>
        <member name="M:CodeJam.Collections.ArrayExtensions.EqualsTo(System.Nullable{System.Byte}[],System.Nullable{System.Byte}[])">
            <summary>
            Returns true, if length and content of <paramref name="a"/> equals <paramref name="b"/>.
            </summary>
            <param name="a">The first array to compare.</param>
            <param name="b">The second array to compare.</param>
        </member>
        <member name="M:CodeJam.Collections.ArrayExtensions.EqualsTo(System.SByte[],System.SByte[])">
            <summary>
            Returns true, if length and content of <paramref name="a"/> equals <paramref name="b"/>.
            </summary>
            <param name="a">The first array to compare.</param>
            <param name="b">The second array to compare.</param>
        </member>
        <member name="M:CodeJam.Collections.ArrayExtensions.EqualsTo(System.Nullable{System.SByte}[],System.Nullable{System.SByte}[])">
            <summary>
            Returns true, if length and content of <paramref name="a"/> equals <paramref name="b"/>.
            </summary>
            <param name="a">The first array to compare.</param>
            <param name="b">The second array to compare.</param>
        </member>
        <member name="M:CodeJam.Collections.ArrayExtensions.EqualsTo(System.Int16[],System.Int16[])">
            <summary>
            Returns true, if length and content of <paramref name="a"/> equals <paramref name="b"/>.
            </summary>
            <param name="a">The first array to compare.</param>
            <param name="b">The second array to compare.</param>
        </member>
        <member name="M:CodeJam.Collections.ArrayExtensions.EqualsTo(System.Nullable{System.Int16}[],System.Nullable{System.Int16}[])">
            <summary>
            Returns true, if length and content of <paramref name="a"/> equals <paramref name="b"/>.
            </summary>
            <param name="a">The first array to compare.</param>
            <param name="b">The second array to compare.</param>
        </member>
        <member name="M:CodeJam.Collections.ArrayExtensions.EqualsTo(System.UInt16[],System.UInt16[])">
            <summary>
            Returns true, if length and content of <paramref name="a"/> equals <paramref name="b"/>.
            </summary>
            <param name="a">The first array to compare.</param>
            <param name="b">The second array to compare.</param>
        </member>
        <member name="M:CodeJam.Collections.ArrayExtensions.EqualsTo(System.Nullable{System.UInt16}[],System.Nullable{System.UInt16}[])">
            <summary>
            Returns true, if length and content of <paramref name="a"/> equals <paramref name="b"/>.
            </summary>
            <param name="a">The first array to compare.</param>
            <param name="b">The second array to compare.</param>
        </member>
        <member name="M:CodeJam.Collections.ArrayExtensions.EqualsTo(System.Int32[],System.Int32[])">
            <summary>
            Returns true, if length and content of <paramref name="a"/> equals <paramref name="b"/>.
            </summary>
            <param name="a">The first array to compare.</param>
            <param name="b">The second array to compare.</param>
        </member>
        <member name="M:CodeJam.Collections.ArrayExtensions.EqualsTo(System.Nullable{System.Int32}[],System.Nullable{System.Int32}[])">
            <summary>
            Returns true, if length and content of <paramref name="a"/> equals <paramref name="b"/>.
            </summary>
            <param name="a">The first array to compare.</param>
            <param name="b">The second array to compare.</param>
        </member>
        <member name="M:CodeJam.Collections.ArrayExtensions.EqualsTo(System.UInt32[],System.UInt32[])">
            <summary>
            Returns true, if length and content of <paramref name="a"/> equals <paramref name="b"/>.
            </summary>
            <param name="a">The first array to compare.</param>
            <param name="b">The second array to compare.</param>
        </member>
        <member name="M:CodeJam.Collections.ArrayExtensions.EqualsTo(System.Nullable{System.UInt32}[],System.Nullable{System.UInt32}[])">
            <summary>
            Returns true, if length and content of <paramref name="a"/> equals <paramref name="b"/>.
            </summary>
            <param name="a">The first array to compare.</param>
            <param name="b">The second array to compare.</param>
        </member>
        <member name="M:CodeJam.Collections.ArrayExtensions.EqualsTo(System.Int64[],System.Int64[])">
            <summary>
            Returns true, if length and content of <paramref name="a"/> equals <paramref name="b"/>.
            </summary>
            <param name="a">The first array to compare.</param>
            <param name="b">The second array to compare.</param>
        </member>
        <member name="M:CodeJam.Collections.ArrayExtensions.EqualsTo(System.Nullable{System.Int64}[],System.Nullable{System.Int64}[])">
            <summary>
            Returns true, if length and content of <paramref name="a"/> equals <paramref name="b"/>.
            </summary>
            <param name="a">The first array to compare.</param>
            <param name="b">The second array to compare.</param>
        </member>
        <member name="M:CodeJam.Collections.ArrayExtensions.EqualsTo(System.UInt64[],System.UInt64[])">
            <summary>
            Returns true, if length and content of <paramref name="a"/> equals <paramref name="b"/>.
            </summary>
            <param name="a">The first array to compare.</param>
            <param name="b">The second array to compare.</param>
        </member>
        <member name="M:CodeJam.Collections.ArrayExtensions.EqualsTo(System.Nullable{System.UInt64}[],System.Nullable{System.UInt64}[])">
            <summary>
            Returns true, if length and content of <paramref name="a"/> equals <paramref name="b"/>.
            </summary>
            <param name="a">The first array to compare.</param>
            <param name="b">The second array to compare.</param>
        </member>
        <member name="M:CodeJam.Collections.ArrayExtensions.EqualsTo(System.Single[],System.Single[])">
            <summary>
            Returns true, if length and content of <paramref name="a"/> equals <paramref name="b"/>.
            </summary>
            <param name="a">The first array to compare.</param>
            <param name="b">The second array to compare.</param>
        </member>
        <member name="M:CodeJam.Collections.ArrayExtensions.EqualsTo(System.Nullable{System.Single}[],System.Nullable{System.Single}[])">
            <summary>
            Returns true, if length and content of <paramref name="a"/> equals <paramref name="b"/>.
            </summary>
            <param name="a">The first array to compare.</param>
            <param name="b">The second array to compare.</param>
        </member>
        <member name="M:CodeJam.Collections.ArrayExtensions.EqualsTo(System.Double[],System.Double[])">
            <summary>
            Returns true, if length and content of <paramref name="a"/> equals <paramref name="b"/>.
            </summary>
            <param name="a">The first array to compare.</param>
            <param name="b">The second array to compare.</param>
        </member>
        <member name="M:CodeJam.Collections.ArrayExtensions.EqualsTo(System.Nullable{System.Double}[],System.Nullable{System.Double}[])">
            <summary>
            Returns true, if length and content of <paramref name="a"/> equals <paramref name="b"/>.
            </summary>
            <param name="a">The first array to compare.</param>
            <param name="b">The second array to compare.</param>
        </member>
        <member name="M:CodeJam.Collections.ArrayExtensions.EqualsTo(System.Decimal[],System.Decimal[])">
            <summary>
            Returns true, if length and content of <paramref name="a"/> equals <paramref name="b"/>.
            </summary>
            <param name="a">The first array to compare.</param>
            <param name="b">The second array to compare.</param>
        </member>
        <member name="M:CodeJam.Collections.ArrayExtensions.EqualsTo(System.Nullable{System.Decimal}[],System.Nullable{System.Decimal}[])">
            <summary>
            Returns true, if length and content of <paramref name="a"/> equals <paramref name="b"/>.
            </summary>
            <param name="a">The first array to compare.</param>
            <param name="b">The second array to compare.</param>
        </member>
        <member name="M:CodeJam.Collections.ArrayExtensions.EqualsTo(System.TimeSpan[],System.TimeSpan[])">
            <summary>
            Returns true, if length and content of <paramref name="a"/> equals <paramref name="b"/>.
            </summary>
            <param name="a">The first array to compare.</param>
            <param name="b">The second array to compare.</param>
        </member>
        <member name="M:CodeJam.Collections.ArrayExtensions.EqualsTo(System.Nullable{System.TimeSpan}[],System.Nullable{System.TimeSpan}[])">
            <summary>
            Returns true, if length and content of <paramref name="a"/> equals <paramref name="b"/>.
            </summary>
            <param name="a">The first array to compare.</param>
            <param name="b">The second array to compare.</param>
        </member>
        <member name="M:CodeJam.Collections.ArrayExtensions.EqualsTo(System.DateTime[],System.DateTime[])">
            <summary>
            Returns true, if length and content of <paramref name="a"/> equals <paramref name="b"/>.
            </summary>
            <param name="a">The first array to compare.</param>
            <param name="b">The second array to compare.</param>
        </member>
        <member name="M:CodeJam.Collections.ArrayExtensions.EqualsTo(System.Nullable{System.DateTime}[],System.Nullable{System.DateTime}[])">
            <summary>
            Returns true, if length and content of <paramref name="a"/> equals <paramref name="b"/>.
            </summary>
            <param name="a">The first array to compare.</param>
            <param name="b">The second array to compare.</param>
        </member>
        <member name="M:CodeJam.Collections.ArrayExtensions.EqualsTo(System.DateTimeOffset[],System.DateTimeOffset[])">
            <summary>
            Returns true, if length and content of <paramref name="a"/> equals <paramref name="b"/>.
            </summary>
            <param name="a">The first array to compare.</param>
            <param name="b">The second array to compare.</param>
        </member>
        <member name="M:CodeJam.Collections.ArrayExtensions.EqualsTo(System.Nullable{System.DateTimeOffset}[],System.Nullable{System.DateTimeOffset}[])">
            <summary>
            Returns true, if length and content of <paramref name="a"/> equals <paramref name="b"/>.
            </summary>
            <param name="a">The first array to compare.</param>
            <param name="b">The second array to compare.</param>
        </member>
        <member name="M:CodeJam.Collections.ArrayExtensions.AsReadOnly``1(``0[])">
            <summary>Returns a read-only wrapper for the specified array.</summary>
            <returns>A read-only <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> wrapper for the specified array.</returns>
            <param name="array">The one-dimensional, zero-based array to wrap in a read-only <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />  wrapper. </param>
            <typeparam name="T">The type of the elements of the array.</typeparam>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="array" /> is null.</exception>
        </member>
        <member name="M:CodeJam.Collections.ArrayExtensions.BinarySearch``1(``0[],``0)">
            <summary>Searches an entire one-dimensional sorted <see cref="T:System.Array" /> for a specific element, using the <see cref="T:System.IComparable`1" /> generic interface implemented by each element of the <see cref="T:System.Array" /> and by the specified object.</summary>
            <returns>The index of the specified <paramref name="value" /> in the specified <paramref name="array" />, if <paramref name="value" /> is found. If <paramref name="value" /> is not found and <paramref name="value" /> is less than one or more elements in <paramref name="array" />, a negative number which is the bitwise complement of the index of the first element that is larger than <paramref name="value" />. If <paramref name="value" /> is not found and <paramref name="value" /> is greater than any of the elements in <paramref name="array" />, a negative number which is the bitwise complement of (the index of the last element plus 1).</returns>
            <param name="array">The sorted one-dimensional, zero-based <see cref="T:System.Array" /> to search. </param>
            <param name="value">The object to search for.</param>
            <typeparam name="T">The type of the elements of the array.</typeparam>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="array" /> is null.</exception>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="value" /> does not implement the <see cref="T:System.IComparable`1" /> generic interface, and the search encounters an element that does not implement the <see cref="T:System.IComparable`1" /> generic interface.</exception>
        </member>
        <member name="M:CodeJam.Collections.ArrayExtensions.BinarySearch``1(``0[],``0,System.Collections.Generic.IComparer{``0})">
            <summary>Searches an entire one-dimensional sorted <see cref="T:System.Array" /> for a value using the specified <see cref="T:System.Collections.Generic.IComparer`1" /> generic interface.</summary>
            <returns>The index of the specified <paramref name="value" /> in the specified <paramref name="array" />, if <paramref name="value" /> is found. If <paramref name="value" /> is not found and <paramref name="value" /> is less than one or more elements in <paramref name="array" />, a negative number which is the bitwise complement of the index of the first element that is larger than <paramref name="value" />. If <paramref name="value" /> is not found and <paramref name="value" /> is greater than any of the elements in <paramref name="array" />, a negative number which is the bitwise complement of (the index of the last element plus 1).</returns>
            <param name="array">The sorted one-dimensional, zero-based <see cref="T:System.Array" /> to search.  </param>
            <param name="value">The object to search for.</param>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IComparer`1" /> implementation to use when comparing elements.-or- null to use the <see cref="T:System.IComparable`1" /> implementation of each element.</param>
            <typeparam name="T">The type of the elements of the array.</typeparam>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="array" /> is null.</exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="comparer" /> is null, and <paramref name="value" /> is of a type that is not compatible with the elements of <paramref name="array" />.</exception>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="comparer" /> is null, <paramref name="value" /> does not implement the <see cref="T:System.IComparable`1" /> generic interface, and the search encounters an element that does not implement the <see cref="T:System.IComparable`1" /> generic interface.</exception>
        </member>
        <member name="M:CodeJam.Collections.ArrayExtensions.BinarySearch``1(``0[],System.Int32,System.Int32,``0)">
            <summary>Searches a range of elements in a one-dimensional sorted <see cref="T:System.Array" /> for a value, using the <see cref="T:System.IComparable`1" /> generic interface implemented by each element of the <see cref="T:System.Array" /> and by the specified value.</summary>
            <returns>The index of the specified <paramref name="value" /> in the specified <paramref name="array" />, if <paramref name="value" /> is found. If <paramref name="value" /> is not found and <paramref name="value" /> is less than one or more elements in <paramref name="array" />, a negative number which is the bitwise complement of the index of the first element that is larger than <paramref name="value" />. If <paramref name="value" /> is not found and <paramref name="value" /> is greater than any of the elements in <paramref name="array" />, a negative number which is the bitwise complement of (the index of the last element plus 1).</returns>
            <param name="array">The sorted one-dimensional, zero-based <see cref="T:System.Array" /> to search. </param>
            <param name="index">The starting index of the range to search.</param>
            <param name="length">The length of the range to search.</param>
            <param name="value">The object to search for.</param>
            <typeparam name="T">The type of the elements of the array.</typeparam>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="array" /> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index" /> is less than the lower bound of <paramref name="array" />.-or-<paramref name="length" /> is less than zero.</exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="index" /> and <paramref name="length" /> do not specify a valid range in <paramref name="array" />.-or-<paramref name="value" /> is of a type that is not compatible with the elements of <paramref name="array" />.</exception>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="value" /> does not implement the <see cref="T:System.IComparable`1" /> generic interface, and the search encounters an element that does not implement the <see cref="T:System.IComparable`1" /> generic interface.</exception>
        </member>
        <member name="M:CodeJam.Collections.ArrayExtensions.BinarySearch``1(``0[],System.Int32,System.Int32,``0,System.Collections.Generic.IComparer{``0})">
            <summary>Searches a range of elements in a one-dimensional sorted <see cref="T:System.Array" /> for a value, using the specified <see cref="T:System.Collections.Generic.IComparer`1" /> generic interface.</summary>
            <returns>The index of the specified <paramref name="value" /> in the specified <paramref name="array" />, if <paramref name="value" /> is found. If <paramref name="value" /> is not found and <paramref name="value" /> is less than one or more elements in <paramref name="array" />, a negative number which is the bitwise complement of the index of the first element that is larger than <paramref name="value" />. If <paramref name="value" /> is not found and <paramref name="value" /> is greater than any of the elements in <paramref name="array" />, a negative number which is the bitwise complement of (the index of the last element plus 1).</returns>
            <param name="array">The sorted one-dimensional, zero-based <see cref="T:System.Array" /> to search. </param>
            <param name="index">The starting index of the range to search.</param>
            <param name="length">The length of the range to search.</param>
            <param name="value">The object to search for.</param>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IComparer`1" /> implementation to use when comparing elements.-or- null to use the <see cref="T:System.IComparable`1" /> implementation of each element.</param>
            <typeparam name="T">The type of the elements of the array.</typeparam>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="array" /> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index" /> is less than the lower bound of <paramref name="array" />.-or-<paramref name="length" /> is less than zero.</exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="index" /> and <paramref name="length" /> do not specify a valid range in <paramref name="array" />.-or-<paramref name="comparer" /> is null, and <paramref name="value" /> is of a type that is not compatible with the elements of <paramref name="array" />.</exception>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="comparer" /> is null, <paramref name="value" /> does not implement the <see cref="T:System.IComparable`1" /> generic interface, and the search encounters an element that does not implement the <see cref="T:System.IComparable`1" /> generic interface.</exception>
        </member>
        <member name="M:CodeJam.Collections.ArrayExtensions.Clear(System.Array,System.Int32,System.Int32)">
            <summary>Sets a range of elements in the <see cref="T:System.Array" /> to zero, to false, or to null, depending on the element type.</summary>
            <param name="array">The <see cref="T:System.Array" /> whose elements need to be cleared.</param>
            <param name="index">The starting index of the range of elements to clear.</param>
            <param name="length">The number of elements to clear.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="array" /> is null.</exception>
            <exception cref="T:System.IndexOutOfRangeException">
            <paramref name="index" /> is less than the lower bound of <paramref name="array" />.-or-<paramref name="length" /> is less than zero.-or-The sum of <paramref name="index" /> and <paramref name="length" /> is greater than the size of the <see cref="T:System.Array" />.</exception>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:CodeJam.Collections.ArrayExtensions.Clear(System.Array)">
            <summary>Sets all elements in an <see cref="T:System.Array" /> to the default value of each element type.</summary>
            <param name="array">The <see cref="T:System.Array" /> whose elements need to be cleared.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="array" /> is null.</exception>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:CodeJam.Collections.ArrayExtensions.ConstrainedCopy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)">
            <summary>Copies a range of elements from an <see cref="T:System.Array" /> starting at the specified source index and pastes them to another <see cref="T:System.Array" /> starting at the specified destination index.  Guarantees that all changes are undone if the copy does not succeed completely.</summary>
            <param name="sourceArray">The <see cref="T:System.Array" /> that contains the data to copy.</param>
            <param name="sourceIndex">A 32-bit integer that represents the index in the <paramref name="sourceArray" /> at which copying begins.</param>
            <param name="destinationArray">The <see cref="T:System.Array" /> that receives the data.</param>
            <param name="destinationIndex">A 32-bit integer that represents the index in the <paramref name="destinationArray" /> at which storing begins.</param>
            <param name="length">A 32-bit integer that represents the number of elements to copy.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="sourceArray" /> is null.-or-<paramref name="destinationArray" /> is null.</exception>
            <exception cref="T:System.RankException">
            <paramref name="sourceArray" /> and <paramref name="destinationArray" /> have different ranks.</exception>
            <exception cref="T:System.ArrayTypeMismatchException">The <paramref name="sourceArray" /> type is neither the same as nor derived from the <paramref name="destinationArray" /> type.</exception>
            <exception cref="T:System.InvalidCastException">At least one element in <paramref name="sourceArray" /> cannot be cast to the type of <paramref name="destinationArray" />.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="sourceIndex" /> is less than the lower bound of the first dimension of <paramref name="sourceArray" />.-or-<paramref name="destinationIndex" /> is less than the lower bound of the first dimension of <paramref name="destinationArray" />.-or-<paramref name="length" /> is less than zero.</exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="length" /> is greater than the number of elements from <paramref name="sourceIndex" /> to the end of <paramref name="sourceArray" />.-or-<paramref name="length" /> is greater than the number of elements from <paramref name="destinationIndex" /> to the end of <paramref name="destinationArray" />.</exception>
        </member>
        <member name="M:CodeJam.Collections.ArrayExtensions.ConvertAll``2(``0[],System.Converter{``0,``1})">
            <summary>Converts an array of one type to an array of another type.</summary>
            <returns>An array of the target type containing the converted elements from the source array.</returns>
            <param name="array">The one-dimensional, zero-based <see cref="T:System.Array" /> to convert to a target type.</param>
            <param name="converter">A <see cref="T:System.Converter`2" /> that converts each element from one type to another type.</param>
            <typeparam name="TInput">The type of the elements of the source array.</typeparam>
            <typeparam name="TOutput">The type of the elements of the target array.</typeparam>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="array" /> is null.-or-<paramref name="converter" /> is null.</exception>
        </member>
        <member name="M:CodeJam.Collections.ArrayExtensions.Copy(System.Array,System.Array,System.Int32)">
            <summary>Copies a range of elements from an <see cref="T:System.Array" /> starting at the first element and pastes them into another <see cref="T:System.Array" /> starting at the first element. The length is specified as a 32-bit integer.</summary>
            <param name="sourceArray">The <see cref="T:System.Array" /> that contains the data to copy.</param>
            <param name="destinationArray">The <see cref="T:System.Array" /> that receives the data.</param>
            <param name="length">A 32-bit integer that represents the number of elements to copy.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="sourceArray" /> is null.-or-<paramref name="destinationArray" /> is null.</exception>
            <exception cref="T:System.RankException">
            <paramref name="sourceArray" /> and <paramref name="destinationArray" /> have different ranks.</exception>
            <exception cref="T:System.ArrayTypeMismatchException">
            <paramref name="sourceArray" /> and <paramref name="destinationArray" /> are of incompatible types.</exception>
            <exception cref="T:System.InvalidCastException">At least one element in <paramref name="sourceArray" /> cannot be cast to the type of <paramref name="destinationArray" />.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="length" /> is less than zero.</exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="length" /> is greater than the number of elements in <paramref name="sourceArray" />.-or-<paramref name="length" /> is greater than the number of elements in <paramref name="destinationArray" />.</exception>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:CodeJam.Collections.ArrayExtensions.Copy(System.Array,System.Array,System.Int64)">
            <summary>Copies a range of elements from an <see cref="T:System.Array" /> starting at the first element and pastes them into another <see cref="T:System.Array" /> starting at the first element. The length is specified as a 64-bit integer.</summary>
            <param name="sourceArray">The <see cref="T:System.Array" /> that contains the data to copy.</param>
            <param name="destinationArray">The <see cref="T:System.Array" /> that receives the data.</param>
            <param name="length">A 64-bit integer that represents the number of elements to copy. The integer must be between zero and <see cref="F:System.Int32.MaxValue" />, inclusive.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="sourceArray" /> is null.-or-<paramref name="destinationArray" /> is null.</exception>
            <exception cref="T:System.RankException">
            <paramref name="sourceArray" /> and <paramref name="destinationArray" /> have different ranks.</exception>
            <exception cref="T:System.ArrayTypeMismatchException">
            <paramref name="sourceArray" /> and <paramref name="destinationArray" /> are of incompatible types.</exception>
            <exception cref="T:System.InvalidCastException">At least one element in <paramref name="sourceArray" /> cannot be cast to the type of <paramref name="destinationArray" />.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="length" /> is less than 0 or greater than <see cref="F:System.Int32.MaxValue" />.</exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="length" /> is greater than the number of elements in <paramref name="sourceArray" />.-or-<paramref name="length" /> is greater than the number of elements in <paramref name="destinationArray" />.</exception>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:CodeJam.Collections.ArrayExtensions.Copy(System.Array,System.Int64,System.Array,System.Int64,System.Int64)">
            <summary>Copies a range of elements from an <see cref="T:System.Array" /> starting at the specified source index and pastes them to another <see cref="T:System.Array" /> starting at the specified destination index. The length and the indexes are specified as 32-bit integers.</summary>
            <param name="sourceArray">The <see cref="T:System.Array" /> that contains the data to copy.</param>
            <param name="sourceIndex">A 32-bit integer that represents the index in the <paramref name="sourceArray" /> at which copying begins.</param>
            <param name="destinationArray">The <see cref="T:System.Array" /> that receives the data.</param>
            <param name="destinationIndex">A 32-bit integer that represents the index in the <paramref name="destinationArray" /> at which storing begins.</param>
            <param name="length">A 32-bit integer that represents the number of elements to copy.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="sourceArray" /> is null.-or-<paramref name="destinationArray" /> is null.</exception>
            <exception cref="T:System.RankException">
            <paramref name="sourceArray" /> and <paramref name="destinationArray" /> have different ranks.</exception>
            <exception cref="T:System.ArrayTypeMismatchException">
            <paramref name="sourceArray" /> and <paramref name="destinationArray" /> are of incompatible types.</exception>
            <exception cref="T:System.InvalidCastException">At least one element in <paramref name="sourceArray" /> cannot be cast to the type of <paramref name="destinationArray" />.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="sourceIndex" /> is less than the lower bound of the first dimension of <paramref name="sourceArray" />.-or-<paramref name="destinationIndex" /> is less than the lower bound of the first dimension of <paramref name="destinationArray" />.-or-<paramref name="length" /> is less than zero.</exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="length" /> is greater than the number of elements from <paramref name="sourceIndex" /> to the end of <paramref name="sourceArray" />.-or-<paramref name="length" /> is greater than the number of elements from <paramref name="destinationIndex" /> to the end of <paramref name="destinationArray" />.</exception>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:CodeJam.Collections.ArrayExtensions.Copy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)">
            <summary>Copies a range of elements from an <see cref="T:System.Array" /> starting at the specified source index and pastes them to another <see cref="T:System.Array" /> starting at the specified destination index. The length and the indexes are specified as 64-bit integers.</summary>
            <param name="sourceArray">The <see cref="T:System.Array" /> that contains the data to copy.</param>
            <param name="sourceIndex">A 64-bit integer that represents the index in the <paramref name="sourceArray" /> at which copying begins.</param>
            <param name="destinationArray">The <see cref="T:System.Array" /> that receives the data.</param>
            <param name="destinationIndex">A 64-bit integer that represents the index in the <paramref name="destinationArray" /> at which storing begins.</param>
            <param name="length">A 64-bit integer that represents the number of elements to copy. The integer must be between zero and <see cref="F:System.Int32.MaxValue" />, inclusive.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="sourceArray" /> is null.-or-<paramref name="destinationArray" /> is null.</exception>
            <exception cref="T:System.RankException">
            <paramref name="sourceArray" /> and <paramref name="destinationArray" /> have different ranks.</exception>
            <exception cref="T:System.ArrayTypeMismatchException">
            <paramref name="sourceArray" /> and <paramref name="destinationArray" /> are of incompatible types.</exception>
            <exception cref="T:System.InvalidCastException">At least one element in <paramref name="sourceArray" /> cannot be cast to the type of <paramref name="destinationArray" />.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="sourceIndex" /> is outside the range of valid indexes for the <paramref name="sourceArray" />.-or-<paramref name="destinationIndex" /> is outside the range of valid indexes for the <paramref name="destinationArray" />.-or-<paramref name="length" /> is less than 0 or greater than <see cref="F:System.Int32.MaxValue" />.</exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="length" /> is greater than the number of elements from <paramref name="sourceIndex" /> to the end of <paramref name="sourceArray" />.-or-<paramref name="length" /> is greater than the number of elements from <paramref name="destinationIndex" /> to the end of <paramref name="destinationArray" />.</exception>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:CodeJam.Collections.ArrayExtensions.Exists``1(``0[],System.Predicate{``0})">
            <summary>Determines whether the specified array contains elements that match the conditions defined by the specified predicate.</summary>
            <returns>true if <paramref name="array" /> contains one or more elements that match the conditions defined by the specified predicate; otherwise, false.</returns>
            <param name="array">The one-dimensional, zero-based <see cref="T:System.Array" /> to search.</param>
            <param name="match">The <see cref="T:System.Predicate`1" /> that defines the conditions of the elements to search for.</param>
            <typeparam name="T">The type of the elements of the array.</typeparam>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="array" /> is null.-or-<paramref name="match" /> is null.</exception>
        </member>
        <member name="M:CodeJam.Collections.ArrayExtensions.Find``1(``0[],System.Predicate{``0})">
            <summary>
            Searches for an element that matches the conditions defined by the specified predicate, and returns the
            first occurrence within the entire <see cref="T:System.Array" />.
            </summary>
            <returns>
            The first element that matches the conditions defined by the specified predicate, if found; otherwise,
            the default value for type <typeparamref name="T" />.
            </returns>
            <param name="array">The one-dimensional, zero-based <see cref="T:System.Array" /> to search.</param>
            <param name="match">The <see cref="T:System.Predicate`1" /> that defines the conditions of the element to search for.</param>
            <typeparam name="T">The type of the elements of the array.</typeparam>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="array" /> is null.-or-<paramref name="match" /> is null.</exception>
        </member>
        <member name="M:CodeJam.Collections.ArrayExtensions.FindAll``1(``0[],System.Predicate{``0})">
            <summary>Retrieves all the elements that match the conditions defined by the specified predicate.</summary>
            <returns>An <see cref="T:System.Array" /> containing all the elements that match the conditions defined by the specified predicate, if found; otherwise, an empty <see cref="T:System.Array" />.</returns>
            <param name="array">The one-dimensional, zero-based <see cref="T:System.Array" /> to search.</param>
            <param name="match">The <see cref="T:System.Predicate`1" /> that defines the conditions of the elements to search for.</param>
            <typeparam name="T">The type of the elements of the array.</typeparam>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="array" /> is null.-or-<paramref name="match" /> is null.</exception>
        </member>
        <member name="M:CodeJam.Collections.ArrayExtensions.FindIndex``1(``0[],System.Predicate{``0})">
            <summary>Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the entire <see cref="T:System.Array" />.</summary>
            <returns>The zero-based index of the first occurrence of an element that matches the conditions defined by <paramref name="match" />, if found; otherwise, –1.</returns>
            <param name="array">The one-dimensional, zero-based <see cref="T:System.Array" /> to search.</param>
            <param name="match">The <see cref="T:System.Predicate`1" /> that defines the conditions of the element to search for.</param>
            <typeparam name="T">The type of the elements of the array.</typeparam>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="array" /> is null.-or-<paramref name="match" /> is null.</exception>
        </member>
        <member name="M:CodeJam.Collections.ArrayExtensions.FindIndex``1(``0[],System.Int32,System.Predicate{``0})">
            <summary>Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the range of elements in the <see cref="T:System.Array" /> that extends from the specified index to the last element.</summary>
            <returns>The zero-based index of the first occurrence of an element that matches the conditions defined by <paramref name="match" />, if found; otherwise, –1.</returns>
            <param name="array">The one-dimensional, zero-based <see cref="T:System.Array" /> to search.</param>
            <param name="startIndex">The zero-based starting index of the search.</param>
            <param name="match">The <see cref="T:System.Predicate`1" /> that defines the conditions of the element to search for.</param>
            <typeparam name="T">The type of the elements of the array.</typeparam>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="array" /> is null.-or-<paramref name="match" /> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="startIndex" /> is outside the range of valid indexes for <paramref name="array" />.</exception>
        </member>
        <member name="M:CodeJam.Collections.ArrayExtensions.FindIndex``1(``0[],System.Int32,System.Int32,System.Predicate{``0})">
            <summary>Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the range of elements in the <see cref="T:System.Array" /> that starts at the specified index and contains the specified number of elements.</summary>
            <returns>The zero-based index of the first occurrence of an element that matches the conditions defined by <paramref name="match" />, if found; otherwise, –1.</returns>
            <param name="array">The one-dimensional, zero-based <see cref="T:System.Array" /> to search.</param>
            <param name="startIndex">The zero-based starting index of the search.</param>
            <param name="count">The number of elements in the section to search.</param>
            <param name="match">The <see cref="T:System.Predicate`1" /> that defines the conditions of the element to search for.</param>
            <typeparam name="T">The type of the elements of the array.</typeparam>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="array" /> is null.-or-<paramref name="match" /> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="startIndex" /> is outside the range of valid indexes for <paramref name="array" />.-or-<paramref name="count" /> is less than zero.-or-<paramref name="startIndex" /> and <paramref name="count" /> do not specify a valid section in <paramref name="array" />.</exception>
        </member>
        <member name="M:CodeJam.Collections.ArrayExtensions.FindLast``1(``0[],System.Predicate{``0})">
            <summary>
            Searches for an element that matches the conditions defined by the specified predicate, and returns the last
            occurrence within the entire <see cref="T:System.Array" />.
            </summary>
            <returns>
            The last element that matches the conditions defined by the specified predicate, if found; otherwise, the default
            value for type <typeparamref name="T"/>.</returns>
            <param name="array">The one-dimensional, zero-based <see cref="T:System.Array" /> to search.</param>
            <param name="match">The <see cref="T:System.Predicate`1" /> that defines the conditions of the element to search for.</param>
            <typeparam name="T">The type of the elements of the array.</typeparam>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="array" /> is null.-or-<paramref name="match" /> is null.</exception>
        </member>
        <member name="M:CodeJam.Collections.ArrayExtensions.FindLastIndex``1(``0[],System.Predicate{``0})">
            <summary>Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the entire <see cref="T:System.Array" />.</summary>
            <returns>The zero-based index of the last occurrence of an element that matches the conditions defined by <paramref name="match" />, if found; otherwise, –1.</returns>
            <param name="array">The one-dimensional, zero-based <see cref="T:System.Array" /> to search.</param>
            <param name="match">The <see cref="T:System.Predicate`1" /> that defines the conditions of the element to search for.</param>
            <typeparam name="T">The type of the elements of the array.</typeparam>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="array" /> is null.-or-<paramref name="match" /> is null.</exception>
        </member>
        <member name="M:CodeJam.Collections.ArrayExtensions.FindLastIndex``1(``0[],System.Int32,System.Predicate{``0})">
            <summary>Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the range of elements in the <see cref="T:System.Array" /> that extends from the first element to the specified index.</summary>
            <returns>The zero-based index of the last occurrence of an element that matches the conditions defined by <paramref name="match" />, if found; otherwise, –1.</returns>
            <param name="array">The one-dimensional, zero-based <see cref="T:System.Array" /> to search.</param>
            <param name="startIndex">The zero-based starting index of the backward search.</param>
            <param name="match">The <see cref="T:System.Predicate`1" /> that defines the conditions of the element to search for.</param>
            <typeparam name="T">The type of the elements of the array.</typeparam>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="array" /> is null.-or-<paramref name="match" /> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="startIndex" /> is outside the range of valid indexes for <paramref name="array" />.</exception>
        </member>
        <member name="M:CodeJam.Collections.ArrayExtensions.FindLastIndex``1(``0[],System.Int32,System.Int32,System.Predicate{``0})">
            <summary>Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the range of elements in the <see cref="T:System.Array" /> that contains the specified number of elements and ends at the specified index.</summary>
            <returns>The zero-based index of the last occurrence of an element that matches the conditions defined by <paramref name="match" />, if found; otherwise, –1.</returns>
            <param name="array">The one-dimensional, zero-based <see cref="T:System.Array" /> to search.</param>
            <param name="startIndex">The zero-based starting index of the backward search.</param>
            <param name="count">The number of elements in the section to search.</param>
            <param name="match">The <see cref="T:System.Predicate`1" /> that defines the conditions of the element to search for.</param>
            <typeparam name="T">The type of the elements of the array.</typeparam>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="array" /> is null.-or-<paramref name="match" /> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="startIndex" /> is outside the range of valid indexes for <paramref name="array" />.-or-<paramref name="count" /> is less than zero.-or-<paramref name="startIndex" /> and <paramref name="count" /> do not specify a valid section in <paramref name="array" />.</exception>
        </member>
        <member name="M:CodeJam.Collections.ArrayExtensions.ForEach``1(``0[],System.Action{``0})">
            <summary>Performs the specified action on each element of the specified array.</summary>
            <param name="array">The one-dimensional, zero-based <see cref="T:System.Array" /> on whose elements the action is to be performed.</param>
            <param name="action">The <see cref="T:System.Action`1" /> to perform on each element of <paramref name="array" />.</param>
            <typeparam name="T">The type of the elements of the array.</typeparam>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="array" /> is null.-or-<paramref name="action" /> is null.</exception>
        </member>
        <member name="M:CodeJam.Collections.ArrayExtensions.IndexOf``1(``0[],``0)">
            <summary>Searches for the specified object and returns the index of the first occurrence within the entire <see cref="T:System.Array" />.</summary>
            <returns>The zero-based index of the first occurrence of <paramref name="value" /> within the entire <paramref name="array" />, if found; otherwise, –1.</returns>
            <param name="array">The one-dimensional, zero-based <see cref="T:System.Array" /> to search.</param>
            <param name="value">The object to locate in <paramref name="array" />.</param>
            <typeparam name="T">The type of the elements of the array.</typeparam>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="array" /> is null.</exception>
        </member>
        <member name="M:CodeJam.Collections.ArrayExtensions.IndexOf``1(``0[],``0,System.Int32)">
            <summary>Searches for the specified object and returns the index of the first occurrence within the range of elements in the <see cref="T:System.Array" /> that extends from the specified index to the last element.</summary>
            <returns>The zero-based index of the first occurrence of <paramref name="value" /> within the range of elements in <paramref name="array" /> that extends from <paramref name="startIndex" /> to the last element, if found; otherwise, –1.</returns>
            <param name="array">The one-dimensional, zero-based <see cref="T:System.Array" /> to search.</param>
            <param name="value">The object to locate in <paramref name="array" />.</param>
            <param name="startIndex">The zero-based starting index of the search. 0 (zero) is valid in an empty array.</param>
            <typeparam name="T">The type of the elements of the array.</typeparam>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="array" /> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="startIndex" /> is outside the range of valid indexes for <paramref name="array" />.</exception>
        </member>
        <member name="M:CodeJam.Collections.ArrayExtensions.IndexOf``1(``0[],``0,System.Int32,System.Int32)">
            <summary>Searches for the specified object and returns the index of the first occurrence within the range of elements in the <see cref="T:System.Array" /> that starts at the specified index and contains the specified number of elements.</summary>
            <returns>The zero-based index of the first occurrence of <paramref name="value" /> within the range of elements in <paramref name="array" /> that starts at <paramref name="startIndex" /> and contains the number of elements specified in <paramref name="count" />, if found; otherwise, –1.</returns>
            <param name="array">The one-dimensional, zero-based <see cref="T:System.Array" /> to search.</param>
            <param name="value">The object to locate in <paramref name="array" />.</param>
            <param name="startIndex">The zero-based starting index of the search. 0 (zero) is valid in an empty array.</param>
            <param name="count">The number of elements in the section to search.</param>
            <typeparam name="T">The type of the elements of the array.</typeparam>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="array" /> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="startIndex" /> is outside the range of valid indexes for <paramref name="array" />.-or-<paramref name="count" /> is less than zero.-or-<paramref name="startIndex" /> and <paramref name="count" /> do not specify a valid section in <paramref name="array" />.</exception>
        </member>
        <member name="M:CodeJam.Collections.ArrayExtensions.LastIndexOf``1(``0[],``0)">
            <summary>Searches for the specified object and returns the index of the last occurrence within the entire <see cref="T:System.Array" />.</summary>
            <returns>The zero-based index of the last occurrence of <paramref name="value" /> within the entire <paramref name="array" />, if found; otherwise, –1.</returns>
            <param name="array">The one-dimensional, zero-based <see cref="T:System.Array" /> to search.</param>
            <param name="value">The object to locate in <paramref name="array" />.</param>
            <typeparam name="T">The type of the elements of the array.</typeparam>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="array" /> is null.</exception>
        </member>
        <member name="M:CodeJam.Collections.ArrayExtensions.LastIndexOf``1(``0[],``0,System.Int32)">
            <summary>Searches for the specified object and returns the index of the last occurrence within the range of elements in the <see cref="T:System.Array" /> that extends from the first element to the specified index.</summary>
            <returns>The zero-based index of the last occurrence of <paramref name="value" /> within the range of elements in <paramref name="array" /> that extends from the first element to <paramref name="startIndex" />, if found; otherwise, –1.</returns>
            <param name="array">The one-dimensional, zero-based <see cref="T:System.Array" /> to search.</param>
            <param name="value">The object to locate in <paramref name="array" />.</param>
            <param name="startIndex">The zero-based starting index of the backward search.</param>
            <typeparam name="T">The type of the elements of the array.</typeparam>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="array" /> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="startIndex" /> is outside the range of valid indexes for <paramref name="array" />.</exception>
        </member>
        <member name="M:CodeJam.Collections.ArrayExtensions.LastIndexOf``1(``0[],``0,System.Int32,System.Int32)">
            <summary>Searches for the specified object and returns the index of the last occurrence within the range of elements in the <see cref="T:System.Array" /> that contains the specified number of elements and ends at the specified index.</summary>
            <returns>The zero-based index of the last occurrence of <paramref name="value" /> within the range of elements in <paramref name="array" /> that contains the number of elements specified in <paramref name="count" /> and ends at <paramref name="startIndex" />, if found; otherwise, –1.</returns>
            <param name="array">The one-dimensional, zero-based <see cref="T:System.Array" /> to search.</param>
            <param name="value">The object to locate in <paramref name="array" />.</param>
            <param name="startIndex">The zero-based starting index of the backward search.</param>
            <param name="count">The number of elements in the section to search.</param>
            <typeparam name="T">The type of the elements of the array.</typeparam>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="array" /> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="startIndex" /> is outside the range of valid indexes for <paramref name="array" />.-or-<paramref name="count" /> is less than zero.-or-<paramref name="startIndex" /> and <paramref name="count" /> do not specify a valid section in <paramref name="array" />.</exception>
        </member>
        <member name="M:CodeJam.Collections.ArrayExtensions.Reverse(System.Array)">
            <summary>Reverses the sequence of the elements in the entire one-dimensional <see cref="T:System.Array" />.</summary>
            <param name="array">The one-dimensional <see cref="T:System.Array" /> to reverse.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="array" /> is null. </exception>
            <exception cref="T:System.RankException">
            <paramref name="array" /> is multidimensional. </exception>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:CodeJam.Collections.ArrayExtensions.Reverse(System.Array,System.Int32,System.Int32)">
            <summary>Reverses the sequence of the elements in a range of elements in the one-dimensional <see cref="T:System.Array" />.</summary>
            <param name="array">The one-dimensional <see cref="T:System.Array" /> to reverse.</param>
            <param name="index">The starting index of the section to reverse.</param>
            <param name="length">The number of elements in the section to reverse.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="array" /> is null.</exception>
            <exception cref="T:System.RankException">
            <paramref name="array" /> is multidimensional.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index" /> is less than the lower bound of <paramref name="array" />.-or-<paramref name="length" /> is less than zero.</exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="index" /> and <paramref name="length" /> do not specify a valid range in <paramref name="array" />.</exception>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:CodeJam.Collections.ArrayExtensions.Sort``1(``0[])">
            <summary>Sorts the elements in an entire <see cref="T:System.Array" /> using the <see cref="T:System.IComparable`1" /> generic interface implementation of each element of the <see cref="T:System.Array" />.</summary>
            <param name="array">The one-dimensional, zero-based <see cref="T:System.Array" /> to sort.</param>
            <typeparam name="T">The type of the elements of the array.</typeparam>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="array" /> is null.</exception>
            <exception cref="T:System.InvalidOperationException">One or more elements in <paramref name="array" /> do not implement the <see cref="T:System.IComparable`1" /> generic interface.</exception>
        </member>
        <member name="M:CodeJam.Collections.ArrayExtensions.Sort``1(``0[],System.Collections.Generic.IComparer{``0})">
            <summary>Sorts the elements in an <see cref="T:System.Array" /> using the specified <see cref="T:System.Collections.Generic.IComparer`1" /> generic interface.</summary>
            <param name="array">The one-dimensional, zero-base <see cref="T:System.Array" /> to sort</param>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IComparer`1" /> generic interface implementation to use when comparing elements, or null to use the <see cref="T:System.IComparable`1" /> generic interface implementation of each element.</param>
            <typeparam name="T">The type of the elements of the array.</typeparam>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="array" /> is null.</exception>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="comparer" /> is null, and one or more elements in <paramref name="array" /> do not implement the <see cref="T:System.IComparable`1" /> generic interface.</exception>
            <exception cref="T:System.ArgumentException">The implementation of <paramref name="comparer" /> caused an error during the sort. For example, <paramref name="comparer" /> might not return 0 when comparing an item with itself.</exception>
        </member>
        <member name="M:CodeJam.Collections.ArrayExtensions.Sort``1(``0[],System.Comparison{``0})">
            <summary>Sorts the elements in an <see cref="T:System.Array" /> using the specified <see cref="T:System.Comparison`1" />.</summary>
            <param name="array">The one-dimensional, zero-based <see cref="T:System.Array" /> to sort</param>
            <param name="comparison">The <see cref="T:System.Comparison`1" /> to use when comparing elements.</param>
            <typeparam name="T">The type of the elements of the array.</typeparam>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="array" /> is null.-or-<paramref name="comparison" /> is null.</exception>
            <exception cref="T:System.ArgumentException">The implementation of <paramref name="comparison" /> caused an error during the sort. For example, <paramref name="comparison" /> might not return 0 when comparing an item with itself.</exception>
        </member>
        <member name="M:CodeJam.Collections.ArrayExtensions.Sort``1(``0[],System.Int32,System.Int32)">
            <summary>Sorts the elements in a range of elements in an <see cref="T:System.Array" /> using the <see cref="T:System.IComparable`1" /> generic interface implementation of each element of the <see cref="T:System.Array" />.</summary>
            <param name="array">The one-dimensional, zero-based <see cref="T:System.Array" /> to sort</param>
            <param name="index">The starting index of the range to sort.</param>
            <param name="length">The number of elements in the range to sort.</param>
            <typeparam name="T">The type of the elements of the array.</typeparam>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="array" /> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index" /> is less than the lower bound of <paramref name="array" />.-or-<paramref name="length" /> is less than zero.</exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="index" /> and <paramref name="length" /> do not specify a valid range in <paramref name="array" />.</exception>
            <exception cref="T:System.InvalidOperationException">One or more elements in <paramref name="array" /> do not implement the <see cref="T:System.IComparable`1" /> generic interface.</exception>
        </member>
        <member name="M:CodeJam.Collections.ArrayExtensions.Sort``1(``0[],System.Int32,System.Int32,System.Collections.Generic.IComparer{``0})">
            <summary>Sorts the elements in a range of elements in an <see cref="T:System.Array" /> using the specified <see cref="T:System.Collections.Generic.IComparer`1" /> generic interface.</summary>
            <param name="array">The one-dimensional, zero-based <see cref="T:System.Array" /> to sort.</param>
            <param name="index">The starting index of the range to sort.</param>
            <param name="length">The number of elements in the range to sort.</param>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IComparer`1" /> generic interface implementation to use when comparing elements, or null to use the <see cref="T:System.IComparable`1" /> generic interface implementation of each element.</param>
            <typeparam name="T">The type of the elements of the array.</typeparam>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="array" /> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index" /> is less than the lower bound of <paramref name="array" />.-or-<paramref name="length" /> is less than zero.</exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="index" /> and <paramref name="length" /> do not specify a valid range in <paramref name="array" />. -or-The implementation of <paramref name="comparer" /> caused an error during the sort. For example, <paramref name="comparer" /> might not return 0 when comparing an item with itself.</exception>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="comparer" /> is null, and one or more elements in <paramref name="array" /> do not implement the <see cref="T:System.IComparable`1" /> generic interface.</exception>
        </member>
        <member name="M:CodeJam.Collections.ArrayExtensions.TrueForAll``1(``0[],System.Predicate{``0})">
            <summary>Determines whether every element in the array matches the conditions defined by the specified predicate.</summary>
            <returns>true if every element in <paramref name="array" /> matches the conditions defined by the specified predicate; otherwise, false. If there are no elements in the array, the return value is true.</returns>
            <param name="array">The one-dimensional, zero-based <see cref="T:System.Array" /> to check against the conditions</param>
            <param name="match">The <see cref="T:System.Predicate`1" /> that defines the conditions to check against the elements.</param>
            <typeparam name="T">The type of the elements of the array.</typeparam>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="array" /> is null.-or-<paramref name="match" /> is null.</exception>
        </member>
        <member name="T:CodeJam.Collections.LazyDictionary">
            <summary>
            Provides static methods for <see cref="T:CodeJam.Collections.ILazyDictionary`2"/>.
            </summary>
        </member>
        <member name="M:CodeJam.Collections.LazyDictionary.Create``2(System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``0},System.Boolean)">
            <summary>
            Creates implementation of <see cref="T:CodeJam.Collections.ILazyDictionary`2"/>.
            </summary>
            <typeparam name="TKey">Type of key</typeparam>
            <typeparam name="TValue">Type of value</typeparam>
            <param name="valueFactory">Function to create value on demand.</param>
            <param name="comparer">Key comparer.</param>
            <param name="threadSafe">If true, creates a thread safe impementation</param>
            <returns><see cref="T:CodeJam.Collections.ILazyDictionary`2"/> implementation.</returns>
        </member>
        <member name="M:CodeJam.Collections.LazyDictionary.Create``2(System.Func{``0,``1},System.Boolean)">
            <summary>
            Creates implementation of <see cref="T:CodeJam.Collections.ILazyDictionary`2"/>.
            </summary>
            <typeparam name="TKey">Type of key</typeparam>
            <typeparam name="TValue">Type of value</typeparam>
            <param name="valueFactory">Function to create value on demand.</param>
            <param name="threadSafe">If true, creates a thread safe impementation</param>
            <returns><see cref="T:CodeJam.Collections.ILazyDictionary`2"/> implementation.</returns>
        </member>
        <member name="T:CodeJam.Collections.LazyDictionary`2">
            <summary>
            Dictionary with lazy values initialization.
            </summary>
        </member>
        <member name="M:CodeJam.Collections.LazyDictionary`2.#ctor(System.Func{`0,`1},System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initialize instance.
            </summary>
            <param name="valueFactory">Function to create value on demand.</param>
            <param name="comparer">Key comparer.</param>
        </member>
        <member name="M:CodeJam.Collections.LazyDictionary`2.#ctor(System.Func{`0,`1})">
            <summary>
            Initialize instance.
            </summary>
            <param name="valueFactory">Function to create value on demand.</param>
        </member>
        <member name="M:CodeJam.Collections.LazyDictionary`2.Clear">
            <summary>
            Clears all created values
            </summary>
        </member>
        <member name="M:CodeJam.Collections.LazyDictionary`2.ContainsKey(`0)">
            <summary>Determines whether the read-only dictionary contains an element that has the specified key.</summary>
            <returns>true if the read-only dictionary contains an element that has the specified key; otherwise, false.</returns>
            <param name="key">The key to locate.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="key" /> is null.</exception>
        </member>
        <member name="M:CodeJam.Collections.LazyDictionary`2.TryGetValue(`0,`1@)">
            <summary>Gets the value that is associated with the specified key.</summary>
            <returns>true if the object that implements the <see cref="T:System.Collections.Generic.IReadOnlyDictionary`2" /> interface contains an element that has the specified key; otherwise, false.</returns>
            <param name="key">The key to locate.</param>
            <param name="value">When this method returns, the value associated with the specified key, if the key is found; otherwise, the default value for the type of the <paramref name="value" /> parameter. This parameter is passed uninitialized.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="key" /> is null.</exception>
        </member>
        <member name="P:CodeJam.Collections.LazyDictionary`2.Item(`0)">
            <summary>Gets the element that has the specified key in the read-only dictionary.</summary>
            <returns>The element that has the specified key in the read-only dictionary.</returns>
            <param name="key">The key to locate.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="key" /> is null.</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">The property is retrieved and <paramref name="key" /> is not found. </exception>
        </member>
        <member name="P:CodeJam.Collections.LazyDictionary`2.Keys">
            <summary>Gets an enumerable collection that contains the keys in the read-only dictionary. </summary>
            <returns>An enumerable collection that contains the keys in the read-only dictionary.</returns>
        </member>
        <member name="P:CodeJam.Collections.LazyDictionary`2.Values">
            <summary>Gets an enumerable collection that contains the values in the read-only dictionary.</summary>
            <returns>An enumerable collection that contains the values in the read-only dictionary.</returns>
        </member>
        <member name="T:CodeJam.Collections.KeyEqualityComparer">
            <summary>
            Provides static methods for creating <see cref="T:CodeJam.Collections.KeyEqualityComparer`2"/>.
            </summary>
        </member>
        <member name="M:CodeJam.Collections.KeyEqualityComparer.Create``2(System.Func{``0,``1})">
            <summary>
            Creates a <seealso cref="T:CodeJam.Collections.KeyEqualityComparer`2"/>.
            </summary>
            <typeparam name="T">The type of the comparing elements.</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
            <param name="keySelector">The function to extract the key for each element.</param>
            <returns>
            A <seealso cref="T:CodeJam.Collections.KeyEqualityComparer`2"/>.
            </returns>
        </member>
        <member name="M:CodeJam.Collections.KeyEqualityComparer.Create``2(System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
            Creates a <seealso cref="T:CodeJam.Collections.KeyEqualityComparer`2"/>.
            </summary>
            <typeparam name="T">The type of the comparing elements.</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
            <param name="keySelector">The function to extract the key for each element.</param>
            <param name="comparer">The equality comparer to use to compare the keys.</param>
            <returns>
            A <seealso cref="T:CodeJam.Collections.KeyEqualityComparer`2"/>.
            </returns>
        </member>
        <member name="T:CodeJam.Collections.ILazyDictionary`2">
            <summary>
            Dictionary with lazy values initialization.
            </summary>
            <typeparam name="TKey">Type of key</typeparam>
            <typeparam name="TValue">Type of value</typeparam>
        </member>
        <member name="M:CodeJam.Collections.ILazyDictionary`2.Clear">
            <summary>
            Clears all created values
            </summary>
        </member>
        <member name="T:CodeJam.Collections.Array`1">
            <summary>
            <see cref="T:System.Array"/> type extensions.
            </summary>
            <typeparam name="T">Type of an array.</typeparam>
        </member>
        <member name="F:CodeJam.Collections.Array`1.Empty">
            <summary>
            Empty instance of <typeparamref name="T"/>[].
            </summary>
        </member>
        <member name="T:CodeJam.Collections.KeyEqualityComparer`2">
            <summary>
            An implementation of the <see cref="T:System.Collections.Generic.IEqualityComparer`1"/>
            interface for compare values by comparing their extracted key values.
            </summary>
        </member>
        <member name="P:CodeJam.Collections.KeyEqualityComparer`2.KeySelector">
            <summary>
            Gets the function to extract the key for each element.
            </summary>
            <returns>
            The function to extract the key for each element.
            </returns>
        </member>
        <member name="P:CodeJam.Collections.KeyEqualityComparer`2.Comparer">
            <summary>
            Gets the equality comparer to use to compare the keys.
            </summary>
            <returns>
            The equality comparer to use to compare the keys.
            </returns>
        </member>
        <member name="M:CodeJam.Collections.KeyEqualityComparer`2.#ctor(System.Func{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:CodeJam.Collections.KeyEqualityComparer`2"/>.
            </summary>
            <param name="keySelector">The function to extract the key for each element.</param>
        </member>
        <member name="M:CodeJam.Collections.KeyEqualityComparer`2.#ctor(System.Func{`0,`1},System.Collections.Generic.IEqualityComparer{`1})">
            <summary>
            Initializes a new instance of the <see cref="T:CodeJam.Collections.KeyEqualityComparer`2"/>.
            </summary>
            <param name="keySelector">The function to extract the key for each element.</param>
            <param name="comparer">The equality comparer to use to compare the keys.</param>
        </member>
        <member name="M:CodeJam.Collections.KeyEqualityComparer`2.Equals(`0,`0)">
            <summary>
            Determines whether the specified objects are equal.
            </summary>
            <param name="x">The first object of type <typeparamref name="T"/> to compare.</param>
            <param name="y">The second object of type <typeparamref name="T"/> to compare.</param>
            <returns>
            true if the specified objects are equal; otherwise, false.
            </returns>
        </member>
        <member name="M:CodeJam.Collections.KeyEqualityComparer`2.GetHashCode(`0)">
            <summary>
            Returns a hash code for the specified object.
            </summary>
            <returns>
            A hash code for the specified object.
            </returns>
            <param name="obj">The <see cref="T:System.Object"/> for which a hash code is to be returned.</param>
        </member>
        <member name="T:CodeJam.Collections.CollectionExtensions">
            <summary>
            Various collections extensions.
            </summary>
        </member>
        <member name="M:CodeJam.Collections.CollectionExtensions.IsNullOrEmpty``1(System.Collections.Generic.ICollection{``0})">
            <summary>
            Indicates whether the specified collection is <c>null</c> or empty.
            </summary>
            <param name="collection">The collection to test for emptiness.</param>
            <returns>
            <c>true</c>, if the <paramref name="collection"/> parameter is <c>null</c>
            or empty; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:CodeJam.Collections.CollectionExtensions.IsNullOrEmpty``1(``0[])">
            <summary>
            Indicates whether the specified array is <c>null</c> or empty.
            </summary>
            <param name="array">The collection to test for emptiness.</param>
            <returns>
            <c>true</c>, if the <paramref name="array"/> parameter is <c>null</c>
            or empty; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:CodeJam.Collections.CollectionExtensions.NotNullNorEmpty``1(System.Collections.Generic.ICollection{``0})">
            <summary>
            Indicates whether the specified collection is not null nor empty.
            </summary>
            <param name="collection">The collection to test.</param>
            <returns>
            <c>true</c>, if the <paramref name="collection"/> parameter is not null nor empty; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:CodeJam.Collections.CollectionExtensions.NotNullNorEmpty``1(``0[])">
            <summary>
            Indicates whether the specified array is is not null nor empty.
            </summary>
            <param name="array">The collection to test.</param>
            <returns>
            <c>true</c>, if the <paramref name="array"/> parameter is not null nor empty; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:CodeJam.Collections.CollectionExtensions.AddRange``1(System.Collections.Generic.ICollection{``0},``0[])">
            <summary>
            Adds the elements to the end of the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <typeparam name="T">The type of the items that the collection contains.</typeparam>
            <param name="source">The collection to add the elements to.</param>
            <param name="items">The items to add to the collection.</param>
        </member>
        <member name="M:CodeJam.Collections.CollectionExtensions.AddRange``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.IList{``0})">
            <summary>
            Adds the elements to the end of the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <typeparam name="T">The type of the items that the collection contains.</typeparam>
            <param name="source">The collection to add the elements to.</param>
            <param name="items">The items to add to the collection.</param>
        </member>
        <member name="M:CodeJam.Collections.CollectionExtensions.AddRange``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Adds the elements to the end of the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <typeparam name="T">The type of the items that the collection contains.</typeparam>
            <param name="source">The collection to add the elements to.</param>
            <param name="items">The items to add to the collection.</param>
        </member>
        <member name="T:CodeJam.Collections.DictionaryExtensions">
            <summary>
            Extensions for <see cref="T:System.Collections.Generic.IDictionary`2"/>
            </summary>
        </member>
        <member name="M:CodeJam.Collections.DictionaryExtensions.GetValueOrDefault``2(System.Collections.Generic.IDictionary{``0,``1},``0)">
            <summary>
            Returns value associated with <paramref name="key"/>, or default(TValue) if key does not exists in
            <paramref name="dictionary"/>
            </summary>
        </member>
        <member name="M:CodeJam.Collections.DictionaryExtensions.GetValueOrDefault``2(System.Collections.Generic.Dictionary{``0,``1},``0)">
            <summary>
            Returns value associated with <paramref name="key"/>, or default(TValue) if key does not exists in
            <paramref name="dictionary"/>
            </summary>
        </member>
        <member name="M:CodeJam.Collections.DictionaryExtensions.GetValueOrDefault``2(System.Collections.Generic.IReadOnlyDictionary{``0,``1},``0)">
            <summary>
            Returns value associated with <paramref name="key"/>, or default(TValue) if key does not exists in
            <paramref name="dictionary"/>
            </summary>
        </member>
        <member name="M:CodeJam.Collections.DictionaryExtensions.GetValueOrDefault``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1)">
            <summary>
            Returns value associated with <paramref name="key"/>, or <paramref name="defaultValue"/> if key does not exists
            in <paramref name="dictionary"/>
            </summary>
        </member>
        <member name="M:CodeJam.Collections.DictionaryExtensions.GetValueOrDefault``2(System.Collections.Generic.IDictionary{``0,``1},``0,System.Func{``0,``1})">
            <summary>
            Returns value associated with <paramref name="key"/>, or value returned by <paramref name="defaultValueFactory"/>
            if key does not exists in <paramref name="dictionary"/>
            </summary>
        </member>
        <member name="M:CodeJam.Collections.DictionaryExtensions.GetOrAdd``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1)">
            <summary>
              Adds a key/value pair to the <see cref="T:System.Collections.Generic.IDictionary`2"/> if the key does not already exist.
            </summary>
            <param name="dictionary"></param>
            <param name="key">The key of the element to add.</param>
            <param name="value">the value to be added, if the key does not already exist</param>
            <returns>
              The value for the key. This will be either the existing value for the key if the key is already in the
              dictionary, or the new value if the key was not in the dictionary.
            </returns>
        </member>
        <member name="M:CodeJam.Collections.DictionaryExtensions.GetOrAdd``2(System.Collections.Generic.IDictionary{``0,``1},``0,System.Func{``0,``1})">
            <summary>
              Adds a key/value pair to the <see cref="T:System.Collections.Generic.IDictionary`2"/> if the key does not already exist.
            </summary>
            <param name="dictionary"></param>
            <param name="key">The key of the element to add.</param>
            <param name="valueFactory">The function used to generate a value for the key</param>
            <returns>
              The value for the key. This will be either the existing value for the key if the key is already in the
              dictionary, or the new value if the key was not in the dictionary.
            </returns>
        </member>
        <member name="M:CodeJam.Collections.DictionaryExtensions.AddOrUpdate``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1,System.Func{``0,``1,``1})">
            <summary>
              Adds a key/value pair to the <see cref="T:System.Collections.Generic.IDictionary`2"/> if the key does not already exist,
              or updates a key/value pair <see cref="T:System.Collections.Generic.IDictionary`2"/> by using the specified function
              if the key already exists.
            </summary>
            <param name="dictionary"></param>
            <param name="key">The key to be added or whose value should be updated</param>
            <param name="addValue">The value to be added for an absent key</param>
            <param name="updateValueFactory">The function used to generate a new value for an existing key based on the key's existing value</param>
            <returns>
              The new value for the key. This will be either be addValue (if the key was absent) or the result of
              updateValueFactory (if the key was present).
            </returns>
        </member>
        <member name="M:CodeJam.Collections.DictionaryExtensions.AddOrUpdate``2(System.Collections.Generic.IDictionary{``0,``1},``0,System.Func{``0,``1},System.Func{``0,``1,``1})">
            <summary>
              Adds a key/value pair to the <see cref="T:System.Collections.Generic.IDictionary`2"/> if the key does not already exist,
              or updates a key/value pair <see cref="T:System.Collections.Generic.IDictionary`2"/> by using the specified function
              if the key already exists.
            </summary>
            <param name="dictionary"></param>
            <param name="key">The key to be added or whose value should be updated</param>
            <param name="addValueFactory">The function used to generate a value for an absent key</param>
            <param name="updateValueFactory">The function used to generate a new value for an existing key based on the key's existing value</param>
            <returns>
              The new value for the key. This will be either be addValue (if the key was absent) or the result of
              updateValueFactory (if the key was present).
            </returns>
        </member>
        <member name="T:CodeJam.Reflection.InfoOf`1">
            <summary>
            Provides a helper class to get the property, field, ctor or method from an expression.
            </summary>
        </member>
        <member name="M:CodeJam.Reflection.InfoOf`1.Member``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Returns the property or field.
            </summary>
            <param name="expression">The expression to analyze.</param>
            <returns>
            The <see cref="T:System.Reflection.MemberInfo"/> instance.
            </returns>
        </member>
        <member name="M:CodeJam.Reflection.InfoOf`1.Property``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Returns the property.
            </summary>
            <param name="expression">The expression to analyze.</param>
            <returns>
            The <see cref="T:System.Reflection.PropertyInfo"/> instance.
            </returns>
        </member>
        <member name="M:CodeJam.Reflection.InfoOf`1.Field``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Returns the field.
            </summary>
            <param name="expression">The expression to analyze.</param>
            <returns>
            The <see cref="T:System.Reflection.FieldInfo"/> instance.
            </returns>
        </member>
        <member name="M:CodeJam.Reflection.InfoOf`1.Constructor(System.Linq.Expressions.Expression{System.Func{`0}})">
            <summary>
            Returns the contsructor.
            </summary>
            <param name="expression">The expression to analyze.</param>
            <returns>
            The <see cref="T:System.Reflection.ConstructorInfo"/> instance.
            </returns>
        </member>
        <member name="M:CodeJam.Reflection.InfoOf`1.Method``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Returns the method.
            </summary>
            <param name="expression">The expression to analyze.</param>
            <returns>
            The <see cref="T:System.Reflection.MethodInfo"/> instance.
            </returns>
        </member>
        <member name="M:CodeJam.Reflection.InfoOf`1.Method(System.Linq.Expressions.Expression{System.Action{`0}})">
            <summary>
            Returns the method.
            </summary>
            <param name="expression">The expression to analyze.</param>
            <returns>
            The <see cref="T:System.Reflection.MethodInfo"/> instance.
            </returns>
        </member>
        <member name="T:CodeJam.Reflection.ParamInfo">
            <summary>
            Parameter data for CreateInstance method.
            </summary>
        </member>
        <member name="M:CodeJam.Reflection.ParamInfo.#ctor(System.String,System.Object,System.Boolean)">
            <summary>Initializes a new instance of the <see cref="T:CodeJam.Reflection.ParamInfo" /> class.</summary>
        </member>
        <member name="M:CodeJam.Reflection.ParamInfo.Param(System.String,System.Object,System.Boolean)">
            <summary>Initializes a new instance of the <see cref="T:CodeJam.Reflection.ParamInfo" /> class.</summary>
        </member>
        <member name="P:CodeJam.Reflection.ParamInfo.Name">
            <summary>
            Parameter name.
            </summary>
        </member>
        <member name="P:CodeJam.Reflection.ParamInfo.Value">
            <summary>
            Parameter value.
            </summary>
        </member>
        <member name="P:CodeJam.Reflection.ParamInfo.Required">
            <summary>
            True, if parameter required.
            </summary>
        </member>
        <member name="T:CodeJam.Reflection.AssemblyExtensions">
            <summary>
            The <see cref="T:System.Reflection.Assembly"/> extensions.
            </summary>
        </member>
        <member name="M:CodeJam.Reflection.AssemblyExtensions.GetRequiredResourceStream(System.Reflection.Assembly,System.String)">
            <summary>
            Loads the specified manifest resource from this assembly, and checks if it exists.
            </summary>
            <param name="assembly">Resource assembly.</param>
            <param name="name">The case-sensitive name of the manifest resource being requested.</param>
            <returns>The manifest resource.</returns>
            <exception cref="T:System.ArgumentNullException">The name parameter is null.</exception>
            <exception cref="T:System.ArgumentException">Resource with specified name not found</exception>
        </member>
        <member name="M:CodeJam.Reflection.AssemblyExtensions.GetAssemblyPath(System.Reflection.Assembly)">
            <summary>
            Returns path to assembly <paramref name="assembly"/> file.
            </summary>
            <param name="assembly">Assembly.</param>
        </member>
        <member name="M:CodeJam.Reflection.AssemblyExtensions.GetAssemblyDirectory(System.Reflection.Assembly)">
            <summary>
            Returns directory part of path to assembly <paramref name="assembly"/> file.
            </summary>
            <param name="assembly">Assembly.</param>
        </member>
        <member name="T:CodeJam.Reflection.EnumHelper">
            <summary>
            Helper methods for enumeration.
            </summary>
        </member>
        <member name="M:CodeJam.Reflection.EnumHelper.GetNames``1">
            <summary>
            Retrieves an array of the names of the constants in a specified enumeration.
            </summary>
            <typeparam name="T">An enumeration type.</typeparam>
            <returns>A string array of the names of the constants in enumType.</returns>
        </member>
        <member name="M:CodeJam.Reflection.EnumHelper.GetName``1(``0)">
            <summary>
            Retrieves the name of the constant in the specified enumeration that has the specified value.
            </summary>
            <param name="value">The value of a particular enumerated constant in terms of its underlying type.</param>
            <typeparam name="T">An enumeration type.</typeparam>
            <returns>
            A string containing the name of the enumerated constant in enumType whose value is value;
            or null if no such constant is found.
            </returns>
        </member>
        <member name="M:CodeJam.Reflection.EnumHelper.GetValues``1">
            <summary>
            Retrieves an array of the values of the constants in a specified enumeration.
            </summary>
            <typeparam name="T">An enumeration type.</typeparam>
            <returns>An array that contains the values of the constants in enumType.</returns>
        </member>
        <member name="M:CodeJam.Reflection.EnumHelper.IsDefined``1(``0)">
            <summary>
            Returns an indication whether a constant with a specified value exists in a specified enumeration.
            </summary>
            <param name="value">The value or name of a constant in <typeparamref name="T"/>.</param>
            <typeparam name="T">An enumeration type.</typeparam>
            <returns>true if a constant in enumType has a value equal to value; otherwise, false.</returns>
        </member>
        <member name="M:CodeJam.Reflection.EnumHelper.Parse``1(System.String,System.Boolean)">
            <summary>
            Converts the string representation of the name or numeric <paramref name="value"/> of one or more
            enumerated constants to an equivalent enumerated object. A parameter <paramref name="ignoreCase"/> specifies
            whether the operation is case-insensitive.
            </summary>
            <param name="value">A string containing the name or value to convert.</param>
            <param name="ignoreCase">true to ignore case; false to regard case.</param>
            <typeparam name="T">An enumeration type.</typeparam>
            <returns>An object of type enumType whose value is represented by value.</returns>
        </member>
        <member name="M:CodeJam.Reflection.EnumHelper.GetPairs``1">
            <summary>
            Retrievies an array of name/value pairs in a specified enumeration.
            </summary>
            <typeparam name="T">An enumeration type.</typeparam>
            <returns>
            An array of the names of the constants in a specified enumeration.
            </returns>
        </member>
        <member name="M:CodeJam.Reflection.EnumHelper.GetField``1(``0)">
            <summary>
            Searches for the public field with the specified enumeration value.
            </summary>
            <typeparam name="T">An enumeration type.</typeparam>
            <param name="value">An enumeration value.</param>
            <returns>
            An object representing the public field with the specified enumeration value, if found;
            otherwise, null.
            </returns>
        </member>
        <member name="T:CodeJam.Reflection.ExpressionHelper">
            <summary>
            Provides a helper class to get the property, field, ctor or method from an expression.
            </summary>
        </member>
        <member name="M:CodeJam.Reflection.ExpressionHelper.GetMemberInfo(System.Linq.Expressions.LambdaExpression)">
            <summary>
            Gets the <see cref="T:System.Reflection.MemberInfo"/>.
            </summary>
            <param name="expression">The expression to analyze.</param>
            <returns>
            The <see cref="T:System.Reflection.MemberInfo"/> instance.
            </returns>
        </member>
        <member name="M:CodeJam.Reflection.ExpressionHelper.GetProperty(System.Linq.Expressions.LambdaExpression)">
            <summary>
            Returns the property.
            </summary>
            <param name="expression">The expression to analyze.</param>
            <returns>
            The <see cref="T:System.Reflection.PropertyInfo"/> instance.
            </returns>
        </member>
        <member name="M:CodeJam.Reflection.ExpressionHelper.GetField(System.Linq.Expressions.LambdaExpression)">
            <summary>
            Returns the field.
            </summary>
            <param name="expression">The expression to analyze.</param>
            <returns>
            The <see cref="T:System.Reflection.FieldInfo"/> instance.
            </returns>
        </member>
        <member name="M:CodeJam.Reflection.ExpressionHelper.GetConstructor(System.Linq.Expressions.LambdaExpression)">
            <summary>
            Returns the constructor.
            </summary>
            <param name="expression">The expression to analyze.</param>
            <returns>
            The <see cref="T:System.Reflection.ConstructorInfo"/> instance.
            </returns>
        </member>
        <member name="M:CodeJam.Reflection.ExpressionHelper.GetMethod(System.Linq.Expressions.LambdaExpression)">
            <summary>
            Returns the method.
            </summary>
            <param name="expression">The expression to analyze.</param>
            <returns>
            The <see cref="T:System.Reflection.MethodInfo"/> instance.
            </returns>
        </member>
        <member name="M:CodeJam.Reflection.ExpressionHelper.GetPropertyName(System.Linq.Expressions.LambdaExpression)">
            <summary>
            Returns a name of the property.
            </summary>
            <param name="expression">The expression to analyze.</param>
            <returns>
            A name of the property.
            </returns>
        </member>
        <member name="M:CodeJam.Reflection.ExpressionHelper.GetFullPropertyName(System.Linq.Expressions.LambdaExpression)">
            <summary>
            Returns a composited name of the property.
            </summary>
            <param name="expression">The expression to analyze.</param>
            <returns>
            A composited name of the property.
            </returns>
        </member>
        <member name="M:CodeJam.Reflection.ExpressionHelper.GetMethodName(System.Linq.Expressions.LambdaExpression)">
            <summary>
            Returns a name of the method.
            </summary>
            <param name="expression">The expression to analyze.</param>
            <returns>
            A name of the method.
            </returns>
        </member>
        <member name="T:CodeJam.Reflection.InfoOf">
            <summary>
                Provides a helper class to get the property, field, ctor or method from an expression.
            </summary>
        </member>
        <member name="M:CodeJam.Reflection.InfoOf.Member``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Returns the <see cref="T:System.Reflection.MemberInfo" />.
            </summary>
            <param name="expression">The expression to analyze.</param>
            <returns>
            The <see cref="T:System.Reflection.MemberInfo" /> instance.
            </returns>
        </member>
        <member name="M:CodeJam.Reflection.InfoOf.Member``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Returns the <see cref="T:System.Reflection.MemberInfo" />.
            </summary>
            <param name="expression">The expression to analyze.</param>
            <returns>
            The <see cref="T:System.Reflection.MemberInfo" /> instance.
            </returns>
        </member>
        <member name="M:CodeJam.Reflection.InfoOf.Member``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Returns the <see cref="T:System.Reflection.MemberInfo" />.
            </summary>
            <param name="expression">The expression to analyze.</param>
            <returns>
            The <see cref="T:System.Reflection.MemberInfo" /> instance.
            </returns>
        </member>
        <member name="M:CodeJam.Reflection.InfoOf.Property``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Returns the property.
            </summary>
            <param name="expression">The expression to analyze.</param>
            <returns>
            The <see cref="T:System.Reflection.PropertyInfo" /> instance.
            </returns>
        </member>
        <member name="M:CodeJam.Reflection.InfoOf.Property``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Returns the property.
            </summary>
            <param name="expression">The expression to analyze.</param>
            <returns>
            The <see cref="T:System.Reflection.PropertyInfo" /> instance.
            </returns>
        </member>
        <member name="M:CodeJam.Reflection.InfoOf.Property``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Returns the property.
            </summary>
            <param name="expression">The expression to analyze.</param>
            <returns>
            The <see cref="T:System.Reflection.PropertyInfo" /> instance.
            </returns>
        </member>
        <member name="M:CodeJam.Reflection.InfoOf.Field``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Returns the field.
            </summary>
            <param name="expression">The expression to analyze.</param>
            <returns>
            The <see cref="T:System.Reflection.FieldInfo" /> instance.
            </returns>
        </member>
        <member name="M:CodeJam.Reflection.InfoOf.Field``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Returns the field.
            </summary>
            <param name="expression">The expression to analyze.</param>
            <returns>
            The <see cref="T:System.Reflection.FieldInfo" /> instance.
            </returns>
        </member>
        <member name="M:CodeJam.Reflection.InfoOf.Field``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Returns the field.
            </summary>
            <param name="expression">The expression to analyze.</param>
            <returns>
            The <see cref="T:System.Reflection.FieldInfo" /> instance.
            </returns>
        </member>
        <member name="M:CodeJam.Reflection.InfoOf.Constructor``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Returns the contsructor.
            </summary>
            <param name="expression">The expression to analyze.</param>
            <returns>
            The <see cref="T:System.Reflection.ConstructorInfo" /> instance.
            </returns>
        </member>
        <member name="M:CodeJam.Reflection.InfoOf.Method``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Returns the method.
            </summary>
            <param name="expression">The expression to analyze.</param>
            <returns>
            The <see cref="T:System.Reflection.MethodInfo" /> instance.
            </returns>
        </member>
        <member name="M:CodeJam.Reflection.InfoOf.Method``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Returns the method.
            </summary>
            <param name="expression">The expression to analyze.</param>
            <returns>
            The <see cref="T:System.Reflection.MethodInfo" /> instance.
            </returns>
        </member>
        <member name="M:CodeJam.Reflection.InfoOf.Method``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Returns the method.
            </summary>
            <param name="expression">The expression to analyze.</param>
            <returns>
            The <see cref="T:System.Reflection.MethodInfo" /> instance.
            </returns>
        </member>
        <member name="M:CodeJam.Reflection.InfoOf.Method(System.Linq.Expressions.Expression{System.Action})">
            <summary>
            Returns the method.
            </summary>
            <param name="expression">The expression to analyze.</param>
            <returns>
            The <see cref="T:System.Reflection.MethodInfo" /> instance.
            </returns>
        </member>
        <member name="M:CodeJam.Reflection.InfoOf.Method``1(System.Linq.Expressions.Expression{System.Action{``0}})">
            <summary>
            Returns the method.
            </summary>
            <param name="expression">The expression to analyze.</param>
            <returns>
            The <see cref="T:System.Reflection.MethodInfo" /> instance.
            </returns>
        </member>
        <member name="T:CodeJam.Reflection.ReflectionExtensions">
            <summary>
            Reflection extension methods.
            </summary>
        </member>
        <member name="M:CodeJam.Reflection.ReflectionExtensions.IsInstantiable(System.Type)">
            <summary>
            Gets a value indicating whether the <paramref name="type"/> can be instantiated.
            </summary>
            <param name="type">The <see cref="T:System.Type"/> to test.</param>
            <returns>
            A value indicating whether the <paramref name="type"/> can be instantiated.
            </returns>
        </member>
        <member name="M:CodeJam.Reflection.ReflectionExtensions.IsStatic(System.Type)">
            <summary>
            Gets a value indicating whether the <paramref name="type"/> is declared static.
            </summary>
            <param name="type">The <see cref="T:System.Type"/> to test.</param>
            <returns>
            A value indicating whether the <paramref name="type"/> is declared static.
            </returns>
        </member>
        <member name="M:CodeJam.Reflection.ReflectionExtensions.IsNullable(System.Type)">
            <summary>
            Gets a value indicating whether the <paramref name="type"/> is Nullable&#60;&#62; type.
            </summary>
            <param name="type">The <see cref="T:System.Type"/> to test.</param>
            <returns>
            A value indicating whether the <paramref name="type"/> is Nullable&#60;&#62;.
            </returns>
        </member>
        <member name="M:CodeJam.Reflection.ReflectionExtensions.IsNumeric(System.Type)">
            <summary>
            Checks if <paramref name="type"/> is numeric type.
            </summary>
            <param name="type">Type to check.</param>
            <returns>True, if <paramref name="type"/> is numeric.</returns>
        </member>
        <member name="M:CodeJam.Reflection.ReflectionExtensions.IsInteger(System.Type)">
            <summary>
            Checks if <paramref name="type"/> is integer type.
            </summary>
            <param name="type">Type to check.</param>
            <returns>True, if <paramref name="type"/> is integer type.</returns>
        </member>
        <member name="M:CodeJam.Reflection.ReflectionExtensions.IsSubClass(System.Type,System.Type)">
            <summary>
            Determines whether the <paramref name="type"/> derives from the specified <paramref name="check"/>.
            </summary>
            <remarks>
            This method also returns false if <paramref name="type"/> and the <paramref name="check"/> are equal.
            </remarks>
            <param name="type">The type to test.</param>
            <param name="check">The type to compare with. </param>
            <returns>
            true if the <paramref name="type"/> derives from <paramref name="check"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:CodeJam.Reflection.ReflectionExtensions.GetDelegateParams(System.Type)">
            <summary>
            Returns delegate parameter infos.
            </summary>
            <param name="delegateType">Type of delegate</param>
            <returns>Array of <see cref="T:System.Reflection.ParameterInfo"/>.</returns>
        </member>
        <member name="M:CodeJam.Reflection.ReflectionExtensions.ToUnderlying(System.Type)">
            <summary>
            Returns the underlying type argument of the specified type.
            </summary>
            <param name="type">A <see cref="T:System.Type"/> instance. </param>
            <returns><list>
            <item>The type argument of the type parameter,
            if the type parameter is a closed generic nullable type.</item>
            <item>The underlying Type if the type parameter is an enum type.</item>
            <item>Otherwise, the type itself.</item>
            </list>
            </returns>
        </member>
        <member name="M:CodeJam.Reflection.ReflectionExtensions.GetMemberType(System.Reflection.MemberInfo)">
            <summary>
            Gets the type of this member.
            </summary>
            <param name="memberInfo">A <see cref="T:System.Reflection.MemberInfo"/> instance. </param>
            <returns>
            <list>
            <item>If the member is a property, returns <see cref="P:System.Reflection.PropertyInfo.PropertyType"/>.</item>
            <item>If the member is a field, returns <see cref="P:System.Reflection.FieldInfo.FieldType"/>.</item>
            <item>If the member is a method, returns <see cref="P:System.Reflection.MethodInfo.ReturnType"/>.</item>
            <item>If the member is a constructor, returns <see cref="P:System.Reflection.MemberInfo.DeclaringType"/>.</item>
            <item>If the member is an event, returns <see cref="P:System.Reflection.EventInfo.EventHandlerType"/>.</item>
            </list>
            </returns>
        </member>
        <member name="M:CodeJam.Reflection.ReflectionExtensions.IsAnonymous(System.Type)">
            <summary>
            Checks if <paramref name="type"/> is an anonymous type.
            </summary>
            <param name="type">Type to check.</param>
            <returns>True, if <paramref name="type"/> is an anonymous type.</returns>
        </member>
        <member name="M:CodeJam.Reflection.ReflectionExtensions.CreateInstance(System.Type,CodeJam.Reflection.ParamInfo[])">
            <summary>
            Creates instance of <paramref name="type"/> with specified <paramref name="parameters"/>.
            </summary>
            <param name="type">Type to create instance.</param>
            <param name="parameters">Constructor parameters</param>
            <returns>Instance of type</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="type"/> is null</exception>
            <exception cref="T:System.ArgumentException">No suitable constructors found</exception>
        </member>
        <member name="T:CodeJam.Services.IServicePublisher">
            <summary>
            Service publisher interface.
            </summary>
        </member>
        <member name="M:CodeJam.Services.IServicePublisher.Publish(System.Type,System.Object)">
            <summary>
            Publish service.
            </summary>
            <param name="serviceType">Type of service object to publish.</param>
            <param name="serviceInstance">Instance of service of type <paramref name="serviceType"/>.</param>
            <returns>Disposable cookie to conceal published service</returns>
        </member>
        <member name="M:CodeJam.Services.IServicePublisher.Publish(System.Type,System.Func{CodeJam.Services.IServicePublisher,System.Object})">
            <summary>
            Publish service.
            </summary>
            <param name="serviceType">Type of service object to publish.</param>
            <param name="instanceFactory">Factory to create service instance</param>
            <returns>Disposable cookie to conceal published service</returns>
        </member>
        <member name="T:CodeJam.Services.ServiceContainer">
            <summary>
            Service container.
            </summary>
        </member>
        <member name="M:CodeJam.Services.ServiceContainer.#ctor(System.IServiceProvider,System.Boolean)">
            <summary>Initializes a new instance of the <see cref="T:System.Object" /> class.</summary>
        </member>
        <member name="M:CodeJam.Services.ServiceContainer.#ctor(System.Boolean)">
            <summary>Initializes a new instance of the <see cref="T:System.Object" /> class.</summary>
        </member>
        <member name="M:CodeJam.Services.ServiceContainer.GetService(System.Type)">
            <summary>Gets the service object of the specified type.</summary>
            <returns>A service object of type <paramref name="serviceType" />.-or- null if there is no service object of type <paramref name="serviceType" />.</returns>
            <param name="serviceType">An object that specifies the type of service object to get. </param>
        </member>
        <member name="M:CodeJam.Services.ServiceContainer.Publish(System.Type,System.Object)">
            <summary>
            Publish service.
            </summary>
            <param name="serviceType">Type of service object to publish.</param>
            <param name="serviceInstance">Instance of service of type <paramref name="serviceType"/>.</param>
            <returns>Disposable cookie to conceal published service</returns>
        </member>
        <member name="M:CodeJam.Services.ServiceContainer.Publish(System.Type,System.Func{CodeJam.Services.IServicePublisher,System.Object})">
            <summary>
            Publish service.
            </summary>
            <param name="serviceType">Type of service object to publish.</param>
            <param name="instanceFactory">Factory to create service instance</param>
            <returns>Disposable cookie to conceal published service</returns>
        </member>
        <member name="M:CodeJam.Services.ServiceContainer.FactoryBag.#ctor(System.Func{CodeJam.Services.IServicePublisher,System.Object})">
            <summary>Initializes a new instance of the <see cref="T:System.Object" /> class.</summary>
        </member>
        <member name="M:CodeJam.Services.ServiceContainer.Dispose">
            <summary>
            Calls <see cref="M:System.IDisposable.Dispose"/> methods in all created service instances, that implements
            <see cref="T:System.IDisposable"/>.
            </summary>
        </member>
        <member name="T:CodeJam.Services.ServiceProviderHelper">
            <summary>
            <see cref="T:System.IServiceProvider"/> and <see cref="T:CodeJam.Services.IServicePublisher"/> helper methods.
            </summary>
        </member>
        <member name="M:CodeJam.Services.ServiceProviderHelper.GetRequiredService(System.IServiceProvider,System.Type)">
            <summary>
            Gets the service object of the specified type, or throws an exception if service not registered.
            </summary>
            <param name="provider">Instance of <see cref="T:System.IServiceProvider"/>.</param>
            <param name="serviceType">An object that specifies the type of service object to get.</param>
            <returns>
            A service object of type <paramref name="serviceType"/>.
            </returns>
        </member>
        <member name="M:CodeJam.Services.ServiceProviderHelper.GetService``1(System.IServiceProvider)">
            <summary>
            Gets the service object of the specified type.
            </summary>
            <typeparam name="T">An object that specifies the type of service object to get.</typeparam>
            <param name="provider">Instance of <see cref="T:System.IServiceProvider"/>.</param>
            <returns>A service object of type serviceType.</returns>
        </member>
        <member name="M:CodeJam.Services.ServiceProviderHelper.GetRequiredService``1(System.IServiceProvider)">
            <summary>
            Gets the service object of the specified type, or throws an exception if service not registered.
            </summary>
            <param name="provider">Instance of <see cref="T:System.IServiceProvider"/>.</param>
            <typeparam name="T">An object that specifies the type of service object to get.</typeparam>
            <returns>
            A service object of type <typeparamref name="T"/>.
            </returns>
        </member>
        <member name="M:CodeJam.Services.ServiceProviderHelper.Publish``1(CodeJam.Services.IServicePublisher,``0)">
            <summary>
            Publish service.
            </summary>
            <typeparam name="T">Type of service object to publish.</typeparam>
            <param name="publisher">Service publisher.</param>
            <param name="serviceInstance">Instance of service of type <typeparamref name="T"/></param>
            <returns>Disposable cookie to conceal published service</returns>
        </member>
        <member name="M:CodeJam.Services.ServiceProviderHelper.Publish``1(CodeJam.Services.IServicePublisher,System.Func{CodeJam.Services.IServicePublisher,``0})">
            <summary>
            Publish service.
            </summary>
            <typeparam name="T">Type of service object to publish.</typeparam>
            <param name="publisher">Service publisher.</param>
            <param name="instanceFactory">Factory to create service instance</param>
            <returns>Disposable cookie to conceal published service</returns>
        </member>
        <member name="T:CodeJam.TableData.CsvFormat">
            <summary>
            CSV format support.
            </summary>
        </member>
        <member name="M:CodeJam.TableData.CsvFormat.CreateParser(System.Boolean,System.Char)">
            <summary>
            Creates RFC4180 compliant CSV parser.
            </summary>
            <param name="allowEscaping">If true, allows values escaping.</param>
            <param name="columnSeparator">Char to use as column separator</param>
            <returns>Parser to use with <see cref="M:CodeJam.TableData.TableDataParser.Parse(CodeJam.TableData.TableDataParser.Parser,System.String)"/></returns>
        </member>
        <member name="M:CodeJam.TableData.CsvFormat.CreateFormatter(System.Boolean)">
            <summary>
            Creates formatter for CSV.
            </summary>
            <param name="allowEscaping">If true, use escaping.</param>
            <returns>Formatter instance</returns>
        </member>
        <member name="M:CodeJam.TableData.CsvFormat.CsvNoEscapeFormatter.GetValueLength(System.String)">
            <summary>
            Returns length of formatted value.
            </summary>
            <param name="value">Value.</param>
            <returns>Length of formatted value representation.</returns>
        </member>
        <member name="M:CodeJam.TableData.CsvFormat.CsvNoEscapeFormatter.FormatLine(System.String[],System.Int32[])">
            <summary>
            Prints line of table data.
            </summary>
            <param name="values">Line values.</param>
            <param name="columnWidths">Array of column widths. If null - value is ignored.</param>
            <returns>String representatiopn of values</returns>
        </member>
        <member name="T:CodeJam.TableData.DataLine">
            <summary>
            Line of data.
            </summary>
        </member>
        <member name="M:CodeJam.TableData.DataLine.#ctor(System.Int32,System.String[])">
            <summary>Initializes a new instance of the <see cref="T:System.Object" /> class.</summary>
        </member>
        <member name="P:CodeJam.TableData.DataLine.LineNum">
            <summary>
            Line number.
            </summary>
        </member>
        <member name="P:CodeJam.TableData.DataLine.Values">
            <summary>
            Line values.
            </summary>
        </member>
        <member name="M:CodeJam.TableData.DataLine.ToString">
            <summary>Returns the fully qualified type name of this instance.</summary>
            <returns>A <see cref="T:System.String" /> containing a fully qualified type name.</returns>
        </member>
        <member name="T:CodeJam.TableData.FixedWidthFormat">
            <summary>
            Fixed width format support.
            </summary>
        </member>
        <member name="M:CodeJam.TableData.FixedWidthFormat.CreateParser(System.Int32[])">
            <summary>
            Creates fixed width format parser.
            </summary>
            <param name="widths">Array of column widths</param>
            <returns>Parser to use with <see cref="M:CodeJam.TableData.TableDataParser.Parse(CodeJam.TableData.TableDataParser.Parser,System.String)"/></returns>
        </member>
        <member name="T:CodeJam.TableData.ITableDataFormatter">
            <summary>
            Formatter interface.
            </summary>
        </member>
        <member name="M:CodeJam.TableData.ITableDataFormatter.GetValueLength(System.String)">
            <summary>
            Returns length of formatted value.
            </summary>
            <param name="value">Value.</param>
            <returns>Length of formatted value representation.</returns>
        </member>
        <member name="M:CodeJam.TableData.ITableDataFormatter.FormatLine(System.String[],System.Int32[])">
            <summary>
            Prints line of table data.
            </summary>
            <param name="values">Line values.</param>
            <param name="columnWidths">Array of column widths.</param>
            <returns>String representatiopn of values</returns>
        </member>
        <member name="T:CodeJam.TableData.TableDataParser">
            <summary>
            
            </summary>
        </member>
        <member name="T:CodeJam.TableData.TableDataParser.Parser">
            <summary>
            Reads single line from table data and parses it.
            </summary>
            <param name="reader"><see cref="T:System.IO.TextReader"/> to read data from</param>
            <param name="lineNum">current number of line</param>
            <returns>
            Null, if end of file reached, string[0] if line contains no valued, or array of values.
            </returns>
        </member>
        <member name="M:CodeJam.TableData.TableDataParser.Parse(CodeJam.TableData.TableDataParser.Parser,System.String)">
            <summary>
            Parses table data.
            </summary>
            <param name="parser">Instance of specific parser.</param>
            <param name="text">Text to parse</param>
            <returns>Enumeration of <see cref="T:CodeJam.TableData.DataLine"/> contained parsed data.</returns>
        </member>
        <member name="M:CodeJam.TableData.TableDataParser.Parse(CodeJam.TableData.TableDataParser.Parser,System.IO.TextReader)">
            <summary>
            Parses table data.
            </summary>
            <param name="reader">Text to parse</param>
            <param name="parser">Instance of specific parser.</param>
            <returns>Enumeration of <see cref="T:CodeJam.TableData.DataLine"/> contained parsed data.</returns>
        </member>
        <member name="T:CodeJam.TableData.TableDataPrinter">
            <summary>
            Prints table data.
            </summary>
        </member>
        <member name="M:CodeJam.TableData.TableDataPrinter.Print(CodeJam.TableData.ITableDataFormatter,System.IO.TextWriter,System.Collections.Generic.IEnumerable{System.String[]},System.String)">
            <summary>
            Prints full CSV table
            </summary>
        </member>
        <member name="T:CodeJam.PlatformDependent">
            <summary>
            Switches for features depending on platform targeting
            </summary>
        </member>
        <member name="F:CodeJam.PlatformDependent.AggressiveInlining">
            <summary>
            MethodImplOptions.AggressiveInlining or 0, if not supported by target platform
            </summary>
        </member>
        <member name="T:CodeJam.IO.TempData">
            <summary>
            Methods to work with temporary data.
            </summary>
        </member>
        <member name="T:CodeJam.IO.TempData.TempBase">
            <summary>
            Base class for temp file|directory objects.
            Contains logic to proof the removal will be performed even on resource leak.
            </summary>
        </member>
        <member name="M:CodeJam.IO.TempData.TempBase.AssertNotDisposed">
            <summary>
            Assertion on object dispose
            </summary>
        </member>
        <member name="M:CodeJam.IO.TempData.TempBase.#ctor(System.String)">
            <summary>
            Initialize instance.
            </summary>
        </member>
        <member name="P:CodeJam.IO.TempData.TempBase.Path">
            <summary>
            Temp path.
            </summary>
        </member>
        <member name="M:CodeJam.IO.TempData.TempBase.Finalize">
            <summary>
            Finalize instance
            </summary>
        </member>
        <member name="M:CodeJam.IO.TempData.TempBase.Dispose">
            <summary>
            Delete the temp file|directory
            </summary>
        </member>
        <member name="M:CodeJam.IO.TempData.TempBase.Dispose(System.Boolean)">
            <summary>
            Dispose pattern implementation - overridable part
            </summary>
        </member>
        <member name="M:CodeJam.IO.TempData.TempBase.DisposePath(System.String,System.Boolean)">
            <summary>
            Temp path disposal
            </summary>
        </member>
        <member name="T:CodeJam.IO.TempData.TempDirectory">
            <summary>
            Wraps reference on a temp directory meant to be deleted on dispose
            </summary>
        </member>
        <member name="M:CodeJam.IO.TempData.TempDirectory.#ctor(System.String)">
            <summary>
            Initialize instance.
            </summary>
        </member>
        <member name="P:CodeJam.IO.TempData.TempDirectory.Info">
            <summary>
            DirectoryInfo object
            </summary>
        </member>
        <member name="M:CodeJam.IO.TempData.TempDirectory.DisposePath(System.String,System.Boolean)">
            <summary>
            Temp path disposal
            </summary>
        </member>
        <member name="T:CodeJam.IO.TempData.TempFile">
            <summary>
            Wraps reference on a temp file meant to be deleted on dispose
            </summary>
        </member>
        <member name="M:CodeJam.IO.TempData.TempFile.#ctor(System.String)">
            <summary>
            Initialize instance.
            </summary>
        </member>
        <member name="P:CodeJam.IO.TempData.TempFile.Info">
            <summary>
            DirectoryInfo object
            </summary>
        </member>
        <member name="M:CodeJam.IO.TempData.TempFile.DisposePath(System.String,System.Boolean)">
            <summary>
            Temp path disposal
            </summary>
        </member>
        <member name="M:CodeJam.IO.TempData.CreateDirectory">
            <summary>
            Creates temp directory and returns <see cref="T:System.IDisposable"/> to free it.
            </summary>
        </member>
        <member name="M:CodeJam.IO.TempData.CreateFile">
            <summary>
            Creates temp file and return disposable handle.
            </summary>
        </member>
        <member name="M:CodeJam.IO.TempData.CreateFile(System.String,System.String)">
            <summary>
            Creates temp file and return disposable handle.
            </summary>
            <exception cref="T:System.ArgumentNullException"><paramref name="dirPath"/> is null.</exception>
        </member>
        <member name="M:CodeJam.IO.TempData.CreateFileStream(System.IO.FileAccess)">
            <summary>
            Creates stream and returns disposable handler.
            </summary>
        </member>
        <member name="M:CodeJam.IO.TempData.CreateFileStream(System.String,System.String,System.IO.FileAccess)">
            <summary>
            Creates stream and returns disposable handler.
            </summary>
        </member>
        <member name="T:CodeJam.TupleStruct">
            <summary>
            Provides static methods for creating tuple structs.
            </summary>
        </member>
        <member name="M:CodeJam.TupleStruct.Create``2(``0,``1)">
            <summary>
            Creates a new 2-tuple.
            </summary>
            <param name="item1">The value of the component 1 of the tuple.</param>
            <typeparam name="T1">The type of the component 1 of the tuple.</typeparam>
            <param name="item2">The value of the component 2 of the tuple.</param>
            <typeparam name="T2">The type of the component 2 of the tuple.</typeparam>
            <returns>A 2-tuple whose value is (item1, item2).</returns>
        </member>
        <member name="M:CodeJam.TupleStruct.Create``3(``0,``1,``2)">
            <summary>
            Creates a new 3-tuple.
            </summary>
            <param name="item1">The value of the component 1 of the tuple.</param>
            <typeparam name="T1">The type of the component 1 of the tuple.</typeparam>
            <param name="item2">The value of the component 2 of the tuple.</param>
            <typeparam name="T2">The type of the component 2 of the tuple.</typeparam>
            <param name="item3">The value of the component 3 of the tuple.</param>
            <typeparam name="T3">The type of the component 3 of the tuple.</typeparam>
            <returns>A 3-tuple whose value is (item1, item2).</returns>
        </member>
        <member name="M:CodeJam.TupleStruct.Create``4(``0,``1,``2,``3)">
            <summary>
            Creates a new 4-tuple.
            </summary>
            <param name="item1">The value of the component 1 of the tuple.</param>
            <typeparam name="T1">The type of the component 1 of the tuple.</typeparam>
            <param name="item2">The value of the component 2 of the tuple.</param>
            <typeparam name="T2">The type of the component 2 of the tuple.</typeparam>
            <param name="item3">The value of the component 3 of the tuple.</param>
            <typeparam name="T3">The type of the component 3 of the tuple.</typeparam>
            <param name="item4">The value of the component 4 of the tuple.</param>
            <typeparam name="T4">The type of the component 4 of the tuple.</typeparam>
            <returns>A 4-tuple whose value is (item1, item2).</returns>
        </member>
        <member name="M:CodeJam.TupleStruct.Create``5(``0,``1,``2,``3,``4)">
            <summary>
            Creates a new 5-tuple.
            </summary>
            <param name="item1">The value of the component 1 of the tuple.</param>
            <typeparam name="T1">The type of the component 1 of the tuple.</typeparam>
            <param name="item2">The value of the component 2 of the tuple.</param>
            <typeparam name="T2">The type of the component 2 of the tuple.</typeparam>
            <param name="item3">The value of the component 3 of the tuple.</param>
            <typeparam name="T3">The type of the component 3 of the tuple.</typeparam>
            <param name="item4">The value of the component 4 of the tuple.</param>
            <typeparam name="T4">The type of the component 4 of the tuple.</typeparam>
            <param name="item5">The value of the component 5 of the tuple.</param>
            <typeparam name="T5">The type of the component 5 of the tuple.</typeparam>
            <returns>A 5-tuple whose value is (item1, item2).</returns>
        </member>
        <member name="M:CodeJam.TupleStruct.Create``6(``0,``1,``2,``3,``4,``5)">
            <summary>
            Creates a new 6-tuple.
            </summary>
            <param name="item1">The value of the component 1 of the tuple.</param>
            <typeparam name="T1">The type of the component 1 of the tuple.</typeparam>
            <param name="item2">The value of the component 2 of the tuple.</param>
            <typeparam name="T2">The type of the component 2 of the tuple.</typeparam>
            <param name="item3">The value of the component 3 of the tuple.</param>
            <typeparam name="T3">The type of the component 3 of the tuple.</typeparam>
            <param name="item4">The value of the component 4 of the tuple.</param>
            <typeparam name="T4">The type of the component 4 of the tuple.</typeparam>
            <param name="item5">The value of the component 5 of the tuple.</param>
            <typeparam name="T5">The type of the component 5 of the tuple.</typeparam>
            <param name="item6">The value of the component 6 of the tuple.</param>
            <typeparam name="T6">The type of the component 6 of the tuple.</typeparam>
            <returns>A 6-tuple whose value is (item1, item2).</returns>
        </member>
        <member name="M:CodeJam.TupleStruct.Create``7(``0,``1,``2,``3,``4,``5,``6)">
            <summary>
            Creates a new 7-tuple.
            </summary>
            <param name="item1">The value of the component 1 of the tuple.</param>
            <typeparam name="T1">The type of the component 1 of the tuple.</typeparam>
            <param name="item2">The value of the component 2 of the tuple.</param>
            <typeparam name="T2">The type of the component 2 of the tuple.</typeparam>
            <param name="item3">The value of the component 3 of the tuple.</param>
            <typeparam name="T3">The type of the component 3 of the tuple.</typeparam>
            <param name="item4">The value of the component 4 of the tuple.</param>
            <typeparam name="T4">The type of the component 4 of the tuple.</typeparam>
            <param name="item5">The value of the component 5 of the tuple.</param>
            <typeparam name="T5">The type of the component 5 of the tuple.</typeparam>
            <param name="item6">The value of the component 6 of the tuple.</param>
            <typeparam name="T6">The type of the component 6 of the tuple.</typeparam>
            <param name="item7">The value of the component 7 of the tuple.</param>
            <typeparam name="T7">The type of the component 7 of the tuple.</typeparam>
            <returns>A 7-tuple whose value is (item1, item2).</returns>
        </member>
        <member name="M:CodeJam.TupleStruct.Create``8(``0,``1,``2,``3,``4,``5,``6,``7)">
            <summary>
            Creates a new 8-tuple.
            </summary>
            <param name="item1">The value of the component 1 of the tuple.</param>
            <typeparam name="T1">The type of the component 1 of the tuple.</typeparam>
            <param name="item2">The value of the component 2 of the tuple.</param>
            <typeparam name="T2">The type of the component 2 of the tuple.</typeparam>
            <param name="item3">The value of the component 3 of the tuple.</param>
            <typeparam name="T3">The type of the component 3 of the tuple.</typeparam>
            <param name="item4">The value of the component 4 of the tuple.</param>
            <typeparam name="T4">The type of the component 4 of the tuple.</typeparam>
            <param name="item5">The value of the component 5 of the tuple.</param>
            <typeparam name="T5">The type of the component 5 of the tuple.</typeparam>
            <param name="item6">The value of the component 6 of the tuple.</param>
            <typeparam name="T6">The type of the component 6 of the tuple.</typeparam>
            <param name="item7">The value of the component 7 of the tuple.</param>
            <typeparam name="T7">The type of the component 7 of the tuple.</typeparam>
            <param name="item8">The value of the component 8 of the tuple.</param>
            <typeparam name="T8">The type of the component 8 of the tuple.</typeparam>
            <returns>A 8-tuple whose value is (item1, item2).</returns>
        </member>
        <member name="T:CodeJam.TupleStruct`2">
            <summary>
            Represents a 2-tuple.
            </summary>
            <typeparam name="T1">The type of the component 1 of the tuple.</typeparam>
            <typeparam name="T2">The type of the component 2 of the tuple.</typeparam>
        </member>
        <member name="P:CodeJam.TupleStruct`2.Item1">
            <summary>
            The value of the component 1 of the tuple.
            </summary>
        </member>
        <member name="P:CodeJam.TupleStruct`2.Item2">
            <summary>
            The value of the component 2 of the tuple.
            </summary>
        </member>
        <member name="M:CodeJam.TupleStruct`2.#ctor(`0,`1)">
            <summary>
            Initialize instance.
            </summary>
        </member>
        <member name="M:CodeJam.TupleStruct`2.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <returns>
            true if the specified object  is equal to the current object; otherwise, false.
            </returns>
            <param name="obj">The object to compare with the current object. </param>
        </member>
        <member name="M:CodeJam.TupleStruct`2.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>
            A 32-bit signed integer that is the hash code for this instance.
            </returns>
        </member>
        <member name="M:CodeJam.TupleStruct`2.ToString">
            <summary>
            Returns the fully qualified type name of this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> containing a fully qualified type name.
            </returns>
        </member>
        <member name="T:CodeJam.TupleStruct`3">
            <summary>
            Represents a 3-tuple.
            </summary>
            <typeparam name="T1">The type of the component 1 of the tuple.</typeparam>
            <typeparam name="T2">The type of the component 2 of the tuple.</typeparam>
            <typeparam name="T3">The type of the component 3 of the tuple.</typeparam>
        </member>
        <member name="P:CodeJam.TupleStruct`3.Item1">
            <summary>
            The value of the component 1 of the tuple.
            </summary>
        </member>
        <member name="P:CodeJam.TupleStruct`3.Item2">
            <summary>
            The value of the component 2 of the tuple.
            </summary>
        </member>
        <member name="P:CodeJam.TupleStruct`3.Item3">
            <summary>
            The value of the component 3 of the tuple.
            </summary>
        </member>
        <member name="M:CodeJam.TupleStruct`3.#ctor(`0,`1,`2)">
            <summary>
            Initialize instance.
            </summary>
        </member>
        <member name="M:CodeJam.TupleStruct`3.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <returns>
            true if the specified object  is equal to the current object; otherwise, false.
            </returns>
            <param name="obj">The object to compare with the current object. </param>
        </member>
        <member name="M:CodeJam.TupleStruct`3.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>
            A 32-bit signed integer that is the hash code for this instance.
            </returns>
        </member>
        <member name="M:CodeJam.TupleStruct`3.ToString">
            <summary>
            Returns the fully qualified type name of this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> containing a fully qualified type name.
            </returns>
        </member>
        <member name="T:CodeJam.TupleStruct`4">
            <summary>
            Represents a 4-tuple.
            </summary>
            <typeparam name="T1">The type of the component 1 of the tuple.</typeparam>
            <typeparam name="T2">The type of the component 2 of the tuple.</typeparam>
            <typeparam name="T3">The type of the component 3 of the tuple.</typeparam>
            <typeparam name="T4">The type of the component 4 of the tuple.</typeparam>
        </member>
        <member name="P:CodeJam.TupleStruct`4.Item1">
            <summary>
            The value of the component 1 of the tuple.
            </summary>
        </member>
        <member name="P:CodeJam.TupleStruct`4.Item2">
            <summary>
            The value of the component 2 of the tuple.
            </summary>
        </member>
        <member name="P:CodeJam.TupleStruct`4.Item3">
            <summary>
            The value of the component 3 of the tuple.
            </summary>
        </member>
        <member name="P:CodeJam.TupleStruct`4.Item4">
            <summary>
            The value of the component 4 of the tuple.
            </summary>
        </member>
        <member name="M:CodeJam.TupleStruct`4.#ctor(`0,`1,`2,`3)">
            <summary>
            Initialize instance.
            </summary>
        </member>
        <member name="M:CodeJam.TupleStruct`4.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <returns>
            true if the specified object  is equal to the current object; otherwise, false.
            </returns>
            <param name="obj">The object to compare with the current object. </param>
        </member>
        <member name="M:CodeJam.TupleStruct`4.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>
            A 32-bit signed integer that is the hash code for this instance.
            </returns>
        </member>
        <member name="M:CodeJam.TupleStruct`4.ToString">
            <summary>
            Returns the fully qualified type name of this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> containing a fully qualified type name.
            </returns>
        </member>
        <member name="T:CodeJam.TupleStruct`5">
            <summary>
            Represents a 5-tuple.
            </summary>
            <typeparam name="T1">The type of the component 1 of the tuple.</typeparam>
            <typeparam name="T2">The type of the component 2 of the tuple.</typeparam>
            <typeparam name="T3">The type of the component 3 of the tuple.</typeparam>
            <typeparam name="T4">The type of the component 4 of the tuple.</typeparam>
            <typeparam name="T5">The type of the component 5 of the tuple.</typeparam>
        </member>
        <member name="P:CodeJam.TupleStruct`5.Item1">
            <summary>
            The value of the component 1 of the tuple.
            </summary>
        </member>
        <member name="P:CodeJam.TupleStruct`5.Item2">
            <summary>
            The value of the component 2 of the tuple.
            </summary>
        </member>
        <member name="P:CodeJam.TupleStruct`5.Item3">
            <summary>
            The value of the component 3 of the tuple.
            </summary>
        </member>
        <member name="P:CodeJam.TupleStruct`5.Item4">
            <summary>
            The value of the component 4 of the tuple.
            </summary>
        </member>
        <member name="P:CodeJam.TupleStruct`5.Item5">
            <summary>
            The value of the component 5 of the tuple.
            </summary>
        </member>
        <member name="M:CodeJam.TupleStruct`5.#ctor(`0,`1,`2,`3,`4)">
            <summary>
            Initialize instance.
            </summary>
        </member>
        <member name="M:CodeJam.TupleStruct`5.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <returns>
            true if the specified object  is equal to the current object; otherwise, false.
            </returns>
            <param name="obj">The object to compare with the current object. </param>
        </member>
        <member name="M:CodeJam.TupleStruct`5.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>
            A 32-bit signed integer that is the hash code for this instance.
            </returns>
        </member>
        <member name="M:CodeJam.TupleStruct`5.ToString">
            <summary>
            Returns the fully qualified type name of this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> containing a fully qualified type name.
            </returns>
        </member>
        <member name="T:CodeJam.TupleStruct`6">
            <summary>
            Represents a 6-tuple.
            </summary>
            <typeparam name="T1">The type of the component 1 of the tuple.</typeparam>
            <typeparam name="T2">The type of the component 2 of the tuple.</typeparam>
            <typeparam name="T3">The type of the component 3 of the tuple.</typeparam>
            <typeparam name="T4">The type of the component 4 of the tuple.</typeparam>
            <typeparam name="T5">The type of the component 5 of the tuple.</typeparam>
            <typeparam name="T6">The type of the component 6 of the tuple.</typeparam>
        </member>
        <member name="P:CodeJam.TupleStruct`6.Item1">
            <summary>
            The value of the component 1 of the tuple.
            </summary>
        </member>
        <member name="P:CodeJam.TupleStruct`6.Item2">
            <summary>
            The value of the component 2 of the tuple.
            </summary>
        </member>
        <member name="P:CodeJam.TupleStruct`6.Item3">
            <summary>
            The value of the component 3 of the tuple.
            </summary>
        </member>
        <member name="P:CodeJam.TupleStruct`6.Item4">
            <summary>
            The value of the component 4 of the tuple.
            </summary>
        </member>
        <member name="P:CodeJam.TupleStruct`6.Item5">
            <summary>
            The value of the component 5 of the tuple.
            </summary>
        </member>
        <member name="P:CodeJam.TupleStruct`6.Item6">
            <summary>
            The value of the component 6 of the tuple.
            </summary>
        </member>
        <member name="M:CodeJam.TupleStruct`6.#ctor(`0,`1,`2,`3,`4,`5)">
            <summary>
            Initialize instance.
            </summary>
        </member>
        <member name="M:CodeJam.TupleStruct`6.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <returns>
            true if the specified object  is equal to the current object; otherwise, false.
            </returns>
            <param name="obj">The object to compare with the current object. </param>
        </member>
        <member name="M:CodeJam.TupleStruct`6.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>
            A 32-bit signed integer that is the hash code for this instance.
            </returns>
        </member>
        <member name="M:CodeJam.TupleStruct`6.ToString">
            <summary>
            Returns the fully qualified type name of this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> containing a fully qualified type name.
            </returns>
        </member>
        <member name="T:CodeJam.TupleStruct`7">
            <summary>
            Represents a 7-tuple.
            </summary>
            <typeparam name="T1">The type of the component 1 of the tuple.</typeparam>
            <typeparam name="T2">The type of the component 2 of the tuple.</typeparam>
            <typeparam name="T3">The type of the component 3 of the tuple.</typeparam>
            <typeparam name="T4">The type of the component 4 of the tuple.</typeparam>
            <typeparam name="T5">The type of the component 5 of the tuple.</typeparam>
            <typeparam name="T6">The type of the component 6 of the tuple.</typeparam>
            <typeparam name="T7">The type of the component 7 of the tuple.</typeparam>
        </member>
        <member name="P:CodeJam.TupleStruct`7.Item1">
            <summary>
            The value of the component 1 of the tuple.
            </summary>
        </member>
        <member name="P:CodeJam.TupleStruct`7.Item2">
            <summary>
            The value of the component 2 of the tuple.
            </summary>
        </member>
        <member name="P:CodeJam.TupleStruct`7.Item3">
            <summary>
            The value of the component 3 of the tuple.
            </summary>
        </member>
        <member name="P:CodeJam.TupleStruct`7.Item4">
            <summary>
            The value of the component 4 of the tuple.
            </summary>
        </member>
        <member name="P:CodeJam.TupleStruct`7.Item5">
            <summary>
            The value of the component 5 of the tuple.
            </summary>
        </member>
        <member name="P:CodeJam.TupleStruct`7.Item6">
            <summary>
            The value of the component 6 of the tuple.
            </summary>
        </member>
        <member name="P:CodeJam.TupleStruct`7.Item7">
            <summary>
            The value of the component 7 of the tuple.
            </summary>
        </member>
        <member name="M:CodeJam.TupleStruct`7.#ctor(`0,`1,`2,`3,`4,`5,`6)">
            <summary>
            Initialize instance.
            </summary>
        </member>
        <member name="M:CodeJam.TupleStruct`7.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <returns>
            true if the specified object  is equal to the current object; otherwise, false.
            </returns>
            <param name="obj">The object to compare with the current object. </param>
        </member>
        <member name="M:CodeJam.TupleStruct`7.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>
            A 32-bit signed integer that is the hash code for this instance.
            </returns>
        </member>
        <member name="M:CodeJam.TupleStruct`7.ToString">
            <summary>
            Returns the fully qualified type name of this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> containing a fully qualified type name.
            </returns>
        </member>
        <member name="T:CodeJam.TupleStruct`8">
            <summary>
            Represents a 8-tuple.
            </summary>
            <typeparam name="T1">The type of the component 1 of the tuple.</typeparam>
            <typeparam name="T2">The type of the component 2 of the tuple.</typeparam>
            <typeparam name="T3">The type of the component 3 of the tuple.</typeparam>
            <typeparam name="T4">The type of the component 4 of the tuple.</typeparam>
            <typeparam name="T5">The type of the component 5 of the tuple.</typeparam>
            <typeparam name="T6">The type of the component 6 of the tuple.</typeparam>
            <typeparam name="T7">The type of the component 7 of the tuple.</typeparam>
            <typeparam name="T8">The type of the component 8 of the tuple.</typeparam>
        </member>
        <member name="P:CodeJam.TupleStruct`8.Item1">
            <summary>
            The value of the component 1 of the tuple.
            </summary>
        </member>
        <member name="P:CodeJam.TupleStruct`8.Item2">
            <summary>
            The value of the component 2 of the tuple.
            </summary>
        </member>
        <member name="P:CodeJam.TupleStruct`8.Item3">
            <summary>
            The value of the component 3 of the tuple.
            </summary>
        </member>
        <member name="P:CodeJam.TupleStruct`8.Item4">
            <summary>
            The value of the component 4 of the tuple.
            </summary>
        </member>
        <member name="P:CodeJam.TupleStruct`8.Item5">
            <summary>
            The value of the component 5 of the tuple.
            </summary>
        </member>
        <member name="P:CodeJam.TupleStruct`8.Item6">
            <summary>
            The value of the component 6 of the tuple.
            </summary>
        </member>
        <member name="P:CodeJam.TupleStruct`8.Item7">
            <summary>
            The value of the component 7 of the tuple.
            </summary>
        </member>
        <member name="P:CodeJam.TupleStruct`8.Item8">
            <summary>
            The value of the component 8 of the tuple.
            </summary>
        </member>
        <member name="M:CodeJam.TupleStruct`8.#ctor(`0,`1,`2,`3,`4,`5,`6,`7)">
            <summary>
            Initialize instance.
            </summary>
        </member>
        <member name="M:CodeJam.TupleStruct`8.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <returns>
            true if the specified object  is equal to the current object; otherwise, false.
            </returns>
            <param name="obj">The object to compare with the current object. </param>
        </member>
        <member name="M:CodeJam.TupleStruct`8.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>
            A 32-bit signed integer that is the hash code for this instance.
            </returns>
        </member>
        <member name="M:CodeJam.TupleStruct`8.ToString">
            <summary>
            Returns the fully qualified type name of this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> containing a fully qualified type name.
            </returns>
        </member>
        <member name="T:CodeJam.Threading.AsyncOperationHelper">
            <summary>
            Extension and utility methods for <see cref="T:System.ComponentModel.AsyncOperationManager"/> and <see cref="T:System.ComponentModel.AsyncOperation"/>
            </summary>
        </member>
        <member name="M:CodeJam.Threading.AsyncOperationHelper.CreateOperation">
            <summary>
            Returns an <see cref="T:System.ComponentModel.AsyncOperation"/> for tracking the duration of a particular asynchronous operation.
            </summary>
            <returns>
            An <see cref="T:System.ComponentModel.AsyncOperation"/> that you can use to track the duration of an asynchronous method invocation.
            </returns>
        </member>
        <member name="M:CodeJam.Threading.AsyncOperationHelper.Post(System.ComponentModel.AsyncOperation,System.Action)">
            <summary>
            Invokes a <paramref name="runner"/> on the thread or context appropriate for the application model.
            </summary>
            <param name="asyncOp"></param>
            <param name="runner">
            A <see cref="T:System.Action"/> that wraps the delegate to be called when the operation ends.
            </param>
        </member>
        <member name="M:CodeJam.Threading.AsyncOperationHelper.PostOperationCompleted(System.ComponentModel.AsyncOperation,System.Action)">
            <summary>
            Ends the lifetime of an asynchronous operation.
            </summary>
            <param name="asyncOp"></param>
            <param name="runner">A <see cref="T:System.Action"/> that wraps the delegate to be called when the operation ends.</param>
        </member>
        <member name="M:CodeJam.Threading.AsyncOperationHelper.Send(System.ComponentModel.AsyncOperation,System.Action)">
            <summary>
            Invokes a <paramref name="runner"/> on the thread or context appropriate for the application model and waits for
            it completion.
            </summary>
            <param name="asyncOp"></param>
            <param name="runner">
            A <see cref="T:System.Action"/> that wraps the delegate to be called when the operation ends.
            </param>
        </member>
        <member name="M:CodeJam.Threading.AsyncOperationHelper.Send``1(System.ComponentModel.AsyncOperation,System.Func{``0})">
            <summary>
            Invokes a <paramref name="runner"/> on the thread or context appropriate for the application model and returns
            result.
            </summary>
            <param name="asyncOp"></param>
            <param name="runner">
            A <see cref="T:System.Func`1"/> that wraps the delegate to be called when the operation ends.
            </param>
        </member>
        <member name="M:CodeJam.Threading.AsyncOperationHelper.RunAsync(System.Action{System.ComponentModel.AsyncOperation})">
            <summary>
            Gets thread from pool and run <paramref name="runner"/> inside it.
            </summary>
            <param name="runner">Action to run inside created thread</param>
        </member>
        <member name="M:CodeJam.Threading.AsyncOperationHelper.RunAsync(System.Action{System.ComponentModel.AsyncOperation},System.Action)">
            <summary>
            Gets thread from pool and run <paramref name="runner"/> inside it.
            </summary>
            <param name="runner">Action to run inside created thread</param>
            <param name="completeHandler">
            Action called after <paramref name="runner"/> complete execution. Synchronized with method calling thread.
            </param>
        </member>
        <member name="T:CodeJam.Threading.ConcurrentLazyDictionary`2">
            <summary>
            Dictionary with lazy values initialization.
            </summary>
            <remarks>
            Thread safe.
            </remarks>
        </member>
        <member name="M:CodeJam.Threading.ConcurrentLazyDictionary`2.#ctor(System.Func{`0,`1},System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initialize instance.
            </summary>
            <param name="valueFactory">Function to create value on demand.</param>
            <param name="comparer">Key comparer.</param>
        </member>
        <member name="M:CodeJam.Threading.ConcurrentLazyDictionary`2.#ctor(System.Func{`0,`1})">
            <summary>
            Initiailze instance.
            </summary>
            <param name="valueFactory">Function to create value on demand.</param>
        </member>
        <member name="M:CodeJam.Threading.ConcurrentLazyDictionary`2.Clear">
            <summary>
            Clears all created values
            </summary>
        </member>
        <member name="M:CodeJam.Threading.ConcurrentLazyDictionary`2.ContainsKey(`0)">
            <summary>Determines whether the read-only dictionary contains an element that has the specified key.</summary>
            <returns>true if the read-only dictionary contains an element that has the specified key; otherwise, false.</returns>
            <param name="key">The key to locate.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="key" /> is null.</exception>
        </member>
        <member name="M:CodeJam.Threading.ConcurrentLazyDictionary`2.TryGetValue(`0,`1@)">
            <summary>Gets the value that is associated with the specified key.</summary>
            <returns>true if the object that implements the <see cref="T:System.Collections.Generic.IReadOnlyDictionary`2" /> interface contains an element that has the specified key; otherwise, false.</returns>
            <param name="key">The key to locate.</param>
            <param name="value">When this method returns, the value associated with the specified key, if the key is found; otherwise, the default value for the type of the <paramref name="value" /> parameter. This parameter is passed uninitialized.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="key" /> is null.</exception>
        </member>
        <member name="P:CodeJam.Threading.ConcurrentLazyDictionary`2.Item(`0)">
            <summary>Gets the element that has the specified key in the read-only dictionary.</summary>
            <returns>The element that has the specified key in the read-only dictionary.</returns>
            <param name="key">The key to locate.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="key" /> is null.</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">The property is retrieved and <paramref name="key" /> is not found. </exception>
        </member>
        <member name="P:CodeJam.Threading.ConcurrentLazyDictionary`2.Keys">
            <summary>Gets an enumerable collection that contains the keys in the read-only dictionary. </summary>
            <returns>An enumerable collection that contains the keys in the read-only dictionary.</returns>
        </member>
        <member name="P:CodeJam.Threading.ConcurrentLazyDictionary`2.Values">
            <summary>Gets an enumerable collection that contains the values in the read-only dictionary.</summary>
            <returns>An enumerable collection that contains the values in the read-only dictionary.</returns>
        </member>
        <member name="T:CodeJam.Threading.InterlockedOperations">
            <summary>
            Provides a helper class for initializing a values in a thread-safe manner.
            </summary>
        </member>
        <member name="M:CodeJam.Threading.InterlockedOperations.Initialize``1(``0@,``0)">
            <summary>
            Initialize the value referenced by <paramref name="target"/> in a thread-safe manner.
            The value is changed to <paramref name="value"/> only if the current value is null.
            </summary>
            <typeparam name="T">Type of value.</typeparam>
            <param name="target">Reference to the target location.</param>
            <param name="value">The value to use if the target is currently null.</param>
            <returns>
            The new value referenced by <paramref name="target"/>.
            Note that this is nearly always more useful than the usual
            return from <see cref="M:System.Threading.Interlocked.CompareExchange``1(``0@,``0,``0)"/>
            because it saves another read to <paramref name="target"/>.
            </returns>
        </member>
        <member name="M:CodeJam.Threading.InterlockedOperations.Initialize``1(``0@,``0,``0)">
            <summary>
            Initialize the value referenced by <paramref name="target"/> in a thread-safe manner.
            The value is changed to <paramref name="initializedValue"/> only if the current value
            is <paramref name="uninitializedValue"/>.
            </summary>
            <typeparam name="T">Type of value.</typeparam>
            <param name="target">Reference to the target location.</param>
            <param name="initializedValue">The value to use if the target is currently uninitialized.</param>
            <param name="uninitializedValue">The uninitialized value.</param>
            <returns>
            The new value referenced by <paramref name="target"/>.
            Note that this is nearly always more useful than the usual
            return from <see cref="M:System.Threading.Interlocked.CompareExchange``1(``0@,``0,``0)"/>
            because it saves another read to <paramref name="target"/>.
            </returns>
        </member>
        <member name="T:CodeJam.Threading.ParallelExtensions">
            <summary>
            Parallel extensions.
            </summary>
        </member>
        <member name="M:CodeJam.Threading.ParallelExtensions.RunInParallel``2(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{``0,``1},System.Int32,System.Action{``1},System.String)">
            <summary>
            Implements Provider-Consumer pattern.
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TTarget"></typeparam>
            <param name="source">Incoming data.</param>
            <param name="providerCount">Number of provider threads.</param>
            <param name="providerFunc">Provider function</param>
            <param name="consumerCount">Number of consumer threads.</param>
            <param name="consumerAction">Consumer action.</param>
            <param name="processName">Process name pattern.</param>
        </member>
        <member name="M:CodeJam.Threading.ParallelExtensions.RunInParallel``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Int32,System.Action{``1},System.String)">
            <summary>
            Implements Provider-Consumer pattern.
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TTarget"></typeparam>
            <param name="source">Incoming data.</param>
            <param name="providerFunc">Provider function</param>
            <param name="consumerCount">Number of consumer threads.</param>
            <param name="consumerAction">Consumer action.</param>
            <param name="processName">Process name pattern.</param>
        </member>
        <member name="M:CodeJam.Threading.ParallelExtensions.RunInParallel``2(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{``0,``1},System.Action{``1},System.String)">
            <summary>
            Implements Provider-Consumer pattern.
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TTarget"></typeparam>
            <param name="source">Incoming data.</param>
            <param name="providerCount">Number of provider threads.</param>
            <param name="providerFunc">Provider function</param>
            <param name="consumerAction">Consumer action.</param>
            <param name="processName">Process name pattern.</param>
        </member>
        <member name="M:CodeJam.Threading.ParallelExtensions.RunInParallel``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Action{``1},System.String)">
            <summary>
            Implements Provider-Consumer pattern.
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TTarget"></typeparam>
            <param name="source">Incoming data.</param>
            <param name="providerFunc">Provider function</param>
            <param name="consumerAction">Consumer action.</param>
            <param name="processName">Process name pattern.</param>
        </member>
        <member name="M:CodeJam.Threading.ParallelExtensions.RunInParallel(System.Collections.Generic.IEnumerable{System.Action},System.Int32,System.String)">
            <summary>
            Runs in parallel provided source of actions.
            </summary>
            <param name="source">Actions to run.</param>
            <param name="parallelCount">number of threads to use.</param>
            <param name="processName">Process name pattern.</param>
        </member>
        <member name="M:CodeJam.Threading.ParallelExtensions.RunInParallel(System.Collections.Generic.IEnumerable{System.Action},System.String)">
            <summary>
            Runs in parallel provided source of actions.
            </summary>
            <param name="source">Actions to run.</param>
            <param name="processName">Process name pattern.</param>
        </member>
        <member name="M:CodeJam.Threading.ParallelExtensions.RunInParallel``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Action{``0},System.String)">
            <summary>
            Runs in parallel actions for provided data source.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source">Source to run.</param>
            <param name="parallelCount">number of threads to use.</param>
            <param name="action">Action to run.</param>
            <param name="processName">Process name.</param>
        </member>
        <member name="M:CodeJam.Threading.ParallelExtensions.RunInParallel``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0},System.String)">
            <summary>
            Runs in parallel actions for provided data source.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source">Source to run.</param>
            <param name="action">Action to run.</param>
            <param name="processName">Process name.</param>
        </member>
        <member name="T:CodeJam.Threading.ReaderWriterLockSlimExtensions">
            <summary>
            Represents the extenion methods for <see cref="T:System.Threading.ReaderWriterLockSlim"/>.
            </summary>
        </member>
        <member name="M:CodeJam.Threading.ReaderWriterLockSlimExtensions.GetReadLock(System.Threading.ReaderWriterLockSlim)">
            <summary>
            Tries to enter the lock in read mode.
            </summary>
            <param name="readerWriterLock">The <see cref="T:System.Threading.ReaderWriterLockSlim"/> instance.</param>
            <returns>
            The <see cref="T:System.IDisposable"/> object that reduce the recursion count for read mode, and exits read mode if the
            resulting count is 0 (zero).
            </returns>
        </member>
        <member name="M:CodeJam.Threading.ReaderWriterLockSlimExtensions.GetWriteLock(System.Threading.ReaderWriterLockSlim)">
            <summary>
            Tries to enter the lock in write mode.
            </summary>
            <param name="readerWriterLock">The <see cref="T:System.Threading.ReaderWriterLockSlim"/> instance.</param>
            <returns>
            The <see cref="T:System.IDisposable"/> object that reduce the recursion count for write mode, and exits write mode if the
            resulting count is 0 (zero).
            </returns>
        </member>
        <member name="M:CodeJam.Threading.ReaderWriterLockSlimExtensions.GetUpgradeableReadLock(System.Threading.ReaderWriterLockSlim)">
            <summary>
            Tries to enter the lock in upgradeable mode.
            </summary>
            <param name="readerWriterLock">The <see cref="T:System.Threading.ReaderWriterLockSlim"/> instance.</param>
            <returns>
            The <see cref="T:System.IDisposable"/> object that reduce the recursion count for upgradeable mode, and exits upgradeable
            mode if the resulting count is 0 (zero).
            </returns>
        </member>
        <member name="T:CodeJam.Threading.ReaderWriterLockSlimExtensions.ReadLockScope">
            <summary>
            The <see cref="T:System.Threading.ReaderWriterLockSlim"/> wrapper.
            </summary>
        </member>
        <member name="M:CodeJam.Threading.ReaderWriterLockSlimExtensions.ReadLockScope.#ctor(System.Threading.ReaderWriterLockSlim)">
            <summary>
            Initializes a new instance of the <see cref="T:CodeJam.Threading.ReaderWriterLockSlimExtensions.ReadLockScope"/> class.
            </summary>
            <param name="readerWriterLock">The <see cref="T:System.Threading.ReaderWriterLockSlim"/> instance.</param>
        </member>
        <member name="M:CodeJam.Threading.ReaderWriterLockSlimExtensions.ReadLockScope.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:CodeJam.Threading.ReaderWriterLockSlimExtensions.WriteLockScope">
            <summary>
            The <see cref="T:System.Threading.ReaderWriterLockSlim"/> wrapper.
            </summary>
        </member>
        <member name="M:CodeJam.Threading.ReaderWriterLockSlimExtensions.WriteLockScope.#ctor(System.Threading.ReaderWriterLockSlim)">
            <summary>
            Initializes a new instance of the <see cref="T:CodeJam.Threading.ReaderWriterLockSlimExtensions.WriteLockScope"/> class.
            </summary>
            <param name="readerWriterLock">The <see cref="T:System.Threading.ReaderWriterLockSlim"/> instance.</param>
        </member>
        <member name="M:CodeJam.Threading.ReaderWriterLockSlimExtensions.WriteLockScope.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:CodeJam.Threading.ReaderWriterLockSlimExtensions.UpgradeableReadLockScope">
            <summary>
            The <see cref="T:System.Threading.ReaderWriterLockSlim"/> wrapper.
            </summary>
        </member>
        <member name="M:CodeJam.Threading.ReaderWriterLockSlimExtensions.UpgradeableReadLockScope.#ctor(System.Threading.ReaderWriterLockSlim)">
            <summary>
            Initializes a new instance of the <see cref="T:CodeJam.Threading.ReaderWriterLockSlimExtensions.UpgradeableReadLockScope"/> class.
            </summary>
            <param name="readerWriterLock">The <see cref="T:System.Threading.ReaderWriterLockSlim"/> instance.</param>
        </member>
        <member name="M:CodeJam.Threading.ReaderWriterLockSlimExtensions.UpgradeableReadLockScope.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:CodeJam.DisposableExtensions">
            <summary>
            The <see cref="T:System.IDisposable"/> extensions.
            </summary>
        </member>
        <member name="M:CodeJam.DisposableExtensions.DisposeAll(System.Collections.Generic.IEnumerable{System.IDisposable})">
            <summary>
            Invokes the dispose for each item in the <paramref name="disposables"/>.
            </summary>
            <param name="disposables">The multiple <see cref="T:System.IDisposable"/> instances.</param>
        </member>
        <member name="M:CodeJam.DisposableExtensions.DisposeAll(System.Collections.Generic.IEnumerable{System.IDisposable},System.Func{System.Exception,System.Boolean})">
            <summary>
            Invokes the dispose for each item in the <paramref name="disposables"/>.
            </summary>
            <param name="disposables">The multiple <see cref="T:System.IDisposable"/> instances.</param>
            <param name="exceptionHandler">The exception handler.</param>
        </member>
        <member name="T:CodeJam.Disposable">
            <summary>
            Helper methods for <see cref="T:System.IDisposable"/>
            </summary>
        </member>
        <member name="F:CodeJam.Disposable.Empty">
            <summary>
            <see cref="T:System.IDisposable"/> instance without any code in <see cref="M:System.IDisposable.Dispose"/>.
            </summary>
        </member>
        <member name="M:CodeJam.Disposable.Create(System.Action)">
            <summary>
            Creates <see cref="T:System.IDisposable"/> instanse that calls <paramref name="disposeAction"/> on disposing.
            </summary>
        </member>
        <member name="M:CodeJam.Disposable.Merge(System.Collections.Generic.IEnumerable{System.IDisposable})">
            <summary>
            Combine multiple <see cref="T:System.IDisposable"/> instances into single one.
            </summary>
        </member>
        <member name="M:CodeJam.Disposable.Merge(System.IDisposable[])">
            <summary>
            Combine multiple <see cref="T:System.IDisposable"/> instances into single one.
            </summary>
        </member>
        <member name="T:CodeJam.Disposable.EmptyDisposable">
            <summary>
            <see cref="T:System.IDisposable"/> implementation with no action on <see cref="M:CodeJam.Disposable.EmptyDisposable.Dispose"/>
            </summary>
        </member>
        <member name="M:CodeJam.Disposable.EmptyDisposable.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:CodeJam.Disposable.AnonymousDisposable">
            <summary>
            <see cref="T:System.IDisposable"/> implementation that calls supplied action on <see cref="M:CodeJam.Disposable.AnonymousDisposable.Dispose"/>.
            </summary>
        </member>
        <member name="M:CodeJam.Disposable.AnonymousDisposable.#ctor(System.Action)">
            <summary>
            Initialize instance.
            </summary>
            <param name="disposeAction"></param>
        </member>
        <member name="M:CodeJam.Disposable.AnonymousDisposable.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:CodeJam.Fn">
            <summary>
            Helper methods for <see cref="T:System.Func`1"/> delegate.
            </summary>
        </member>
        <member name="F:CodeJam.Fn.True">
            <summary>
            Gets the function that always returns true.
            </summary>
        </member>
        <member name="F:CodeJam.Fn.False">
            <summary>
            Gets the function that always returns false.
            </summary>
        </member>
        <member name="T:CodeJam.Fn`1">
            <summary>
            Helper methods for <see cref="T:System.Func`1"/>
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:CodeJam.Fn`1.True">
            <summary>
            The function that always returns true.
            </summary>
        </member>
        <member name="F:CodeJam.Fn`1.False">
            <summary>
            The function that returns false.
            </summary>
        </member>
        <member name="F:CodeJam.Fn`1.TruePredicate">
            <summary>
            The function that returns true.
            </summary>
        </member>
        <member name="F:CodeJam.Fn`1.FalsePredicate">
            <summary>
            The function that always returns false.
            </summary>
        </member>
        <member name="F:CodeJam.Fn`1.Identity">
            <summary>
            The function that returns the same object which was passed as parameter.
            </summary>
        </member>
        <member name="F:CodeJam.Fn`1.IdentityConverter">
            <summary>
            The function that returns the same object which was passed as parameter.
            </summary>
        </member>
        <member name="F:CodeJam.Fn`1.IsNull">
            <summary>
            The function that returns true if an object is null.
            </summary>
        </member>
        <member name="F:CodeJam.Fn`1.IsNotNull">
            <summary>
            The function that returns true if an object is not null.
            </summary>
        </member>
        <member name="T:CodeJam.ObjectPools.SharedPools">
            <summary>
            Shared object pool for roslyn
            
            Use this shared pool if only concern is reducing object allocations.
            if perf of an object pool itself is also a concern, use ObjectPool directly.
            
            For example, if you want to create a million of small objects within a second, 
            use the ObjectPool directly. it should have much less overhead than using this.
            </summary>
        </member>
        <member name="M:CodeJam.ObjectPools.SharedPools.BigDefault``1">
            <summary>
            The pool that uses default constructor with 100 elements pooled
            </summary>
        </member>
        <member name="M:CodeJam.ObjectPools.SharedPools.Default``1">
            <summary>
            The pool that uses default constructor with 20 elements pooled
            </summary>
        </member>
        <member name="T:CodeJam.ObjectPools.SharedPoolExtensions">
            <summary>
            The <see cref="T:CodeJam.ObjectPools.ObjectPool`1"/> extension.
            </summary>
        </member>
        <member name="M:CodeJam.ObjectPools.SharedPoolExtensions.GetPooledObject(CodeJam.ObjectPools.ObjectPool{System.Text.StringBuilder})">
            <summary>
            Gets an <see cref="T:CodeJam.ObjectPools.PooledObject`1"/> from the specified pool that can be released automatically.
            </summary>
            <param name="pool">The object pool to allocate from.</param>
            <returns>
            The <see cref="T:CodeJam.ObjectPools.PooledObject`1"/> instance.
            </returns>
        </member>
        <member name="M:CodeJam.ObjectPools.SharedPoolExtensions.GetPooledObject``1(CodeJam.ObjectPools.ObjectPool{System.Collections.Generic.Stack{``0}})">
            <summary>
            Gets an <see cref="T:CodeJam.ObjectPools.PooledObject`1"/> from the specified pool that can be released automatically.
            </summary>
            <param name="pool">The object pool to allocate from.</param>
            <returns>
            The <see cref="T:CodeJam.ObjectPools.PooledObject`1"/> instance.
            </returns>
        </member>
        <member name="M:CodeJam.ObjectPools.SharedPoolExtensions.GetPooledObject``1(CodeJam.ObjectPools.ObjectPool{System.Collections.Generic.Queue{``0}})">
            <summary>
            Gets an <see cref="T:CodeJam.ObjectPools.PooledObject`1"/> from the specified pool that can be released automatically.
            </summary>
            <param name="pool">The object pool to allocate from.</param>
            <returns>
            The <see cref="T:CodeJam.ObjectPools.PooledObject`1"/> instance.
            </returns>
        </member>
        <member name="M:CodeJam.ObjectPools.SharedPoolExtensions.GetPooledObject``1(CodeJam.ObjectPools.ObjectPool{System.Collections.Generic.HashSet{``0}})">
            <summary>
            Gets an <see cref="T:CodeJam.ObjectPools.PooledObject`1"/> from the specified pool that can be released automatically.
            </summary>
            <param name="pool">The object pool to allocate from.</param>
            <returns>
            The <see cref="T:CodeJam.ObjectPools.PooledObject`1"/> instance.
            </returns>
        </member>
        <member name="M:CodeJam.ObjectPools.SharedPoolExtensions.GetPooledObject``2(CodeJam.ObjectPools.ObjectPool{System.Collections.Generic.Dictionary{``0,``1}})">
            <summary>
            Gets an <see cref="T:CodeJam.ObjectPools.PooledObject`1"/> from the specified pool that can be released automatically.
            </summary>
            <param name="pool">The object pool to allocate from.</param>
            <returns>
            The <see cref="T:CodeJam.ObjectPools.PooledObject`1"/> instance.
            </returns>
        </member>
        <member name="M:CodeJam.ObjectPools.SharedPoolExtensions.GetPooledObject``1(CodeJam.ObjectPools.ObjectPool{System.Collections.Generic.List{``0}})">
            <summary>
            Gets an <see cref="T:CodeJam.ObjectPools.PooledObject`1"/> from the specified pool that can be released automatically.
            </summary>
            <param name="pool">The object pool to allocate from.</param>
            <returns>
            The <see cref="T:CodeJam.ObjectPools.PooledObject`1"/> instance.
            </returns>
        </member>
        <member name="M:CodeJam.ObjectPools.SharedPoolExtensions.GetPooledObject``1(CodeJam.ObjectPools.ObjectPool{``0})">
            <summary>
            Gets an <see cref="T:CodeJam.ObjectPools.PooledObject`1"/> from the specified pool that can be released automatically.
            </summary>
            <param name="pool">The object pool to allocate from.</param>
            <returns>
            The <see cref="T:CodeJam.ObjectPools.PooledObject`1"/> instance.
            </returns>
        </member>
        <member name="M:CodeJam.ObjectPools.SharedPoolExtensions.GetPooledObject``1(CodeJam.ObjectPools.ObjectPool{``0},System.Action{CodeJam.ObjectPools.ObjectPool{``0},``0})">
            <summary>
            Gets an <see cref="T:CodeJam.ObjectPools.PooledObject`1"/> from the specified pool that can be released automatically.
            </summary>
            <param name="pool">The object pool to allocate from.</param>
            <param name="releaser">The function to release object.</param>
            <returns>
            The <see cref="T:CodeJam.ObjectPools.PooledObject`1"/> instance.
            </returns>
        </member>
        <member name="M:CodeJam.ObjectPools.SharedPoolExtensions.AllocateAndClear(CodeJam.ObjectPools.ObjectPool{System.Text.StringBuilder})">
            <summary>
            Allocates a <see cref="T:System.Text.StringBuilder"/> and clears a wrapped <see cref="T:System.Text.StringBuilder"/> instance.
            </summary>
            <param name="pool">The object pool to allocate from.</param>
            <returns>
            The <see cref="T:System.Text.StringBuilder"/> instance.
            </returns>
        </member>
        <member name="M:CodeJam.ObjectPools.SharedPoolExtensions.AllocateAndClear``1(CodeJam.ObjectPools.ObjectPool{System.Collections.Generic.Stack{``0}})">
            <summary>
            Allocates a <see cref="T:System.Collections.Generic.Stack`1"/> and clears a wrapped <see cref="T:System.Collections.Generic.Stack`1"/> instance.
            </summary>
            <param name="pool">The object pool to allocate from.</param>
            <returns>
            The <see cref="T:System.Collections.Generic.Stack`1"/> instance.
            </returns>
        </member>
        <member name="M:CodeJam.ObjectPools.SharedPoolExtensions.AllocateAndClear``1(CodeJam.ObjectPools.ObjectPool{System.Collections.Generic.Queue{``0}})">
            <summary>
            Allocates a <see cref="T:System.Collections.Generic.Queue`1"/> and clears a wrapped <see cref="T:System.Collections.Generic.Queue`1"/> instance.
            </summary>
            <param name="pool">The object pool to allocate from.</param>
            <returns>
            The <see cref="T:System.Collections.Generic.Queue`1"/> instance.
            </returns>
        </member>
        <member name="M:CodeJam.ObjectPools.SharedPoolExtensions.AllocateAndClear``1(CodeJam.ObjectPools.ObjectPool{System.Collections.Generic.HashSet{``0}})">
            <summary>
            Allocates a <see cref="T:System.Collections.Generic.HashSet`1"/> and clears a wrapped <see cref="T:System.Collections.Generic.HashSet`1"/> instance.
            </summary>
            <param name="pool">The object pool to allocate from.</param>
            <returns>
            The <see cref="T:System.Collections.Generic.HashSet`1"/> instance.
            </returns>
        </member>
        <member name="M:CodeJam.ObjectPools.SharedPoolExtensions.AllocateAndClear``2(CodeJam.ObjectPools.ObjectPool{System.Collections.Generic.Dictionary{``0,``1}})">
            <summary>
            Allocates a <see cref="T:System.Collections.Generic.Dictionary`2"/> and clears a wrapped <see cref="T:System.Collections.Generic.Dictionary`2"/> instance.
            </summary>
            <param name="pool">The object pool to allocate from.</param>
            <returns>
            The <see cref="T:System.Collections.Generic.Dictionary`2"/> instance.
            </returns>
        </member>
        <member name="M:CodeJam.ObjectPools.SharedPoolExtensions.AllocateAndClear``1(CodeJam.ObjectPools.ObjectPool{System.Collections.Generic.List{``0}})">
            <summary>
            Allocates a <see cref="T:System.Collections.Generic.List`1"/> and clears a wrapped <see cref="T:System.Collections.Generic.List`1"/> instance.
            </summary>
            <param name="pool">The object pool to allocate from.</param>
            <returns>
            The <see cref="T:System.Collections.Generic.List`1"/> instance.
            </returns>
        </member>
        <member name="M:CodeJam.ObjectPools.SharedPoolExtensions.ClearAndFree(CodeJam.ObjectPools.ObjectPool{System.Text.StringBuilder},System.Text.StringBuilder)">
            <summary>
            Clears and returns objects to the pool.
            </summary>
            <param name="pool">The object pool to return to.</param>
            <param name="sb">The <see cref="T:System.Text.StringBuilder"/> to release.</param>
        </member>
        <member name="M:CodeJam.ObjectPools.SharedPoolExtensions.ClearAndFree``1(CodeJam.ObjectPools.ObjectPool{System.Collections.Generic.HashSet{``0}},System.Collections.Generic.HashSet{``0})">
            <summary>
            Clears and returns objects to the pool.
            </summary>
            <param name="pool">The object pool to return to.</param>
            <param name="set">The <see cref="T:System.Collections.Generic.HashSet`1"/> to release.</param>
        </member>
        <member name="M:CodeJam.ObjectPools.SharedPoolExtensions.ClearAndFree``1(CodeJam.ObjectPools.ObjectPool{System.Collections.Generic.Stack{``0}},System.Collections.Generic.Stack{``0})">
            <summary>
            Clears and returns objects to the pool.
            </summary>
            <param name="pool">The object pool to return to.</param>
            <param name="stack">The <see cref="T:System.Collections.Generic.Stack`1"/> to release.</param>
        </member>
        <member name="M:CodeJam.ObjectPools.SharedPoolExtensions.ClearAndFree``1(CodeJam.ObjectPools.ObjectPool{System.Collections.Generic.Queue{``0}},System.Collections.Generic.Queue{``0})">
            <summary>
            Clears and returns objects to the pool.
            </summary>
            <param name="pool">The object pool to return to.</param>
            <param name="queue">The <see cref="T:System.Collections.Generic.Queue`1"/> to release.</param>
        </member>
        <member name="M:CodeJam.ObjectPools.SharedPoolExtensions.ClearAndFree``2(CodeJam.ObjectPools.ObjectPool{System.Collections.Generic.Dictionary{``0,``1}},System.Collections.Generic.Dictionary{``0,``1})">
            <summary>
            Clears and returns objects to the pool.
            </summary>
            <param name="pool">The object pool to return to.</param>
            <param name="map">The <see cref="T:System.Collections.Generic.Dictionary`2"/> to release.</param>
        </member>
        <member name="M:CodeJam.ObjectPools.SharedPoolExtensions.ClearAndFree``1(CodeJam.ObjectPools.ObjectPool{System.Collections.Generic.List{``0}},System.Collections.Generic.List{``0})">
            <summary>
            Clears and returns objects to the pool.
            </summary>
            <param name="pool">The object pool to return to.</param>
            <param name="list">The <see cref="T:System.Collections.Generic.List`1"/> to release.</param>
        </member>
        <member name="T:CodeJam.ObjectPools.PooledObject`1">
            <summary>
            The RAII object to automatically release pooled object when its owning pool.
            </summary>
        </member>
        <member name="P:CodeJam.ObjectPools.PooledObject`1.Object">
            <summary>
            Gets the object instance.
            </summary>
        </member>
        <member name="M:CodeJam.ObjectPools.PooledObject`1.#ctor(CodeJam.ObjectPools.ObjectPool{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:CodeJam.ObjectPools.PooledObject`1"/> class.
            </summary>
            <param name="pool">The object pool.</param>
        </member>
        <member name="M:CodeJam.ObjectPools.PooledObject`1.#ctor(CodeJam.ObjectPools.ObjectPool{`0},System.Action{CodeJam.ObjectPools.ObjectPool{`0},`0})">
            <summary>
            Initializes a new instance of the <see cref="T:CodeJam.ObjectPools.PooledObject`1"/> class.
            </summary>
            <param name="pool">The object pool.</param>
            <param name="releaser">The function to release object.</param>
        </member>
        <member name="M:CodeJam.ObjectPools.PooledObject`1.#ctor(CodeJam.ObjectPools.ObjectPool{`0},System.Func{CodeJam.ObjectPools.ObjectPool{`0},`0},System.Action{CodeJam.ObjectPools.ObjectPool{`0},`0})">
            <summary>
            Initializes a new instance of the <see cref="T:CodeJam.ObjectPools.PooledObject`1"/> class.
            </summary>
            <param name="pool">The object pool.</param>
            <param name="allocator">Th function to allocate object from the specified pool.</param>
            <param name="releaser">The function to release object.</param>
        </member>
        <member name="M:CodeJam.ObjectPools.PooledObject`1.Dispose">
            <summary>
            Returns object to the pool.
            </summary>
        </member>
        <member name="T:CodeJam.ObjectPools.ObjectPool`1">
            <summary>
            Generic implementation of object pooling pattern with predefined pool size limit. The main
            purpose is that limited number of frequently used objects can be kept in the pool for
            further recycling.
            
            Notes: 
            1) it is not the goal to keep all returned objects. Pool is not meant for storage. If there
               is no space in the pool, extra returned objects will be dropped.
            
            2) it is implied that if object was obtained from a pool, the caller will return it back in
               a relatively short time. Keeping checked out objects for long durations is ok, but 
               reduces usefulness of pooling. Just new up your own.
            
            Not returning objects to the pool in not detrimental to the pool's work, but is a bad practice. 
            Rationale: 
               If there is no intent for reusing the object, do not use pool - just use "new". 
            </summary>
        </member>
        <member name="T:CodeJam.ObjectPools.ObjectPool`1.Factory">
            <remarks>
            Not using System.Func{T} because this file is linked into the (debugger) Formatter,
            which does not have that type (since it compiles against .NET 2.0).
            </remarks>
        </member>
        <member name="M:CodeJam.ObjectPools.ObjectPool`1.#ctor(CodeJam.ObjectPools.ObjectPool{`0}.Factory)">
            <summary>
            Initializes a new instance of the <see cref="T:CodeJam.ObjectPools.ObjectPool`1"/> class.
            </summary>
            <param name="factory">The instance factory.</param>
        </member>
        <member name="M:CodeJam.ObjectPools.ObjectPool`1.#ctor(CodeJam.ObjectPools.ObjectPool{`0}.Factory,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:CodeJam.ObjectPools.ObjectPool`1"/> class with the specified pool size.
            </summary>
            <param name="factory">The instance factory.</param>
            <param name="size">The pool size.</param>
        </member>
        <member name="M:CodeJam.ObjectPools.ObjectPool`1.Allocate">
            <summary>
            Produces an instance.
            </summary>
            <remarks>
            Search strategy is a simple linear probing which is chosen for it cache-friendliness.
            Note that Free will try to store recycled objects close to the start thus statistically 
            reducing how far we will typically search.
            </remarks>
        </member>
        <member name="M:CodeJam.ObjectPools.ObjectPool`1.Free(`0)">
            <summary>
            Returns objects to the pool.
            </summary>
            <remarks>
            Search strategy is a simple linear probing which is chosen for it cache-friendliness.
            Note that Free will try to store recycled objects close to the start thus statistically 
            reducing how far we will typically search in Allocate.
            </remarks>
        </member>
        <member name="M:CodeJam.ObjectPools.ObjectPool`1.ForgetTrackedObject(`0,`0)">
            <summary>
            Removes an object from leak tracking.  
            
            This is called when an object is returned to the pool.  It may also be explicitly 
            called if an object allocated from the pool is intentionally not being returned
            to the pool.  This can be of use with pooled arrays if the consumer wants to 
            return a larger array to the pool than was originally allocated.
            </summary>
        </member>
        <member name="T:CodeJam.Option`1">
            <summary>
            Represents a value type that can be assigned null.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:CodeJam.Option`1.#ctor(`0)">
            <summary>
            Initializes a new instance to the specified value.
            </summary>
        </member>
        <member name="P:CodeJam.Option`1.HasValue">
            <summary>
            Gets a value indicating whether the current object has a value.
            </summary>
        </member>
        <member name="P:CodeJam.Option`1.Value">
            <summary>
            Gets the value of the current object.
            </summary>
        </member>
        <member name="M:CodeJam.Option`1.op_Implicit(`0)~CodeJam.Option{`0}">
            <summary>
            Creates a new object initialized to a specified value. 
            </summary>
        </member>
        <member name="T:CodeJam.OptionExtensions">
            <summary>
            Extensions for <see cref="T:CodeJam.Option`1"/>
            </summary>
        </member>
        <member name="M:CodeJam.OptionExtensions.Match``1(CodeJam.Option{``0},System.Action{CodeJam.Option{``0}},System.Action)">
            <summary>
            Calls <paramref name="someAction"/> if <paramref name="option"/> has value,
            and <paramref name="noneAction"/> otherwise.
            </summary>
        </member>
        <member name="M:CodeJam.OptionExtensions.Match``2(CodeJam.Option{``0},System.Func{CodeJam.Option{``0},``1},System.Func{``1})">
            <summary>
            Calls <paramref name="someFunc"/> if <paramref name="option"/> has value,
            and <paramref name="noneFunc"/> otherwise.
            </summary>
        </member>
        <member name="M:CodeJam.OptionExtensions.GetValueOrDefault``1(CodeJam.Option{``0},``0)">
            <summary>
            Returns value of <paramref name="option"/>, or <paramref name="defaultValue"/> if <paramref name="option"/>
            hasn't it.
            </summary>
        </member>
        <member name="M:CodeJam.OptionExtensions.Map``2(CodeJam.Option{``0},System.Func{``0,``1})">
            <summary>
            Converts <paramref name="option"/> value to another option with <paramref name="selectFunc"/>.
            </summary>
        </member>
        <member name="T:CodeJam.CharExtensions">
            <summary>
            <see cref="T:System.Char"/> structure extensions.
            </summary>
        </member>
        <member name="M:CodeJam.CharExtensions.IsLetter(System.Char)">
            <summary>
            Infix form of <see cref="M:System.Char.IsLetter(System.Char)"/>.
            </summary>
        </member>
        <member name="M:CodeJam.CharExtensions.IsDigit(System.Char)">
            <summary>
            Infix form of <see cref="M:System.Char.IsDigit(System.Char)"/>.
            </summary>
        </member>
        <member name="M:CodeJam.CharExtensions.IsLetterOrDigit(System.Char)">
            <summary>
            Infix form of <see cref="M:System.Char.IsLetterOrDigit(System.Char)"/>.
            </summary>
        </member>
        <member name="M:CodeJam.CharExtensions.IsWhiteSpace(System.Char)">
            <summary>
            Infix form of <see cref="M:System.Char.IsWhiteSpace(System.Char)"/>.
            </summary>
        </member>
        <member name="M:CodeJam.CharExtensions.IsControl(System.Char)">
            <summary>
            Infix form of <see cref="M:System.Char.IsControl(System.Char)"/>.
            </summary>
        </member>
        <member name="M:CodeJam.CharExtensions.IsSurrogate(System.Char)">
            <summary>
            Infix form of <see cref="M:System.Char.IsSurrogate(System.Char)"/>.
            </summary>
        </member>
        <member name="M:CodeJam.CharExtensions.IsHightSurrogate(System.Char)">
            <summary>
            Infix form of <see cref="M:System.Char.IsHighSurrogate(System.Char)"/>.
            </summary>
        </member>
        <member name="M:CodeJam.CharExtensions.IsLowSurrogate(System.Char)">
            <summary>
            Infix form of <see cref="M:System.Char.IsLowSurrogate(System.Char)"/>.
            </summary>
        </member>
        <member name="M:CodeJam.CharExtensions.IsLower(System.Char)">
            <summary>
            Infix form of <see cref="M:System.Char.IsLower(System.Char)"/>.
            </summary>
        </member>
        <member name="M:CodeJam.CharExtensions.IsUpper(System.Char)">
            <summary>
            Infix form of <see cref="M:System.Char.IsUpper(System.Char)"/>.
            </summary>
        </member>
        <member name="M:CodeJam.CharExtensions.IsNumber(System.Char)">
            <summary>
            Infix form of <see cref="M:System.Char.IsNumber(System.Char)"/>.
            </summary>
        </member>
        <member name="M:CodeJam.CharExtensions.IsPunctuation(System.Char)">
            <summary>
            Infix form of <see cref="M:System.Char.IsPunctuation(System.Char)"/>.
            </summary>
        </member>
        <member name="M:CodeJam.CharExtensions.IsSeparator(System.Char)">
            <summary>
            Infix form of <see cref="M:System.Char.IsSeparator(System.Char)"/>.
            </summary>
        </member>
        <member name="M:CodeJam.CharExtensions.IsSymbol(System.Char)">
            <summary>
            Infix form of <see cref="M:System.Char.IsSymbol(System.Char)"/>.
            </summary>
        </member>
        <member name="T:CodeJam.NaturalOrderStringComparer">
            <summary>
            String comparisons using a "natural order" algorithm.
            </summary>
        </member>
        <member name="F:CodeJam.NaturalOrderStringComparer.Comparer">
            <summary>
            Gets a <see cref="T:CodeJam.NaturalOrderStringComparer"/> object
            that performs a string comparison using a "natural order" algorithm.
            </summary>
            <returns>
            A <see cref="T:CodeJam.NaturalOrderStringComparer"/> object
            that performs a string comparison using a "natural order" algorithm.
            </returns>
        </member>
        <member name="F:CodeJam.NaturalOrderStringComparer.IgnoreCaseComparer">
            <summary>
            Gets a <see cref="T:CodeJam.NaturalOrderStringComparer"/> object
            that performs a case-insensitive string comparison using a "natural order" algorithm.
            </summary>
            <returns>
            A <see cref="T:CodeJam.NaturalOrderStringComparer"/> object
            that performs a case-insensitive string comparison using a "natural order" algorithm.
            </returns>
        </member>
        <member name="F:CodeJam.NaturalOrderStringComparer.Comparision">
            <summary>
            Gets a <see cref="T:System.Comparison`1"/> delegate that performs a string comparison using a "natural order" algorithm.
            </summary>
            <returns>
            A <see cref="T:System.Comparison`1"/> delegate that performs a string comparison using a "natural order" algorithm.
            </returns>
        </member>
        <member name="F:CodeJam.NaturalOrderStringComparer.IgnoreCaseComparision">
            <summary>
            Gets a <see cref="T:System.Comparison`1"/> delegate that performs a case-insensitive
            string comparison using a "natural order" algorithm.
            </summary>
            <returns>
            A <see cref="T:System.Comparison`1"/> delegate that performs a case-insensitive
            string comparison using a "natural order" algorithm.
            </returns>
        </member>
        <member name="F:CodeJam.NaturalOrderStringComparer._ignoreCase">
            <summary>
            true to ignore case during the comparison; otherwise, false.
            </summary>
        </member>
        <member name="M:CodeJam.NaturalOrderStringComparer.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:CodeJam.NaturalOrderStringComparer"/> class.
            </summary>
        </member>
        <member name="M:CodeJam.NaturalOrderStringComparer.Compare(System.String,System.String)">
            <summary>
            Compares two objects and returns a value indicating whether one is less than, equal to, or greater than the other.
            </summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>
            A signed integer that indicates the relative values of <paramref name="a"/> and <paramref name="b"/>,
            as shown in the following table.
            Value Meaning Less than zero <paramref name="a"/> is less than <paramref name="b"/>.
            Zero <paramref name="a"/> equals <paramref name="b"/>.
            Greater than zero <paramref name="a"/> is greater than <paramref name="b"/>.
            </returns>
        </member>
        <member name="M:CodeJam.NaturalOrderStringComparer.Compare(System.String,System.String,System.Boolean)">
            <summary>
            Compares two objects and returns a value indicating whether one is less than, equal to, or greater than the other.
            </summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <param name="ignoreCase">true to ignore case during the comparison; otherwise, false.</param>
            <returns>
            A signed integer that indicates the relative values of <paramref name="a"/> and <paramref name="b"/>,
            as shown in the following table.
            Value Meaning Less than zero <paramref name="a"/> is less than <paramref name="b"/>.
            Zero <paramref name="a"/> equals <paramref name="b"/>.
            Greater than zero <paramref name="a"/> is greater than <paramref name="b"/>.
            </returns>
        </member>
        <member name="M:CodeJam.NaturalOrderStringComparer.CompareNumerical(System.String,System.String,System.Boolean,System.Int32@,System.Int32@)">
            <summary>
            Compares numerical strings starting from non-zeroes
            </summary>
        </member>
        <member name="M:CodeJam.NaturalOrderStringComparer.System#Collections#Generic#IComparer{System#String}#Compare(System.String,System.String)">
            <summary>
            Compares two objects and returns a value indicating whether one is less than, equal to, or greater than the other.
            </summary>
            <param name="x">The first object to compare.</param>
            <param name="y">The second object to compare.</param>
            <returns>
            A signed integer that indicates the relative values of <paramref name="x"/> and <paramref name="y"/>,
            as shown in the following table.
            Value Meaning Less than zero <paramref name="x"/> is less than <paramref name="y"/>.
            Zero <paramref name="x"/> equals <paramref name="y"/>.
            Greater than zero <paramref name="x"/> is greater than <paramref name="y"/>.
            </returns>
        </member>
        <member name="T:CodeJam.StringExtensions">
            <summary>
            <see cref="T:System.String"/> class extensions.
            </summary>
        </member>
        <member name="M:CodeJam.StringExtensions.Substring(System.String,CodeJam.StringOrigin,System.Int32)">
            <summary>
            Retrieves a substring from <paramref name="str"/>.
            </summary>
            <param name="str"></param>
            <param name="origin">
            Specifies the beginning, or the end as a reference point for offset, using a value of type
            <see cref="T:CodeJam.StringOrigin"/>.
            </param>
            <param name="length">The number of characters in the substring.</param>
            <returns>
            A string that is equivalent to the substring of length <paramref name="length"/> that begins at
            <paramref name="origin"/> in  <paramref name="str"/>, or Empty if length of <paramref name="str"/>
            or <paramref name="length"/> is zero.
            </returns>
        </member>
        <member name="M:CodeJam.StringExtensions.Prefix(System.String,System.Int32)">
            <summary>
            Retireves prefix of length <paramref name="length"/>.
            </summary>
            <param name="str"></param>
            <param name="length">The number of characters in the substring.</param>
        </member>
        <member name="M:CodeJam.StringExtensions.Suffix(System.String,System.Int32)">
            <summary>
            Retireves prefix of length <paramref name="length"/>.
            </summary>
            <param name="str"></param>
            <param name="length">The number of characters in the substring.</param>
        </member>
        <member name="M:CodeJam.StringExtensions.TrimPrefix(System.String,System.String,System.Collections.Generic.IEqualityComparer{System.String})">
            <summary>
            Trims <paramref name="str"/> prefix if it equals to <paramref name="prefix"/>.
            </summary>
        </member>
        <member name="M:CodeJam.StringExtensions.TrimPrefix(System.String,System.String)">
            <summary>
            Trims <paramref name="str"/> prefix if it equals to <paramref name="prefix"/>.
            </summary>
        </member>
        <member name="M:CodeJam.StringExtensions.TrimSuffix(System.String,System.String,System.Collections.Generic.IEqualityComparer{System.String})">
            <summary>
            Trims <paramref name="str"/> suffix if it equals to <paramref name="suffix"/>.
            </summary>
        </member>
        <member name="M:CodeJam.StringExtensions.TrimSuffix(System.String,System.String)">
            <summary>
            Trims <paramref name="str"/> prefix if it equals to <paramref name="suffix"/>.
            </summary>
        </member>
        <member name="M:CodeJam.StringExtensions.ToByteSizeString(System.Int64)">
            <summary>
            Returns size in bytes string representation.
            </summary>
        </member>
        <member name="M:CodeJam.StringExtensions.ToByteSizeString(System.Int64,System.IFormatProvider)">
            <summary>
            Returns size in bytes string representation.
            </summary>
        </member>
        <member name="M:CodeJam.StringExtensions.SplitWithTrim(System.String,System.Char[])">
            <summary>
            Splits <paramref name="source"/> and returns whitespace trimmed parts.
            </summary>
            <param name="source">Source string.</param>
            <param name="separators">Separator chars</param>
            <returns>Enumeration of parts.</returns>
        </member>
        <member name="M:CodeJam.StringExtensions.ToHexString(System.Byte[])">
            <summary>
            Creates hex representation of byte array.
            </summary>
            <param name="data">Byte array.</param>
            <returns>
            <paramref name="data"/> represented as a series of hexadecimal representations.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="data"/> is null.</exception>
        </member>
        <member name="M:CodeJam.StringExtensions.ToHexString(System.Byte[],System.String)">
            <summary>
            Creates hex representation of byte array.
            </summary>
            <param name="data">Byte array.</param>
            <param name="byteSeparator">Separator between bytes. If null - no separator used.</param>
            <returns>
            <paramref name="data"/> represented as a series of hexadecimal representations divided by separator.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="data"/> is null.</exception>
        </member>
        <member name="M:CodeJam.StringExtensions.IsNullOrEmpty(System.String)">
            <summary>
            Infix form of <see cref="M:System.String.IsNullOrEmpty(System.String)"/>.
            </summary>
        </member>
        <member name="M:CodeJam.StringExtensions.NotNullNorEmpty(System.String)">
            <summary>
            Returns true if argument is not null nor empty.
            </summary>
        </member>
        <member name="M:CodeJam.StringExtensions.IsNullOrWhiteSpace(System.String)">
            <summary>
            Infix form of <see cref="M:System.String.IsNullOrWhiteSpace(System.String)"/>.
            </summary>
        </member>
        <member name="M:CodeJam.StringExtensions.NotNullNorWhiteSpace(System.String)">
            <summary>
            Returns true if argument is not null nor whitespace.
            </summary>
        </member>
        <member name="M:CodeJam.StringExtensions.FormatWith(System.String,System.Object)">
            <summary>
            Replaces one or more format items in a specified string with the string representation of a specified object.
            </summary>
            <param name="format">A composite format string.</param>
            <param name="arg">The object to format.</param>
            <returns>
            A copy of <paramref name="format"/> in which any format items are replaced by the string representation of
            <paramref name="arg"/>.
            </returns>
        </member>
        <member name="M:CodeJam.StringExtensions.FormatWith(System.String,System.Object,System.Object)">
            <summary>
            Replaces the format items in a specified string with the string representation of two specified objects.
            </summary>
            <param name="format">A composite format string.</param>
            <param name="arg0">The first object to format.</param>
            <param name="arg1">The second object to format.</param>
            <returns>
            A copy of <paramref name="format"/> in which format items are replaced by the string representations
            of <paramref name="arg0"/> and <paramref name="arg1"/>.
            </returns>
        </member>
        <member name="M:CodeJam.StringExtensions.FormatWith(System.String,System.Object,System.Object,System.Object)">
            <summary>
            Replaces the format items in a specified string with the string representation of three specified objects.
            </summary>
            <param name="format">A composite format string.</param>
            <param name="arg0">The first object to format.</param>
            <param name="arg1">The second object to format.</param>
            <param name="arg2">The third object to format.</param>
            <returns>
            A copy of <paramref name="format"/> in which the format items have been replaced by the string representations
            of <paramref name="arg0"/>, <paramref name="arg1"/>, and <paramref name="arg2"/>.
            </returns>
        </member>
        <member name="M:CodeJam.StringExtensions.FormatWith(System.String,System.Object[])">
            <summary>
            Replaces the format items in a specified string with the string representations 
            of corresponding objects in a specified array.
            </summary>
            <param name="format">A composite format string.</param>
            <param name="args">An object array that contains zero or more objects to format.</param>
            <returns>
            A copy of format in which the format items have been replaced by the string representation of the corresponding
            objects in args
            </returns>
        </member>
        <member name="M:CodeJam.StringExtensions.Join(System.String[],System.String)">
            <summary>
            Concatenates all the elements of a string array, using the specified separator between each element. 
            </summary>
            <remarks>
            Infix form of <see cref="M:System.String.Join(System.String,System.String[])"/>.
            </remarks>
            <param name="values">An array that contains the elements to concatenate.</param>
            <param name="separator">
            The string to use as a separator. <paramref name="separator"/> is included in the returned string only
            if <paramref name="values"/> has more than one element.
            </param>
            <returns>
            A string that consists of the members of <paramref name="values"/> delimited by the <paramref name="separator"/>
            string.
            If <paramref name="values"/> has no members, the method returns <see cref="F:System.String.Empty"/>.
            </returns>
        </member>
        <member name="M:CodeJam.StringExtensions.Join(System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Concatenates the members of a constructed <see cref="T:System.Collections.Generic.IEnumerable`1"/> collection of type <see cref="T:System.String"/>,
            using the specified separator between each member.
            </summary>
            <remarks>
            Infix form of <see cref="M:System.String.Join(System.String,System.Collections.Generic.IEnumerable{System.String})"/>.
            </remarks>
            <param name="values">A collection that contains the strings to concatenate.</param>
            <param name="separator">
            The string to use as a separator. <paramref name="separator"/> is included in the returned string only
            if <paramref name="values"/> has more than one element.
            </param>
            <returns>
            A string that consists of the members of <paramref name="values"/> delimited by the <paramref name="separator"/>
            string.
            If <paramref name="values"/> has no members, the method returns <see cref="F:System.String.Empty"/>.
            </returns>
        </member>
        <member name="M:CodeJam.StringExtensions.Join``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Concatenates the members of a collection, using the specified separator between each member.
            </summary>
            <remarks>
            Infix form of <see cref="M:System.String.Join``1(System.String,System.Collections.Generic.IEnumerable{``0})"/>.
            </remarks>
            <param name="values">A collection that contains the strings to concatenate.</param>
            <param name="separator">The string to use as a separator. <paramref name="separator"/> is included in the returned string only
            if <paramref name="values"/> has more than one element.</param>
            <returns>
            A string that consists of the members of <paramref name="values"/> delimited by the <paramref name="separator"/>
            string.
            If <paramref name="values"/> has no members, the method returns <see cref="F:System.String.Empty"/>.
            </returns>
        </member>
        <member name="M:CodeJam.StringExtensions.Join``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Concatenates the members of a collection.
            </summary>
            <param name="values">A collection that contains the strings to concatenate.</param>
            <returns>
            A string that consists of the members of <paramref name="values"/>.
            If <paramref name="values"/> has no members, the method returns <see cref="F:System.String.Empty"/>.
            </returns>
        </member>
        <member name="M:CodeJam.StringExtensions.Length(System.String)">
            <summary>
            Returns length of argument, even if argument is null.
            </summary>
        </member>
        <member name="M:CodeJam.StringExtensions.ToInvariantString``1(``0)">
            <summary>
            Culture invariant version of <see cref="M:System.IFormattable.ToString(System.String,System.IFormatProvider)"/>
            </summary>
        </member>
        <member name="M:CodeJam.StringExtensions.ToInvariantString``1(``0,System.String)">
            <summary>
            Culture invariant version of <see cref="M:System.IFormattable.ToString(System.String,System.IFormatProvider)"/>
            </summary>
        </member>
        <member name="M:CodeJam.StringExtensions.FromBase64(System.String)">
            <summary>
            Converts the specified string, which encodes binary data as base-64 digits, to an equivalent byte array.
            </summary>
            <param name="str">The string to convert.</param>
            <returns>An array of bytes that is equivalent to <paramref name="str"/>.</returns>
        </member>
        <member name="M:CodeJam.StringExtensions.ToBase64(System.Byte[],System.Base64FormattingOptions)">
            <summary>
            Converts an array of bytes to its equivalent string representation that is encoded with base-64 digits.
            A parameter specifies whether to insert line breaks in the return value.
            </summary>
            <param name="data">an array of bytes.</param>
            <param name="options">
            <see cref="F:System.Base64FormattingOptions.InsertLineBreaks"/> to insert a line break every 76 characters,
            or <see cref="F:System.Base64FormattingOptions.None"/> to not insert line breaks.
            </param>
            <returns>The string representation in base 64 of the elements in <paramref name="data"/>.</returns>
        </member>
        <member name="M:CodeJam.StringExtensions.ToBytes(System.String,System.Text.Encoding)">
            <summary>
            Encodes all the characters in the specified string into a sequence of bytes.
            </summary>
            <param name="str">The string containing the characters to encode.</param>
            <param name="encoding">Encoding to convert.</param>
            <returns>A byte array containing the results of encoding the specified set of characters.</returns>
        </member>
        <member name="M:CodeJam.StringExtensions.ToBytes(System.String)">
            <summary>
            Encodes all the characters in the specified string into a sequence of bytes using UTF-8 encoding.
            </summary>
            <param name="str">The string containing the characters to encode.</param>
            <returns>A byte array containing the results of encoding the specified set of characters.</returns>
        </member>
        <member name="M:CodeJam.StringExtensions.ToInt(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
            <summary>
            Converts the string representation of a number in a specified style and culture-specific format to its 32-bit
            signed integer equivalent. A return value indicates whether the conversion succeeded.
            </summary>
            <param name="str">
            A string containing a number to convert. The string is interpreted using the style specified by
            <paramref name="numberStyle"/>.
            </param>
            <param name="numberStyle">
            A bitwise combination of enumeration values that indicates the style elements that can be present in
            <paramref name="str"/>. Default value is Integer.
            </param>
            <param name="provider">
            An object that supplies culture-specific formatting information about <paramref name="str"/>.
            </param>
            <returns>
            When this method returns, contains the 32-bit signed integer value equivalent of the number contained in
            <paramref name="str"/>, if the conversion succeeded, or null if the conversion failed. The conversion fails if
            the <paramref name="str"/> parameter is null or String.Empty, is not in a format compliant withstyle, or
            represents a number less than <see cref="F:System.Int32.MinValue"/> or greater than <see cref="F:System.Int32.MaxValue"/>.
            </returns>
        </member>
        <member name="M:CodeJam.StringExtensions.ToDouble(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
            <summary>
            Converts the string representation of a number in a specified style and culture-specific format to its
            <see cref="T:System.Double"/> equivalent. A return value indicates whether the conversion succeeded.
            </summary>
            <param name="str">
            A string containing a number to convert. The string is interpreted using the style specified by
            <paramref name="numberStyle"/>.
            </param>
            <param name="numberStyle">
            A bitwise combination of enumeration values that indicates the style elements that can be present in
            <paramref name="str"/>. Default value is Float.
            </param>
            <param name="provider">
            An object that supplies culture-specific formatting information about <paramref name="str"/>.
            </param>
            <returns>
            When this method returns, contains the <see cref="T:System.Double"/> value equivalent of the number contained in
            <paramref name="str"/>, if the conversion succeeded, or null if the conversion failed. The conversion fails if
            the <paramref name="str"/> parameter is null or String.Empty, is not in a format compliant withstyle, or
            represents a number less than <see cref="F:System.Double.MinValue"/> or greater than <see cref="F:System.Double.MaxValue"/>.
            </returns>
        </member>
        <member name="T:CodeJam.StringOrigin">
            <summary>
            String functions relative parameters origin
            </summary>
        </member>
        <member name="F:CodeJam.StringOrigin.Begin">
            <summary>
            Relative to string begin.
            </summary>
        </member>
        <member name="F:CodeJam.StringOrigin.End">
            <summary>
            Relative to string end.
            </summary>
        </member>
        <member name="T:CodeJam.Memory">
            <summary>
            The utility class for working with arrays of primitive types.
            </summary>
        </member>
        <member name="M:CodeJam.Memory.Compare(System.Byte*,System.Byte*,System.Int32)">
            <summary>
            Determines whether the first count of bytes of the <paramref name="p1"/> is equal to the <paramref name="p2"/>.
            </summary>
            <param name="p1">The first buffer to compare.</param>
            <param name="p2">The second buffer to compare.</param>
            <param name="count">The number of bytes to compare.</param>
            <returns>
            true if all count bytes of the <paramref name="p1"/> and <paramref name="p2"/> are equal; otherwise, false.
            </returns>
        </member>
        <member name="T:CodeJam.Xml.XNodeExtensions">
            <summary>
            Extensions for XLinq.
            </summary>
        </member>
        <member name="M:CodeJam.Xml.XNodeExtensions.RequiredRoot(System.Xml.Linq.XDocument)">
            <summary>
            Returns <paramref name="document"/> root, or throw an exception, if root is null.
            </summary>
        </member>
        <member name="M:CodeJam.Xml.XNodeExtensions.RequiredRoot(System.Xml.Linq.XDocument,System.Xml.Linq.XName)">
            <summary>
            Returns <paramref name="document"/> root, or throws an exception, if root is null or has another name.
            </summary>
        </member>
        <member name="M:CodeJam.Xml.XNodeExtensions.RequiredElement(System.Xml.Linq.XElement,System.Xml.Linq.XName)">
            <summary>
            Returns child element with name <paramref name="name"/>, or throws an exception if element does not exists.
            </summary>
        </member>
        <member name="M:CodeJam.Xml.XNodeExtensions.RequiredElement(System.Xml.Linq.XElement,System.Xml.Linq.XName[])">
            <summary>
            Returns child element with one of names in <paramref name="names"/>,
            or throws an exception if element does not exists.
            </summary>
        </member>
        <member name="M:CodeJam.Xml.XNodeExtensions.RequiredAttribute(System.Xml.Linq.XElement,System.Xml.Linq.XName)">
            <summary>
            Returns attribute with name <paramref name="name"/>, or thows an exception if attribute does not exists.
            </summary>
        </member>
        <member name="M:CodeJam.Xml.XNodeExtensions.OptionalAttributeValue``1(System.Xml.Linq.XElement,System.Xml.Linq.XName,System.Func{System.String,``0},``0)">
            <summary>
            Returns value of optional attribute.
            </summary>
            <typeparam name="T">Type of value</typeparam>
            <param name="element">Element with attribute</param>
            <param name="attrName">Attribute name.</param>
            <param name="parser">Value parser</param>
            <param name="defaultValue">Default value.</param>
            <returns>Parsed value or <paramref name="defaultValue"/> if attribute not exists.</returns>
        </member>
        <member name="M:CodeJam.Xml.XNodeExtensions.OptionalAttributeValue(System.Xml.Linq.XElement,System.Xml.Linq.XName,System.String)">
            <summary>
            Returns string value of optional attribute.
            </summary>
            <param name="element">Element with attribute</param>
            <param name="attrName">Attribute name.</param>
            <param name="defaultValue">Default value.</param>
            <returns>Parsed value or <paramref name="defaultValue"/> if attribute does not exist.</returns>
        </member>
        <member name="M:CodeJam.Xml.XNodeExtensions.OptionalElementAltValue``1(System.Xml.Linq.XElement,System.Func{System.Xml.Linq.XElement,``0},``0,System.Xml.Linq.XName[])">
            <summary>
            Returns value of optional element.
            </summary>
            <param name="parent">Parent element.</param>
            <param name="valueSelector">Function to select element value</param>
            <param name="defaultValue">Default value.</param>
            <param name="names">Array of possible element names.</param>
            <returns>Selected element value or <paramref name="defaultValue"/> if element does not exist</returns>
        </member>
        <member name="M:CodeJam.Xml.XNodeExtensions.OptionalElementValue``1(System.Xml.Linq.XElement,System.Xml.Linq.XName,System.Func{System.Xml.Linq.XElement,``0},``0)">
            <summary>
            Returns value of optional element.
            </summary>
            <param name="parent">Parent element.</param>
            <param name="valueSelector">Function to select element value</param>
            <param name="defaultValue">Default value.</param>
            <param name="name">Element name.</param>
            <returns>Selected element value or <paramref name="defaultValue"/> if element does not exist</returns>
        </member>
        <member name="M:CodeJam.Xml.XNodeExtensions.OptionalElementValue``1(System.Xml.Linq.XElement,System.Xml.Linq.XName,System.Func{System.String,``0},``0)">
            <summary>
            Returns value of optional element.
            </summary>
            <param name="parent">Parent element.</param>
            <param name="valueSelector">Function to parse element value</param>
            <param name="defaultValue">Default value.</param>
            <param name="name">Element name.</param>
            <returns>Selected element value or <paramref name="defaultValue"/> if element does not exist</returns>
        </member>
        <member name="M:CodeJam.Xml.XNodeExtensions.OptionalElementValue(System.Xml.Linq.XElement,System.Xml.Linq.XName,System.String)">
            <summary>
            Returns string value of optional element.
            </summary>
            <param name="parent">Parent element.</param>
            <param name="defaultValue">Default value.</param>
            <param name="name">Element name.</param>
            <returns>Selected element value or <paramref name="defaultValue"/> if element does not exist</returns>
        </member>
    </members>
</doc>
